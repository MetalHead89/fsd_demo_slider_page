!function(e){function t(t){for(var i,n,a=t[0],r=t[1],h=t[2],u=0,d=[];u<a.length;u++)n=a[u],Object.prototype.hasOwnProperty.call(o,n)&&o[n]&&d.push(o[n][0]),o[n]=0;for(i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i]);for(c&&c(t);d.length;)d.shift()();return l.push.apply(l,h||[]),s()}function s(){for(var e,t=0;t<l.length;t++){for(var s=l[t],i=!0,a=1;a<s.length;a++){var r=s[a];0!==o[r]&&(i=!1)}i&&(l.splice(t--,1),e=n(n.s=s[0]))}return e}var i={},o={0:0},l=[];function n(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=i,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="";var a=window.webpackJsonp=window.webpackJsonp||[],r=a.push.bind(a);a.push=t,a=a.slice();for(var h=0;h<a.length;h++)t(a[h]);var c=r;l.push([13,1]),s()}([function(e,t,s){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},l=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),n=[];function a(e){for(var t=-1,s=0;s<n.length;s++)if(n[s].identifier===e){t=s;break}return t}function r(e,t){for(var s={},i=[],o=0;o<e.length;o++){var l=e[o],r=t.base?l[0]+t.base:l[0],h=s[r]||0,c="".concat(r," ").concat(h);s[r]=h+1;var u=a(c),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==u?(n[u].references++,n[u].updater(d)):n.push({identifier:c,updater:g(d,t),references:1}),i.push(c)}return i}function h(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=s.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var n=l(e.insert||"head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,s,i){var o=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var l=document.createTextNode(o),n=e.childNodes;n[t]&&e.removeChild(n[t]),n.length?e.insertBefore(l,n[t]):e.appendChild(l)}}function p(e,t,s){var i=s.css,o=s.media,l=s.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),l&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var m=null,b=0;function g(e,t){var s,i,o;if(t.singleton){var l=b++;s=m||(m=h(t)),i=d.bind(null,s,l,!1),o=d.bind(null,s,l,!0)}else s=h(t),i=p.bind(null,s,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var s=r(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<s.length;i++){var o=a(s[i]);n[o].references--}for(var l=r(e,t),h=0;h<s.length;h++){var c=a(s[h]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}s=l}}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));t.default=class{constructor(e,t){const s=document.createElement("div");this.control=s,this.subject=new o.default,this.lastPosition={left:0,top:0};let i=e+"_horizontal";t&&(i=`${e}_${t}`),this.control.classList.add(""+e,i)}setPosition(e){const t={left:e.left,top:e.top},s=this.control.parentElement;if(s){const e=s.getBoundingClientRect();t.left-=e.left,t.top-=e.top}this.lastPosition=t}getPosition(){return this.lastPosition}getControl(){return this.control}getSize(){return{width:this.control.offsetWidth,height:this.control.offsetHeight}}switchToHorizontal(){const e=this.control.classList[0];this.control.classList.remove(e+"_vertical"),this.control.classList.add(e+"_horizontal")}switchToVertical(){const e=this.control.classList[0];this.control.classList.remove(e+"_horizontal"),this.control.classList.add(e+"_vertical")}remove(){this.control.remove()}getOrientation(){const e=this.control.classList[0];return this.control.classList[1].replace(e+"_","")}getRect(){return this.control.getBoundingClientRect()}getStyle(e){var t;return null===(t=document.defaultView)||void 0===t?void 0:t.getComputedStyle(this.control,null).getPropertyValue(e)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.observers={}}register(e,t){Object.prototype.hasOwnProperty.call(this.observers,e)||(this.observers[e]=[]),this.observers[e].push(t)}unsubscribe(e,t){this.observers[e]=this.observers[e].filter(e=>e!==t)}notify(e){Object.prototype.hasOwnProperty.call(this.observers,e)&&this.observers[e].forEach(t=>t.update(e))}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l{constructor(e){this.orientation="horizontal",this.type="range",this.scale=!0,this.popUps=!0,this.min=0,this.max=10,this.step=1,this.thumbOneValue=3,this.thumbTwoValue=7,this.sliderSize={width:500,height:10},this.thumbSize={width:20,height:10},this.scalePointSize={width:0,height:0},this.subject=new o.default,this.refreshSliderState(e)}refreshSliderState(e){void 0!==e.sliderSize&&(this.sliderSize=e.sliderSize),void 0!==e.thumbSize&&(this.thumbSize=e.thumbSize),this.orientation!==e.orientation&&(this.orientation=e.orientation,this.subject.notify("orientationIsUpdated")),this.type!==e.type&&(this.type=e.type,this.rangeValuesIsCorrect()&&(this.thumbTwoValue=this.thumbOneValue),this.subject.notify("typeIsUpdated")),this.min!==e.min&&this.updateMinValue(e.min),this.max!==e.max&&this.updateMaxValue(e.max),this.step!==e.step&&this.updateStep(e.step),this.scale!==e.scale&&(this.scale=e.scale,this.subject.notify("scaleStateIsUpdated")),this.popUps!==e.popUps&&(this.popUps=e.popUps,this.subject.notify("popUpsStateIsUpdated")),this.thumbOneValue===e.thumbOneValue&&this.thumbTwoValue===e.thumbTwoValue||this.setThumbsValues({thumbOne:e.thumbOneValue,thumbTwo:e.thumbTwoValue})}rangeValuesIsCorrect(){return"range"===this.type&&this.thumbTwoValue<this.thumbOneValue}updateThumbsState(e){let t=this.valueWithStep(this.positionByOrientation(e.thumbOne)),s=null;e.thumbTwo&&(s=this.valueWithStep(this.positionByOrientation(e.thumbTwo))),s&&t>s&&(this.subject.notify("thumbsSwapped"),[t,s]=[s,t]),this.thumbOneValue=t,s&&(this.thumbTwoValue=s),this.subject.notify("thumbsPositionsIsUpdated")}setSliderSize(e){this.sliderSize=l.getCorrectSize(e,0)}setThumbSize(e){this.thumbSize=l.getCorrectSize(e,0)}setThumbsValues(e){const t=this.thumbValueToPosition(e.thumbOne);let s=null;"range"===this.type&&(s=this.thumbValueToPosition(e.thumbTwo)),this.updateThumbsState({thumbOne:t,thumbTwo:s})}getMin(){return this.min}getMax(){return this.max}getStep(){return this.step}getScaleState(){return this.scale}getPopUpsState(){return this.popUps}getType(){return this.type}getOrientation(){return this.orientation}getProgressBarParams(){const e=this.thumbValueToPosition(this.thumbOneValue),t=this.thumbValueToPosition(this.thumbTwoValue),s=Object.assign({},this.sliderSize),i={left:0,top:0};let o=0,l=0;return"single"===this.type?l=this.positionByOrientation(e)+this.sizeByOrientation(this.thumbSize):(o=this.positionByOrientation(e),l=this.positionByOrientation(t)-this.positionByOrientation(e)+this.sizeByOrientation(this.thumbSize)),"horizontal"===this.orientation?(i.left=o,s.width=l):(i.top=o,s.height=l),{position:i,size:s}}getThumbsPositions(){return{thumbOne:this.thumbValueToPosition(this.thumbOneValue),thumbTwo:this.thumbValueToPosition(this.thumbTwoValue)}}getPopUpsParams(){return{popUpOne:{value:this.thumbOneValue,position:this.getPopUpPosition(this.thumbValueToPosition(this.thumbOneValue))},popUpTwo:{value:this.thumbTwoValue,position:this.getPopUpPosition(this.thumbValueToPosition(this.thumbTwoValue))}}}getThumbsValues(){return{thumbOne:this.thumbOneValue,thumbTwo:this.thumbTwoValue}}getScalePoints(){const e=[],t=this.getStepsCount(),s=this.getStepSize(),i=t+1;let o=0,l=this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(this.scalePointSize)/2;for(let t=0;t<=Math.round(i-1);t+=1){const i=this.thumbPositionToValue(l-this.sizeByOrientation(this.thumbSize)/2+this.sizeByOrientation(this.scalePointSize)/2);if(l=this.getCorrectPointPosition(l),0===t||this.pointsDoNotIntersect(l,o)){const t={left:0,top:0};"horizontal"===this.orientation?t.left=l:t.top=l,e.push({position:t,size:this.scalePointSize,value:i}),o=l}l+=s}return e}setScalePointSize(e){this.scalePointSize=e}recalculateStep(){const e=this.max-this.min;this.step=this.step>e?e:this.step}pointsDoNotIntersect(e,t){return e-t>this.sizeByOrientation(this.scalePointSize)}setThumbPositionOnClickPosition(e){const t={left:e.left-this.thumbSize.width/2,top:e.top-this.thumbSize.height/2};let s=this.thumbOneValue,i=this.thumbTwoValue;this.thumbTwoIsNearToClick(t)?i=this.thumbPositionToValue(this.positionByOrientation(t)):s=this.thumbPositionToValue(this.positionByOrientation(t)),this.setThumbsValues({thumbOne:s,thumbTwo:i})}thumbTwoIsNearToClick(e){return"range"===this.type&&Math.abs(this.positionByOrientation(e)-this.positionByOrientation(this.thumbValueToPosition(this.thumbTwoValue)))<Math.abs(this.positionByOrientation(e)-this.positionByOrientation(this.thumbValueToPosition(this.thumbOneValue)))}static getCorrectSize(e,t){return{width:e.width>=t?e.width:t,height:e.height>=t?e.height:t}}getPopUpPosition(e){let t=0,s=0;return"horizontal"===this.orientation?t=e.left+this.thumbSize.width/2:s=e.top+this.thumbSize.height/2,{left:t,top:s}}updateMinValue(e){this.min=e<this.max?e:this.min,this.subject.notify("minIsUpdated")}updateMaxValue(e){this.max=e>this.min?e:this.max,this.subject.notify("maxIsUpdated")}updateStep(e){const t=this.max-this.min;this.step=e>0&&e<=t?e:this.step,this.subject.notify("stepIsUpdated")}valueWithStep(e){if(this.thumbPositionToValue(e)>=this.max)return this.thumbPositionToValue(e);const t=this.getStepSize(),s=Math.round(e/t)*t;return this.thumbPositionToValue(s)}getStepsCount(){return(this.max-this.min)/this.step}getStepSize(){const e=this.getStepsCount();return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/e}thumbPositionToValue(e){const t=this.getPxPerValue();let s=Math.round(this.min+(this.max-this.min)/this.max*(e/t));return s=s<this.min?this.min:s,s=s>this.max?this.max:s,s}thumbValueToPosition(e){const t={left:0,top:0},s=this.getPxPerValue();let i=e;i<this.min?i=this.min:i>this.max&&(i=this.max);const o=(i-this.min)/(this.max-this.min)*s*this.max;return"horizontal"===this.orientation?t.left=o:t.top=o,t}getPxPerValue(){return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/this.max}sizeByOrientation(e){return"horizontal"===this.orientation?e.width:e.height}positionByOrientation(e){return"horizontal"===this.orientation?e.left:e.top}getCorrectPointPosition(e){const t=this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(this.scalePointSize)/2;return e>t&&(e=t),e}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(7)),l=i(s(8)),n=i(s(9)),a=i(s(10)),r=i(s(11)),h=i(s(12)),c=i(s(2));t.default=class{constructor(e){this.events={thumbIsDragged:()=>this.subject.notify("thumbIsDragged"),thumbIsCatched:()=>{var e;this.thumbOne.resetZIndex(),null===(e=this.thumbTwo)||void 0===e||e.resetZIndex()},clickToTrack:()=>this.subject.notify("clickToTrack"),clickToScale:()=>this.subject.notify("clickToScale")},this.subject=new c.default,this.sliderWrapper=e,this.slider=new o.default,this.track=new l.default,this.thumbOne=new n.default,this.thumbTwo=new n.default,this.popUpOne=new a.default,this.popUpTwo=new a.default,this.progressBar=new r.default,this.scale=new h.default,this.init()}init(){this.subscribeToEvents(),this.assembleSlider(),this.handleWindowResize=this.handleWindowResize.bind(this),window.addEventListener("resize",this.handleWindowResize)}handleWindowResize(){this.subject.notify("windowResized")}subscribeToEvents(){var e,t,s;this.thumbOne.subject.register("thumbIsDragged",this),null===(e=this.thumbTwo)||void 0===e||e.subject.register("thumbIsDragged",this),this.thumbOne.subject.register("thumbIsCatched",this),null===(t=this.thumbTwo)||void 0===t||t.subject.register("thumbIsCatched",this),this.track.subject.register("clickToTrack",this),null===(s=this.scale)||void 0===s||s.subject.register("clickToScale",this)}assembleSlider(){this.slider.append(this.track.getControl()),this.slider.append(this.thumbOne.getControl()),this.thumbTwo&&this.slider.append(this.thumbTwo.getControl()),this.popUpOne&&this.slider.append(this.popUpOne.getControl()),this.popUpTwo&&this.slider.append(this.popUpTwo.getControl()),this.slider.append(this.progressBar.getControl()),this.scale&&this.slider.append(this.scale.getControl()),this.sliderWrapper.append(this.slider.getControl())}update(e){e in this.events&&this.events[e]()}swapThumbs(){this.thumbTwo&&([this.thumbOne,this.thumbTwo]=[this.thumbTwo,this.thumbOne])}switchToHorizontal(){var e,t,s,i;this.slider.resetMargins(),this.slider.switchToHorizontal(),this.track.switchToHorizontal(),this.thumbOne.switchToHorizontal(),null===(e=this.thumbTwo)||void 0===e||e.switchToHorizontal(),null===(t=this.popUpOne)||void 0===t||t.switchToHorizontal(),null===(s=this.popUpTwo)||void 0===s||s.switchToHorizontal(),this.progressBar.switchToHorizontal(),null===(i=this.scale)||void 0===i||i.switchToHorizontal()}switchToVertical(){var e,t,s,i;this.slider.resetMargins(),this.slider.switchToVertical(),this.track.switchToVertical(),this.thumbOne.switchToVertical(),null===(e=this.thumbTwo)||void 0===e||e.switchToVertical(),null===(t=this.popUpOne)||void 0===t||t.switchToVertical(),null===(s=this.popUpTwo)||void 0===s||s.switchToVertical(),this.progressBar.switchToVertical(),null===(i=this.scale)||void 0===i||i.switchToVertical()}switchToSingle(){var e,t,s,i;null===(e=this.thumbTwo)||void 0===e||e.subject.unsubscribe("thumbIsCatched",this),null===(t=this.thumbTwo)||void 0===t||t.subject.unsubscribe("thumbIsCatched",this),null===(s=this.thumbTwo)||void 0===s||s.remove(),this.thumbTwo=null,null===(i=this.popUpTwo)||void 0===i||i.remove(),this.popUpTwo=null}switchToRange(){null===this.thumbTwo&&(this.thumbTwo=new n.default(this.slider.getOrientation()),this.slider.append(this.thumbTwo.getControl()),this.popUpOne&&(this.popUpTwo=new a.default(this.slider.getOrientation()),this.slider.append(this.popUpTwo.getControl())),this.thumbTwo.subject.register("thumbIsDragged",this),this.thumbTwo.subject.register("thumbIsCatched",this))}disablePopUps(){var e,t;null===(e=this.popUpOne)||void 0===e||e.remove(),this.popUpOne=null,null===(t=this.popUpTwo)||void 0===t||t.remove(),this.popUpTwo=null,this.slider.setMargins(this.getMargins())}enablePopUps(){null===this.popUpOne&&(this.popUpOne=new a.default(this.slider.getOrientation()),this.slider.append(this.popUpOne.getControl())),this.thumbTwoIsWithoutPopup()&&(this.popUpTwo=new a.default(this.slider.getOrientation()),this.slider.append(this.popUpTwo.getControl())),this.slider.setMargins(this.getMargins())}thumbTwoIsWithoutPopup(){return null===this.popUpTwo&&null!==this.thumbTwo}disableScale(){var e,t;null===(e=this.scale)||void 0===e||e.subject.unsubscribe("clickToScale",this),null===(t=this.scale)||void 0===t||t.remove(),this.scale=null,this.slider.setMargins(this.getMargins())}enableScale(){var e;this.scale&&(null===(e=this.scale)||void 0===e||e.remove()),this.scale=new h.default(this.slider.getOrientation()),this.slider.append(this.scale.getControl()),this.scale.subject.register("clickToScale",this),this.slider.setMargins(this.getMargins())}getThumbSize(){return this.thumbOne.getSize()}getSliderSize(){return this.slider.getSize()}getThumbsPositions(){const e=this.thumbOne.getPosition();let t=null;return this.thumbTwo&&(t=this.thumbTwo.getPosition()),{thumbOne:e,thumbTwo:t}}updateThumbs(e){var t;this.thumbOne.moveTo(e.thumbOne),e.thumbTwo&&(null===(t=this.thumbTwo)||void 0===t||t.moveTo(e.thumbTwo))}updateProgressBar(e){this.progressBar.update(e)}updatePopUps(e){this.popUpOne&&this.popUpOne.update(e.popUpOne),this.popUpTwo&&this.popUpTwo.update(e.popUpTwo)}getScalePointSize(e){return this.scale?this.scale.getPointSize(e):{width:0,height:0}}addScalePoints(e){var t;null===(t=this.scale)||void 0===t||t.addPoints(e),this.slider.setMargins(this.getMargins())}getTrackClickPosition(){return this.track.getPosition()}getScaleClickPosition(){return null===this.scale?{left:0,top:0}:this.scale.getPosition()}getMargins(){const e={left:0,top:0,right:0,bottom:0},t=this.slider.getRect(),s=this.popUpOne?this.popUpOne.getRect():null,i=this.scale?this.scale.getRect():null;return"horizontal"===this.slider.getOrientation()?(s&&(e.top+=t.top-s.top),i&&(e.bottom+=i.bottom-t.bottom)):(s&&(e.left+=t.left-s.left),i&&(e.right+=i.right-t.right)),e}}},,function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.events={thumbIsDragged:()=>{this.model.updateThumbsState(this.view.getThumbsPositions())},thumbsPositionsIsUpdated:()=>this.updateThumbsPositions(),minIsUpdated:()=>{this.updateView(),this.model.recalculateStep()},maxIsUpdated:()=>{this.updateView(),this.model.recalculateStep()},stepIsUpdated:()=>this.updateView(),orientationIsUpdated:()=>this.updateSliderOrientation(),typeIsUpdated:()=>this.updateSliderType(),scaleStateIsUpdated:()=>this.updateScaleState(),popUpsStateIsUpdated:()=>this.updatePopUpsState(),clickToTrack:()=>{this.model.setThumbPositionOnClickPosition(this.view.getTrackClickPosition())},clickToScale:()=>{this.model.setThumbPositionOnClickPosition(this.view.getScaleClickPosition())},thumbsSwapped:()=>this.view.swapThumbs(),windowResized:()=>this.init()},this.model=e.model,this.view=e.view,this.modelSubject=this.model.subject,this.viewSubject=this.view.subject,this.subscribeToEvents(),this.init()}init(){"horizontal"===this.model.getOrientation()?this.view.switchToHorizontal():this.view.switchToVertical(),this.model.setSliderSize(this.view.getSliderSize()),this.model.setThumbSize(this.view.getThumbSize()),"single"===this.model.getType()?this.view.switchToSingle():this.view.switchToRange(),this.model.getPopUpsState()?this.view.enablePopUps():this.view.disablePopUps(),this.updateView()}subscribeToEvents(){this.viewSubject.register("thumbIsDragged",this),this.modelSubject.register("thumbsPositionsIsUpdated",this),this.modelSubject.register("minIsUpdated",this),this.modelSubject.register("maxIsUpdated",this),this.modelSubject.register("stepIsUpdated",this),this.modelSubject.register("typeIsUpdated",this),this.modelSubject.register("orientationIsUpdated",this),this.modelSubject.register("scaleStateIsUpdated",this),this.modelSubject.register("popUpsStateIsUpdated",this),this.modelSubject.register("thumbsSwapped",this),this.view.subject.register("clickToTrack",this),this.view.subject.register("clickToScale",this),this.view.subject.register("windowResized",this)}update(e){e in this.events&&this.events[e]()}updateView(){if(this.model.updateThumbsState(this.model.getThumbsPositions()),this.model.getScaleState()){this.view.enableScale();const e=this.model.getMax();this.model.setScalePointSize(this.view.getScalePointSize(e));const t=this.model.getScalePoints();this.view.addScalePoints(t)}else this.view.disableScale()}updateThumbsPositions(){this.view.updateThumbs(this.model.getThumbsPositions()),this.view.updatePopUps(this.model.getPopUpsParams()),this.view.updateProgressBar(this.model.getProgressBarParams())}updateSliderOrientation(){"horizontal"===this.model.getOrientation()?this.view.switchToHorizontal():this.view.switchToVertical(),this.model.setSliderSize(this.view.getSliderSize()),this.updateView()}updateSliderType(){"single"===this.model.getType()?this.view.switchToSingle():this.view.switchToRange(),this.model.updateThumbsState(this.model.getThumbsPositions())}updateScaleState(){this.model.getScaleState()?(this.view.enableScale(),this.updateView()):this.view.disableScale()}updatePopUpsState(){this.model.getPopUpsState()?(this.view.enablePopUps(),this.model.updateThumbsState(this.model.getThumbsPositions())):this.view.disablePopUps()}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("slider")}append(e){this.control.append(e)}setMargins(e){this.control.style.marginLeft=e.left+"px",this.control.style.marginTop=e.top+"px",this.control.style.marginRight=e.right+"px",this.control.style.marginBottom=e.bottom+"px"}resetMargins(){this.control.style.margin="0"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("track"),this.init()}init(){this.handleTrackClick=this.handleTrackClick.bind(this),this.control.addEventListener("click",this.handleTrackClick)}handleTrackClick(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("clickToTrack")}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("thumb",e),this.shift={shiftX:0,shiftY:0},this.handleDocumentPointermove=this.drag.bind(this),this.handleDocumentPointerup=this.endDrag.bind(this),this.init()}init(){this.handleThumbPointerdown=this.handleThumbPointerdown.bind(this),this.control.addEventListener("pointerdown",this.handleThumbPointerdown),this.disableDragAndDrop()}setZIndex(e){this.control.style.zIndex=e.toString()}disableDragAndDrop(){this.control.ondragstart=()=>!1}handleThumbPointerdown(e){l.disableSelection();const t=this.control.getBoundingClientRect();this.setThumbShift({left:e.clientX,top:e.clientY},{left:t.left,top:t.top}),document.addEventListener("pointermove",this.handleDocumentPointermove),document.addEventListener("pointerup",this.handleDocumentPointerup),this.subject.notify("thumbIsCatched"),this.increaseZIndex()}setThumbShift(e,t){this.shift.shiftX=e.left-t.left,this.shift.shiftY=e.top-t.top}increaseZIndex(){const e=this.getStyle("z-index");this.control.style.zIndex=(parseInt(e||"0",10)+1).toString()}resetZIndex(){this.control.style.zIndex=""}drag(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("thumbIsDragged")}setPosition(e){super.setPosition(e),this.lastPosition.left-=this.shift.shiftX,this.lastPosition.top-=this.shift.shiftY}endDrag(){l.enableSelection(),document.removeEventListener("pointermove",this.handleDocumentPointermove),document.removeEventListener("pointerup",this.handleDocumentPointerup)}moveTo(e){this.lastPosition=e,this.control.style.left=e.left+"px",this.control.style.top=e.top+"px"}static disableSelection(){document.onselectstart=()=>!1,document.onpointerdown=()=>!1}static enableSelection(){document.onselectstart=null,document.onpointerdown=null}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("pop-up",e)}update(e){this.updateValue(e.value),this.updatePosition(e.position)}updateValue(e){this.control.innerHTML=""+e}updatePosition(e){this.control.style.left=e.left+"px",this.control.style.top=e.top+"px"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("progress-bar")}update(e){this.control.style.left=e.position.left+"px",this.control.style.top=e.position.top+"px",this.control.style.width=e.size.width+"px",this.control.style.height=e.size.height+"px"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("scale",e),this.init()}init(){this.handleScaleClick=this.handleScaleClick.bind(this),this.control.addEventListener("click",this.handleScaleClick)}handleScaleClick(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("clickToScale")}getPointSize(e){this.addPoint({position:{left:0,top:0},size:{width:0,height:0},value:e});const t={width:0,height:0},s=this.control.querySelector(".scale__point");return t.width=(null==s?void 0:s.offsetWidth)||0,t.height=(null==s?void 0:s.offsetHeight)||0,null==s||s.remove(),t}addPoints(e){e.forEach(e=>this.addPoint(e))}addPoint(e){const t=this.getOrientation(),s=document.createElement("div");s.classList.add("scale__point","scale__point_"+t),e.size.width>0&&(s.style.width=e.size.width+"px"),"horizontal"===t?this.control.style.height=e.size.height+"px":this.control.style.width=e.size.width+"px";const i=document.createElement("div");i.classList.add("scale__point-marker");const o=document.createElement("div");o.classList.add("scale__point-label","scale__point-label_"+t),o.innerText=e.value.toString(),s.style.left=e.position.left+"px",s.style.top=e.position.top+"px",s.append(i),s.append(o),this.control.append(s)}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(14));s(22);const l=s(53);l.keys().forEach(e=>{const t=e.split("/");t.includes("__mocks__")||t.includes("tests")||l(e)});new o.default},function(e,t,s){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.addNewSliderButton=null,this.helpImage=null,this.buttonWrapper=null,this.init(),this.addEventListeners()}init(){this.addNewSliderButton=document.querySelector(".add-new-slider-button"),this.helpImage=document.querySelector(".help-image"),this.buttonWrapper=document.querySelector(".button-wrapper")}addEventListeners(){var e;this.handleAddNewSliderButtonClick=this.handleAddNewSliderButtonClick.bind(this),null===(e=this.addNewSliderButton)||void 0===e||e.addEventListener("click",this.handleAddNewSliderButtonClick)}handleRemoveSliderButtonClick(e){var t;e.remove(),0===document.querySelectorAll(".slider-wrapper").length&&(null===(t=this.addNewSliderButton)||void 0===t||t.classList.add("add-new-slider-button_margin-top"))}handleAddNewSliderButtonClick(){var t,s;if(null===this.buttonWrapper)return;null===(t=this.helpImage)||void 0===t||t.remove(),this.helpImage=null,null===(s=this.addNewSliderButton)||void 0===s||s.classList.remove("add-new-slider-button_margin-top");const i=document.createElement("div");i.classList.add("slider-wrapper"),this.buttonWrapper.before(i);const o=document.createElement("span");o.classList.add("material-icons","remove-slider-button__icon"),o.innerText="clear";const l=document.createElement("button");l.classList.add("remove-slider-button"),l.append(o),l.addEventListener("click",this.handleRemoveSliderButtonClick.bind(l,i)),i.append(l),e(i).simpleSlider().controlPanel()}}}).call(this,s(5))},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(16)),l=i(s(55)),n=i(s(17)),a=i(s(18)),r=i(s(19)),h=i(s(2));class c extends h.default{constructor(e){super(),this.controlPanel=new o.default,this.sliderWrapper=e,this.thumbOneValue=new l.default("First thumb value"),this.thumbTwoValue=new l.default("Second thumb value"),this.min=new l.default("min value"),this.max=new l.default("max value"),this.step=new l.default("step"),this.typeRadio=new a.default("type",{label:"single",value:"single"},{label:"range",value:"range"}),this.orientationRadio=new a.default("orientation",{label:"horizontal",value:"horizontal"},{label:"vertical",value:"vertical"}),this.scaleCheckbox=new r.default({label:"scale",name:"scale",value:"scale"}),this.popUpsCheckbox=new r.default({label:"pop ups",name:"popUps",value:"popUps"}),this.subscribeToEvents(),this.createPanel()}createPanel(){this.controlPanel.append(n.default({wrapperClass:"control-panel__text-fields-group",elements:[this.thumbOneValue.getControl(),this.thumbTwoValue.getControl()]})),this.controlPanel.append(n.default({wrapperClass:"control-panel__text-fields-group",elements:[this.min.getControl(),this.max.getControl(),this.step.getControl()]}));const e=n.default({header:"type",wrapperClass:"control-panel__radio-group",elements:[this.typeRadio.getControl()]}),t=n.default({header:"orientation",wrapperClass:"control-panel__radio-group",elements:[this.orientationRadio.getControl()]}),s=n.default({wrapperClass:"control-panel__wrapper",elements:[e,t]}),i=n.default({header:"on/off elements",wrapperClass:"control-panel__wrapper",elements:[this.scaleCheckbox.getControl(),this.popUpsCheckbox.getControl()]});this.controlPanel.append(n.default({wrapperClass:"control-panel__checkboxes-and-radios-wrapper",elements:[s,i]})),this.sliderWrapper.append(this.controlPanel.getElement())}subscribeToEvents(){this.thumbOneValue.register("controlPanelDataUpdated",this),this.thumbTwoValue.register("controlPanelDataUpdated",this),this.min.register("controlPanelDataUpdated",this),this.max.register("controlPanelDataUpdated",this),this.step.register("controlPanelDataUpdated",this),this.typeRadio.register("controlPanelDataUpdated",this),this.orientationRadio.register("controlPanelDataUpdated",this),this.scaleCheckbox.register("controlPanelDataUpdated",this),this.popUpsCheckbox.register("controlPanelDataUpdated",this)}update(e){"controlPanelDataUpdated"===e&&(this.notify("controlPanelDataUpdated"),this.switchOrientation())}switchOrientation(){"horizontal"===this.getOrientation()?(this.controlPanel.switchToHorizontal(),this.sliderWrapper.classList.remove("slider-wrapper_vertical"),this.sliderWrapper.classList.add("slider-wrapper_horizontal")):(this.controlPanel.switchToVertical(),this.sliderWrapper.classList.remove("slider-wrapper_horizontal"),this.sliderWrapper.classList.add("slider-wrapper_vertical"))}setThumbsValues(e){this.thumbOneValue.setValue(e.thumbOne),this.thumbTwoValue.setValue(e.thumbTwo)}setMinValue(e){this.min.setValue(e)}setMaxValue(e){this.max.setValue(e)}setStep(e){this.step.setValue(e)}setScaleState(e){this.scaleCheckbox.setState(e)}setPopUpsState(e){this.popUpsCheckbox.setState(e)}setTypeRadio(e){this.typeRadio.switchTo(e)}setOrientationRadio(e){this.orientationRadio.switchTo(e)}getOrientation(){return this.orientationRadio.getValue()}getType(){return this.typeRadio.getValue()}getScaleState(){return this.scaleCheckbox.getState()}getPopUpsState(){return this.popUpsCheckbox.getState()}getMin(){return this.min.getValue()}getMax(){return this.max.getValue()}getStep(){return this.step.getValue()}getThumbOneValue(){return this.thumbOneValue.getValue()}getThumbTwoValue(){return this.thumbTwoValue.getValue()}getThumbsValues(){return{thumbOne:this.thumbOneValue.getValue(),thumbTwo:this.thumbTwoValue.getValue()}}}t.default=c},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.element=document.createElement("div"),this.element.classList.add("control-panel")}getElement(){return this.element}append(e){this.element.append(e)}switchToHorizontal(){this.element.classList.remove("control-panel_vertical"),this.element.classList.add("control-panel_horizontal")}switchToVertical(){this.element.classList.remove("control-panel_horizontal"),this.element.classList.add("control-panel_vertical")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=document.createElement("div");if(t.className=e.wrapperClass,void 0!==e.header){const s=document.createElement("label");s.classList.add("control-panel__group-title"),s.innerText=e.header,t.append(s)}return e.elements.forEach(e=>{t.append(e)}),t}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e,...t){super();const s=l.generateName(e);this.control=document.createElement("div"),this.control.classList.add("radio-button"),this.radios=[],this.init(s,t)}getControl(){return this.control}getValue(){let e="";return this.radios.forEach(t=>{t.checked&&(e=t.value)}),e}init(e,t){t.forEach(s=>{const i=document.createElement("div");i.classList.add("radio-button__radio-wrapper");const o=document.createElement("label");o.classList.add("radio-button__label"),o.innerText=s.label;const l=document.createElement("input");l.type="radio",l.name=e,l.value=s.value,(t[0]===s||s.checked)&&(l.checked=!0),l.classList.add("radio-button__radio-button"),this.handleRadioButtonChange=this.handleRadioButtonChange.bind(this),l.addEventListener("change",this.handleRadioButtonChange),this.radios.push(l),o.append(l),i.append(o),this.control.append(i)})}handleRadioButtonChange(){this.radios.forEach(e=>{const t=e.parentElement;e.checked?null==t||t.classList.add("radio-button__label_checked"):null==t||t.classList.remove("radio-button__label_checked")}),this.notify("controlPanelDataUpdated")}switchTo(e){this.radios.forEach(t=>{t.value===e&&(t.checked=!0,this.handleRadioButtonChange())})}static generateName(e){let t=1,s="";for(;""===s;){const i=`${e}${t}`;null===document.querySelector(`[name="${i}"]`)&&(s=i),t+=1}return s}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.control=document.createElement("div"),this.label=document.createElement("label"),this.checkbox=document.createElement("input"),this.init(e)}init(e){this.control.classList.add("checkbox"),this.label.classList.add("checkbox__label"),this.label.innerText=e.label,this.checkbox.type="checkbox",this.checkbox.name=e.name,this.checkbox.value=e.value,this.checkbox.classList.add("checkbox__check"),this.handleCheckboxChange=this.handleCheckboxChange.bind(this),this.checkbox.addEventListener("change",this.handleCheckboxChange),this.label.append(this.checkbox),this.control.append(this.label)}getControl(){return this.control}handleCheckboxChange(){this.label.classList.toggle("checkbox__label_checked"),this.notify("controlPanelDataUpdated")}setState(e){this.checkbox.checked=e,this.handleCheckboxChange()}getState(){return this.checkbox.checked}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.events={thumbsPositionsIsUpdated:()=>this.notify("thumbsPositionsIsUpdated"),minIsUpdated:()=>this.notify("minIsUpdated"),maxIsUpdated:()=>this.notify("maxIsUpdated"),stepIsUpdated:()=>this.notify("stepIsUpdated")},this.slider=e,this.subject=e.simpleSlider("getModelSubject"),this.subject.register("thumbsPositionsIsUpdated",this),this.subject.register("minIsUpdated",this),this.subject.register("maxIsUpdated",this),this.subject.register("stepIsUpdated",this)}update(e){e in this.events&&this.events[e]()}getThumbsValues(){return this.slider.simpleSlider("getThumbsValues")}getMin(){return this.slider.simpleSlider("getMin")}getMax(){return this.slider.simpleSlider("getMax")}getStep(){return this.slider.simpleSlider("getStep")}getScaleState(){return this.slider.simpleSlider("getScaleState")}getPopUpsState(){return this.slider.simpleSlider("getPopUpsState")}getType(){return this.slider.simpleSlider("getType")}getOrientation(){return this.slider.simpleSlider("getOrientation")}refreshSliderState(e){this.slider.simpleSlider("refreshSliderState",e)}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.events={thumbsPositionsIsUpdated:()=>{this.view.setThumbsValues(this.model.getThumbsValues())},minIsUpdated:()=>this.view.setMinValue(this.model.getMin()),maxIsUpdated:()=>this.view.setMaxValue(this.model.getMax()),stepIsUpdated:()=>this.view.setStep(this.model.getStep()),controlPanelDataUpdated:()=>{const e={orientation:this.view.getOrientation(),type:this.view.getType(),scale:this.view.getScaleState(),popUps:this.view.getPopUpsState(),min:this.view.getMin(),max:this.view.getMax(),step:this.view.getStep(),thumbOneValue:this.view.getThumbOneValue(),thumbTwoValue:this.view.getThumbTwoValue()};this.model.refreshSliderState(e)}},this.view=e,this.model=t,this.init(),this.subscribeToEvents()}subscribeToEvents(){this.model.register("thumbsPositionsIsUpdated",this),this.model.register("minIsUpdated",this),this.model.register("maxIsUpdated",this),this.model.register("stepIsUpdated",this),this.view.register("controlPanelDataUpdated",this)}init(){this.view.setThumbsValues(this.model.getThumbsValues()),this.view.setMinValue(this.model.getMin()),this.view.setMaxValue(this.model.getMax()),this.view.setStep(this.model.getStep()),this.view.setScaleState(this.model.getScaleState()),this.view.setPopUpsState(this.model.getPopUpsState()),this.view.setTypeRadio(this.model.getType()),this.view.setOrientationRadio(this.model.getOrientation())}update(e){e in this.events&&this.events[e]()}}},function(e,t,s){var i={"./demo/scss/normalize.scss":23,"./demo/scss/style.scss":25,"./fonts/fonts.scss":27,"./plugins/control-panel/view/checkbox/_animations.scss":29,"./plugins/control-panel/view/checkbox/checkbox.scss":31,"./plugins/control-panel/view/control-panel/control-panel.scss":33,"./plugins/control-panel/view/radio-button/_animations.scss":35,"./plugins/control-panel/view/radio-button/radio-button.scss":37,"./plugins/control-panel/view/text-field/text-field.scss":39,"./plugins/simple-slider/view/pop-up/pop-up.scss":41,"./plugins/simple-slider/view/progress-bar/progress-bar.scss":43,"./plugins/simple-slider/view/scale/scale.scss":45,"./plugins/simple-slider/view/slider/slider.scss":47,"./plugins/simple-slider/view/thumb/thumb.scss":49,"./plugins/simple-slider/view/track/track.scss":51};function o(e){var t=l(e);return s(t)}function l(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=l,e.exports=o,o.id=22},function(e,t,s){var i=s(0),o=s(24);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(26);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(28);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(30);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(32);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(34);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(36);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(38);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(40);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(42);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(44);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(46);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(48);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(50);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(52);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i={"./demo/demo.ts":14,"./index.ts":13,"./plugins/control-panel/control-panel.ts":54,"./plugins/control-panel/controller/control-panel-controller.ts":21,"./plugins/control-panel/interfaces.ts":56,"./plugins/control-panel/model/control-panel-model.ts":20,"./plugins/control-panel/view/checkbox/checkbox.ts":19,"./plugins/control-panel/view/control-panel-view.ts":15,"./plugins/control-panel/view/control-panel/control-panel.ts":16,"./plugins/control-panel/view/group-elements.ts":17,"./plugins/control-panel/view/radio-button/radio-button.ts":18,"./plugins/simple-slider/controller/simple-slider-controller.ts":6,"./plugins/simple-slider/interfaces.ts":57,"./plugins/simple-slider/model/__mocks__/simple-slider-model.ts":58,"./plugins/simple-slider/model/simple-slider-model.ts":3,"./plugins/simple-slider/simple-slider.ts":59,"./plugins/simple-slider/subject/subject.ts":2,"./plugins/simple-slider/view/__mocks__/simple-slider-view.ts":60,"./plugins/simple-slider/view/pop-up/__mocks__/pop-up.ts":61,"./plugins/simple-slider/view/pop-up/pop-up.ts":10,"./plugins/simple-slider/view/progress-bar/__mocks__/progress-bar.ts":62,"./plugins/simple-slider/view/progress-bar/progress-bar.ts":11,"./plugins/simple-slider/view/scale/__mocks__/scale.ts":63,"./plugins/simple-slider/view/scale/scale.ts":12,"./plugins/simple-slider/view/simple-slider-view.ts":4,"./plugins/simple-slider/view/slider/__mocks__/slider.ts":64,"./plugins/simple-slider/view/slider/slider.ts":7,"./plugins/simple-slider/view/thumb/__mocks__/thumb.ts":65,"./plugins/simple-slider/view/thumb/thumb.ts":9,"./plugins/simple-slider/view/track/__mocks__/track.ts":66,"./plugins/simple-slider/view/track/track.ts":8,"./plugins/simple-slider/view/ui-control/__mocks__/ui-control.ts":67,"./plugins/simple-slider/view/ui-control/ui-control.ts":1,"./tests/pop-up.test.ts":68,"./tests/progress-bar.test.ts":69,"./tests/scale.test.ts":70,"./tests/simple-slider-controller.test.ts":71,"./tests/simple-slider-model.test.ts":72,"./tests/simple-slider-view.test.ts":73,"./tests/slider.test.ts":74,"./tests/subject.test.ts":75,"./tests/thumb.test.ts":76,"./tests/track.test.ts":77,"./tests/ui-control.test.ts":78};function o(e){var t=l(e);return s(t)}function l(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=l,e.exports=o,o.id=53},function(e,t,s){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(15)),l=i(s(20)),n=i(s(21));(e=>{const t={init(){return this.each((function(){const t=new o.default(this),s=new l.default(e(this));new n.default(t,s)}))}};e.fn.controlPanel=function(s,i){let o;return"string"==typeof s&&t[s]?o=t[s].call(this,i):"object"!=typeof s&&s?(e.error(`Метод с именем ${s} не существует для jQuery.controlPanel`),o=this):o=t.init.call(this,i),o}})(e)}).call(this,s(5))},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.control=document.createElement("div"),this.field=document.createElement("input"),this.label=document.createElement("label"),this.init(e)}getControl(){return this.control}getValue(){return parseInt(this.field.value,10)}setValue(e){this.field.value=""+e}init(e){this.control.classList.add("text-field"),this.field.type="number",this.field.classList.add("text-field__input"),this.handleTextFieldBlur=this.handleTextFieldBlur.bind(this),this.field.addEventListener("blur",this.handleTextFieldBlur),this.field.onkeypress=l.removeNonDigitChar,this.label.classList.add("text-field__label"),this.label.innerText=e,this.label.append(this.field),this.control.append(this.label)}handleTextFieldBlur(){this.notify("controlPanelDataUpdated")}static removeNonDigitChar(e){return/[-\d]/.test(e.key)}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.scalePointSize={width:0,height:0},this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0},this.orientation=e.orientation,this.type=e.type,this.scale=e.scale,this.popUps=e.popUps,this.min=e.min,this.max=e.max,this.step=e.step}setSliderSize(){return this.TEST_OK}setThumbSize(){return this.TEST_OK}setThumbPositionOnClickPosition(){return this.TEST_OK}getOrientation(){return this.orientation}getType(){return this.type}getPopUpsState(){return this.popUps}getThumbsPositions(){return this.TEST_OK}getPopUpsParams(){return this.TEST_OK}getProgressBarParams(){return this.TEST_OK}updateThumbsState(){return this.TEST_OK}getScaleState(){return this.scale}getMin(){return this.min}getMax(){return this.max}getStep(){return this.step}getScalePoints(){return this.TEST_OK}setScalePointSize(e){this.scalePointSize=e}recalculateStep(){return this.TEST_OK}}},function(e,t,s){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(3)),l=i(s(6)),n=i(s(4));(e=>{const t={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},s={init(s){const i=e.extend(t,s);return this.each((function(){const t=new o.default(i),s=new n.default(this),a=new l.default({model:t,view:s});e(this).data("settings",i),e(this).data("controller",a),e(this).data("model",t)}))},getModelSubject(){return e(this).data().model.subject},getThumbsValues(){return e(this).data().model.getThumbsValues()},getMin(){return e(this).data().model.getMin()},getMax(){return e(this).data().model.getMax()},getStep(){return e(this).data().model.getStep()},getScaleState(){return e(this).data().model.getScaleState()},getPopUpsState(){return e(this).data().model.getPopUpsState()},getType(){return e(this).data().model.getType()},getOrientation(){return e(this).data().model.getOrientation()},refreshSliderState(t){e(this).data().model.refreshSliderState(t)}};e.fn.simpleSlider=function(t,i){let o;return"string"==typeof t&&s[t]?o=s[t].call(this,i):"object"!=typeof t&&t?(e.error(`Метод с именем ${t} не существует для jQuery.simpleSlider`),o=this):o=s.init.call(this,t),o}})(e)}).call(this,s(5))},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.scalePointSize={width:10,height:10},this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0},this.wrapper=e}getSliderSize(){return this.TEST_OK}getThumbSize(){return this.TEST_OK}getThumbsPositions(){return this.TEST_OK}getTrackClickPosition(){return this.TEST_OK}getScaleClickPosition(){return this.TEST_OK}switchToHorizontal(){return this.TEST_OK}switchToVertical(){return this.TEST_OK}switchToSingle(){return this.TEST_OK}switchToRange(){return this.TEST_OK}enablePopUps(){return this.TEST_OK}disablePopUps(){return this.TEST_OK}enableScale(){return this.TEST_OK}disableScale(){return this.TEST_OK}getScalePointSize(){return this.scalePointSize}addScalePoints(){return this.TEST_OK}updateThumbs(){return this.TEST_OK}updatePopUps(){return this.TEST_OK}updateProgressBar(){return this.TEST_OK}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__pop-up"),this.TEST_OK=!0}update(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__progress-bar"),this.TEST_OK=!0}update(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__scale"),this.TEST_OK=!0}getPointSize(){return this.TEST_OK}addPoints(e){for(let t=0;t<e.length;t+=1){const e=document.createElement("div");e.classList.add("scale-point"),this.control.append(e)}}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider"),this.TEST_OK=!0}append(e){this.control.append(e)}resetMargins(){return this.TEST_OK}setMargins(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__thumb"),this.TEST_OK=!0}resetZIndex(){return this.TEST_OK}moveTo(){return this.TEST_OK}register(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__track")}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0};const t=document.createElement("div");this.control=t,this.mainClass=e,this.control.classList.add(""+e)}getPosition(){return this.TEST_OK}getControl(){return this.control}getSize(){return this.TEST_OK}switchToHorizontal(){this.control.classList.remove(this.mainClass+"_vertical"),this.control.classList.add(this.mainClass+"_horizontal")}switchToVertical(){this.control.classList.remove(this.mainClass+"_horizontal"),this.control.classList.add(this.mainClass+"_vertical")}remove(){this.control.remove()}getOrientation(){return this.TEST_OK}getRect(){return this.TEST_OK}getStyle(){return this.TEST_OK}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(10));let l;beforeEach(()=>{l=new o.default}),describe("Update",()=>{test("Popup value should be 50",()=>{l.update({value:50,position:{left:30,top:50}}),expect(l.getControl().innerHTML).toBe("50")}),test("Popup value should be 120",()=>{l.update({value:120,position:{left:30,top:50}}),expect(l.getControl().innerHTML).toBe("120")}),test("Popup position should be { left: 30, top: 50 }",()=>{l.update({value:50,position:{left:30,top:50}}),expect(l.getControl().style.left).toBe("30px"),expect(l.getControl().style.top).toBe("50px")}),test("Popup position should be { left: 90, top: 14 }",()=>{l.update({value:50,position:{left:90,top:14}}),expect(l.getControl().style.left).toBe("90px"),expect(l.getControl().style.top).toBe("14px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(11));let l;beforeEach(()=>{l=new o.default}),describe("Update",()=>{test("progressBar left should be 10px",()=>{null==l||l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(null==l?void 0:l.getControl().style.left).toBe("10px")}),test("progressBar top should be 5px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getControl().style.top).toBe("5px")}),test("progressBar width should be 50px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getControl().style.width).toBe("50px")}),test("progressBar height should be 30px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getControl().style.height).toBe("30px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(12));let l;const n=e=>{e.initMouseEvent("click",!0,!0,window,0,50,80,50,80,!1,!1,!1,!1,0,null)};beforeEach(()=>{l=new o.default}),describe("Click on scale",()=>{test("SetPosition method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l,"setPosition");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l.subject,"notify");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Scale position should be {left: 50, top: 80}",()=>{const e=document.createEvent("MouseEvent");n(e),l.control.dispatchEvent(e),expect(l.getPosition().left).toBe(50),expect(l.getPosition().top).toBe(80)})}),describe("Add points",()=>{test("The number of added points should be 3",()=>{l.addPoints([{position:{left:50,top:100},size:{width:400,height:20},value:10},{position:{left:50,top:100},size:{width:400,height:20},value:10},{position:{left:50,top:100},size:{width:400,height:20},value:10}]),expect(l.control.querySelectorAll(".scale__point").length).toBe(3)}),test("Scale point size should be {left: 50px, top: 100px}",()=>{l.addPoints([{position:{left:50,top:100},size:{width:400,height:20},value:10}]);const e=l.control.querySelector(".scale__point");expect(null==e?void 0:e.style.left).toBe("50px"),expect(null==e?void 0:e.style.top).toBe("100px")}),test("Scale width should be 30px",()=>{l=new o.default("vertical");l.addPoints([{position:{left:50,top:100},size:{width:30,height:20},value:10}]),expect(l.control.style.width).toBe("30px")}),test("Scale should contain an element with the scale__point-label class",()=>{l.addPoints([{position:{left:50,top:100},size:{width:0,height:0},value:10}]),expect(l.control.querySelector(".scale__point-label")).not.toBe(null)}),test("Scale should contain an element with the scale__point-marker class",()=>{l.addPoints([{position:{left:50,top:100},size:{width:0,height:0},value:10}]),expect(l.control.querySelector(".scale__point-marker")).not.toBe(null)})}),describe("Get point size",()=>{test("Scale point size should be {width: 0, height: 0}",()=>{expect(l.getPointSize(10).width).toBe(0),expect(l.getPointSize(10).height).toBe(0)}),test("Scale point size should be {width: 0, height: 0}",()=>{l.remove(),expect(l.getPointSize(10).width).toBe(0),expect(l.getPointSize(10).height).toBe(0)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(6)),l=i(s(3)),n=i(s(4));let a,r,h,c,u;jest.mock("../plugins/simple-slider/model/simple-slider-model"),jest.mock("../plugins/simple-slider/view/simple-slider-view"),beforeEach(()=>{u={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},c=document.createElement("div"),h=new n.default(c),r=new l.default(u),a=new o.default({model:r,view:h})}),describe("Init method",()=>{test("The setSliderSize method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setSliderSize");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The setThumbSize method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbSize");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToHorizontal method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToHorizontal");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToVertical method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToVertical");u.orientation="vertical",r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToSingle method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToSingle");u.type="single",r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToRange method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToRange");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The enablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enablePopUps");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The disablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"disablePopUps");u.popUps=!1,r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)})}),describe("Update method",()=>{test("The updateThumbsState method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("thumbIsDragged"),expect(e).toBeCalledTimes(1)}),test("The setThumbPositionOnClickPosition method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbPositionOnClickPosition");a.update("clickToTrack"),expect(e).toBeCalledTimes(1)}),test("The setThumbPositionOnClickPosition method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbPositionOnClickPosition");a.update("clickToScale"),expect(e).toBeCalledTimes(1)}),test("The init method from the SimpleSliderController class should be called once",()=>{const e=spyOn(a,"init");a.update("windowResized"),expect(e).toBeCalledTimes(1)}),test("Other methods should not be called",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("emptyEvent"),expect(e).toBeCalledTimes(0);const t=jest.spyOn(r,"setThumbPositionOnClickPosition");a.update("emptyEvent"),expect(t).toBeCalledTimes(0);const s=spyOn(a,"updateThumbsPositions");a.update("emptyEvent"),expect(s).toBeCalledTimes(0);const i=spyOn(a,"updateView");a.update("emptyEvent"),expect(i).toBeCalledTimes(0);const o=spyOn(a,"updateSliderOrientation");a.update("emptyEvent"),expect(o).toBeCalledTimes(0);const l=spyOn(a,"updateSliderType");a.update("emptyEvent"),expect(l).toBeCalledTimes(0);const n=spyOn(a,"updateScaleState");a.update("emptyEvent"),expect(n).toBeCalledTimes(0);const h=spyOn(a,"updatePopUpsState");a.update("emptyEvent"),expect(h).toBeCalledTimes(0)})}),describe("Update view method",()=>{test("The updateThumbsState method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("minIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The enableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enableScale");a.update("maxIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The addScalePoints method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"addScalePoints");a.update("stepIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The disableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"disableScale");u.scale=!1,r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)})}),describe("Update thumbs pos",()=>{test("The updateThumbs method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updateThumbs");a.update("thumbsPositionsIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The updatePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updatePopUps");a.update("thumbsPositionsIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The updateProgressBar method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updateProgressBar");a.update("thumbsPositionsIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update slider orientation",()=>{test("The switchToHorizontal method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToHorizontal");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The switchToVertical method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"switchToVertical");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToHorizontal method from the SimpleSliderView class should not be called",()=>{r.orientation="vertical";const e=jest.spyOn(h,"switchToHorizontal");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToVertical method from the SimpleSliderView class should be called once",()=>{r.orientation="vertical";const e=jest.spyOn(h,"switchToVertical");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update slider type",()=>{test("The switchToRange method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToRange");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The switchToSingle method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"switchToSingle");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToRange method from the SimpleSliderView class should not be called",()=>{r.type="single";const e=jest.spyOn(h,"switchToRange");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToSingle method from the SimpleSliderView class should be called once",()=>{r.type="single";const e=jest.spyOn(h,"switchToSingle");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update scale state",()=>{test("The enableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(2)}),test("The disableScale method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"disableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The enableScale method from the SimpleSliderView class should not be called",()=>{r.scale=!1;const e=jest.spyOn(h,"enableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The disableScale method from the SimpleSliderView class should be called once",()=>{r.scale=!1;const e=jest.spyOn(h,"disableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update pop ups sate",()=>{test("The enablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The disablePopUps method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"disablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The enablePopUps method from the SimpleSliderView class should not be called",()=>{r.popUps=!1;const e=jest.spyOn(h,"enablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The disablePopUps method from the SimpleSliderView class should be called once",()=>{r.popUps=!1;const e=jest.spyOn(h,"disablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(1)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(3));let l,n;beforeEach(()=>{l={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},n=new o.default(l),n.refreshSliderState(l)}),describe("Refresh slider state",()=>{test("SliderSize should be {width: 500, height: 10}",()=>{delete l.sliderSize,n.refreshSliderState(l),expect(n.sliderSize.width).toBe(500),expect(n.sliderSize.height).toBe(10)}),test("ThumbSize should be {width: 20, height: 20}",()=>{delete l.thumbSize,n.refreshSliderState(l),expect(n.thumbSize.width).toBe(20),expect(n.thumbSize.height).toBe(20)}),test("Orientation should be vertical",()=>{l.orientation="vertical",n.refreshSliderState(l),expect(n.orientation).toBe("vertical")}),test("Type should be single",()=>{l.type="single",n.refreshSliderState(l),expect(n.type).toBe("single")}),test("ThumbTwoValue should be not equal thumbValueOne",()=>{l.type="single",l.thumbOneValue=9,n.refreshSliderState(l),l.type="range",l.thumbOneValue=10,n.refreshSliderState(l),expect(n.thumbOneValue!==n.thumbTwoValue).toBe(!0)}),test("Scale should be false",()=>{l.scale=!1,n.refreshSliderState(l),expect(n.scale).toBe(!1)}),test("PopUps should be false",()=>{l.popUps=!1,n.refreshSliderState(l),expect(n.popUps).toBe(!1)}),test("Min should be 7",()=>{l.min=7,n.refreshSliderState(l),expect(n.min).toBe(7)}),test("Min should be 10",()=>{l.min=50,n.refreshSliderState(l),expect(n.min).toBe(0)}),test("Max should be 40",()=>{l.max=40,n.refreshSliderState(l),expect(n.max).toBe(40)}),test("Max should be 10",()=>{l.max=-50,n.refreshSliderState(l),expect(n.max).toBe(10)}),test("Step should be 8",()=>{l.step=8,n.refreshSliderState(l),expect(n.step).toBe(8)}),test("Step should be 1",()=>{l.step=0,n.refreshSliderState(l),expect(n.step).toBe(1)}),test("ThumbOneValue should be 6",()=>{l.thumbOneValue=6,n.refreshSliderState(l),expect(n.thumbOneValue).toBe(6)}),test("ThumbTwoValue should be 10",()=>{l.thumbTwoValue=10,n.refreshSliderState(l),expect(n.thumbTwoValue).toBe(10)}),test("SliderSize widh should be 300 and height 50",()=>{l.sliderSize={width:300,height:50},n.refreshSliderState(l),expect(n.sliderSize.width).toBe(300),expect(n.sliderSize.height).toBe(50)}),test("ThumbSize widh should be 750 and height 35",()=>{l.thumbSize={width:750,height:35},n.refreshSliderState(l),expect(n.thumbSize.width).toBe(750),expect(n.thumbSize.height).toBe(35)})}),describe("Update thumbs state",()=>{test("Should be thumbOne: 5 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:250,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(5),expect(n.thumbTwoValue).toBe(9)}),test("Should be thumbOne: 5 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:450,top:0},thumbTwo:{left:250,top:0}}),expect(n.thumbOneValue).toBe(5),expect(n.thumbTwoValue).toBe(9)}),test("Should be thumbOne: 0 and thumbTwo: 7",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);n.updateThumbsState({thumbOne:{left:250,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(7)}),test("Should be thumbOne: 0 and thumbTwo: 0",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);n.updateThumbsState({thumbOne:{left:0,top:100},thumbTwo:{left:0,top:400}}),expect(n.thumbOneValue).toBe(2),expect(n.thumbTwoValue).toBe(8)}),test("Should be thumbOne: 0 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:-45,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(9)})}),describe("Set slider size",()=>{test("Should be {width: 80, height: 15}",()=>{n.setSliderSize({width:80,height:15}),expect(n.sliderSize.width).toBe(80),expect(n.sliderSize.height).toBe(15)}),test("Should be {width: 0, height: 15}",()=>{n.setSliderSize({width:-80,height:15}),expect(n.sliderSize.width).toBe(0),expect(n.sliderSize.height).toBe(15)}),test("Should be {width: 80, height: 0}",()=>{n.setSliderSize({width:80,height:0}),expect(n.sliderSize.width).toBe(80),expect(n.sliderSize.height).toBe(0)}),test("Should be {width: 500, height: 0}",()=>{n.setSliderSize({width:500,height:-20}),expect(n.sliderSize.width).toBe(500),expect(n.sliderSize.height).toBe(0)})}),describe("Set thumb size",()=>{test("Should be {width: 80, height: 15}",()=>{n.setThumbSize({width:80,height:15}),expect(n.thumbSize.width).toBe(80),expect(n.thumbSize.height).toBe(15)}),test("Should be {width: 0, height: 15}",()=>{n.setThumbSize({width:-80,height:15}),expect(n.thumbSize.width).toBe(0),expect(n.thumbSize.height).toBe(15)}),test("Should be {width: 80, height: 0}",()=>{n.setThumbSize({width:80,height:0}),expect(n.thumbSize.width).toBe(80),expect(n.thumbSize.height).toBe(0)})}),describe("Set thumb values",()=>{test("Should be {thumbOne: 1, thumbTwo: 8}",()=>{n.setThumbsValues({thumbOne:1,thumbTwo:8}),expect(n.thumbOneValue).toBe(1),expect(n.thumbTwoValue).toBe(8)}),test("Should be {thumbOne: 0, thumbTwo: 10}",()=>{n.setThumbsValues({thumbOne:-5,thumbTwo:15}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(10)}),test("Should be {thumbOne: 7, thumbTwo: 9}",()=>{n.setThumbsValues({thumbOne:9,thumbTwo:7}),expect(n.thumbOneValue).toBe(7),expect(n.thumbTwoValue).toBe(9)}),test("Should be {thumbOne: 1, thumbTwo: 3}",()=>{n.setThumbsValues({thumbOne:3,thumbTwo:1}),expect(n.thumbOneValue).toBe(1),expect(n.thumbTwoValue).toBe(3)})}),describe("Get min",()=>{test("Should be 0",()=>{expect(n.getMin()).toBe(0)}),test("Should be 2",()=>{l.min=2,n=new o.default(l),expect(n.getMin()).toBe(2)})}),describe("Get max",()=>{test("Should be 10",()=>{expect(n.getMax()).toBe(10)}),test("Should be 5",()=>{l.max=5,n=new o.default(l),expect(n.getMax()).toBe(5)})}),describe("Get step",()=>{test("Should be 1",()=>{expect(n.getStep()).toBe(1)}),test("Should be 2",()=>{l.step=2,n=new o.default(l),expect(n.getStep()).toBe(2)})}),describe("Get scale state",()=>{test("Should be true",()=>{expect(n.getScaleState()).toBe(!0)}),test("Should be false",()=>{l.scale=!1,n=new o.default(l),expect(n.getScaleState()).toBe(!1)})}),describe("Get pop-ups state",()=>{test("Should be true",()=>{expect(n.getPopUpsState()).toBe(!0)}),test("Should be false",()=>{l.popUps=!1,n=new o.default(l),expect(n.getPopUpsState()).toBe(!1)})}),describe("Get type",()=>{test("Should be range",()=>{expect(n.getType()).toBe("range")}),test("Should be single",()=>{l.type="single",n=new o.default(l),expect(n.getType()).toBe("single")})}),describe("Get orientation",()=>{test("Should be horizontal",()=>{expect(n.getOrientation()).toBe("horizontal")}),test("Should be vertical",()=>{l.orientation="vertical",n=new o.default(l),expect(n.getOrientation()).toBe("vertical")})}),describe("Get progress bar params",()=>{test("Should be position: {{left: 100, top: 0} and size: {width: 212, height: 10}}",()=>{const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(144,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(212,0),expect(e.size.height).toBeCloseTo(10,0)}),test("Should be position: {{left: 0, top: 100} and size: {width: 10, height: 212}}",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(144,0),expect(e.size.width).toBeCloseTo(10,0),expect(e.size.height).toBeCloseTo(212,0)}),test("Should be position: {{left: 0, top: 0} and size: {width: 164, height: 10}}",()=>{l.type="single",n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(164,0),expect(e.size.height).toBeCloseTo(10,0)}),test("Should be position: {{left: 0, top: 0} and size: {width: 10, height: 239}}",()=>{l.orientation="vertical",l.type="single",l.sliderSize={width:10,height:750},n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(10,0),expect(e.size.height).toBeCloseTo(239,0)})}),describe("Get thumbs positions",()=>{test("Should be thumbOne: {left: 126, top: 0} and thumbTwo: {left: 294, top: 0}",()=>{n.sliderSize={width:440,height:10},n.thumbSize={width:20,height:20};const e=n.getThumbsPositions();expect(e.thumbOne.left).toBeCloseTo(126),expect(e.thumbOne.top).toBe(0),expect(e.thumbTwo).not.toBe(null),null!==e.thumbTwo&&(expect(e.thumbTwo.left).toBeCloseTo(294),expect(e.thumbTwo.top).toBe(0))}),test("Should be thumbOne: {left: 0, top: 0} and thumbTwo: {left: 0, top: 420}",()=>{n.orientation="vertical",n.sliderSize={width:440,height:440},n.thumbSize={width:20,height:20},n.thumbOneValue=-5,n.thumbTwoValue=77;const e=n.getThumbsPositions();expect(e.thumbOne.left).toBe(0),expect(e.thumbOne.top).toBe(0),expect(e.thumbTwo).not.toBe(null),null!==e.thumbTwo&&(expect(e.thumbTwo.left).toBeCloseTo(0),expect(e.thumbTwo.top).toBe(420))})}),describe("Get pop ups params",()=>{test("Should be posOne: {left: 154, top: 0} and posTwo: {left: 346, top: 0}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.position.left).toBeCloseTo(154,0),expect(e.popUpOne.position.top).toBeCloseTo(0,0),expect(e.popUpTwo.position.left).toBeCloseTo(346,0),expect(e.popUpTwo.position.top).toBeCloseTo(0,0)}),test("Should be popUpOne: 3 and popUpTwo: 7}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.value).toBe(3),expect(e.popUpTwo.value).toBe(7)}),test("Should be posOne: {left: 0, top: 154} and posTwo: {left: 0, top: 346}",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);const e=n.getPopUpsParams();expect(e.popUpOne.position.left).toBeCloseTo(0,0),expect(e.popUpOne.position.top).toBeCloseTo(154,0),expect(e.popUpTwo.position.left).toBeCloseTo(0,0),expect(e.popUpTwo.position.top).toBeCloseTo(346,0)}),test("Should be popUpOne: 3 and popUpTwo: 7}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.value).toBe(3),expect(e.popUpTwo.value).toBe(7)})}),describe("Get thumb values",()=>{test("Should be {thumbOne: 3, thumbTwo: 7}",()=>{expect(n.getThumbsValues().thumbOne).toBe(3),expect(n.getThumbsValues().thumbTwo).toBe(7)}),test("Should be {thumbOne: 5, thumbTwo: 9}",()=>{n.setThumbsValues({thumbOne:5,thumbTwo:9}),expect(n.getThumbsValues().thumbOne).toBe(5),expect(n.getThumbsValues().thumbTwo).toBe(9)})}),describe("Get scale points",()=>{test("Length of the scale points array should be 11",()=>{const e=n.getScalePoints();expect(e.length).toBe(11)}),test("The value of the 5th element of the array of scale points should be 5",()=>{const e=n.getScalePoints();expect(e[5].value).toBe(5)}),test("The size of the 5th element of the array of scale points should be {width: 10, height: 10}",()=>{n.setScalePointSize({width:10,height:10});const e=n.getScalePoints();expect(e[5].size.width).toBe(10),expect(e[5].size.height).toBe(10)}),test("The position of the 5th element of the array of scale points should be {left: 0, top: 20}",()=>{n.setScalePointSize({width:10,height:10});const e=n.getScalePoints();expect(e[5].position.left).toBe(245),expect(e[5].position.top).toBe(0)}),test("Length of the scale points array should be 14",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},l.max=13,n.refreshSliderState(l);const e=n.getScalePoints();expect(e.length).toBe(14)}),test("Length of the scale points array should be 45",()=>{n.setScalePointSize({width:10,height:10}),l.max=354,n.refreshSliderState(l);const e=n.getScalePoints();expect(e.length).toBe(45)}),test("Length of the scale points array should be 25",()=>{l.max=354,l.step=15,n.refreshSliderState(l);const e=n.getScalePoints();expect(e.length).toBe(25)})}),describe("Set thumb position on click position",()=>{test("ThumbOne position value should be 3",()=>{n.setThumbPositionOnClickPosition({left:100,top:0}),expect(n.getThumbsValues().thumbOne).toBe(2)}),test("ThumbTwo should be not change position",()=>{n.setThumbPositionOnClickPosition({left:100,top:0}),expect(n.getThumbsValues().thumbTwo).toBe(7)}),test("ThumbOne should be not change position",()=>{n.setThumbPositionOnClickPosition({left:100,top:0}),expect(n.getThumbsValues().thumbOne).toBe(2)}),test("ThumbTwo position value should be 8",()=>{n.setThumbPositionOnClickPosition({left:400,top:0}),expect(n.getThumbsValues().thumbTwo).toBe(8)}),test("ThumbTwo position value should be 8",()=>{l.type="single",n.refreshSliderState(l),n.setThumbPositionOnClickPosition({left:400,top:0}),expect(n.getThumbsValues().thumbOne).toBe(8)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(4));let l,n;jest.mock("../plugins/simple-slider/view/slider/slider"),jest.mock("../plugins/simple-slider/view/track/track"),jest.mock("../plugins/simple-slider/view/thumb/thumb"),jest.mock("../plugins/simple-slider/view/pop-up/pop-up"),jest.mock("../plugins/simple-slider/view/progress-bar/progress-bar"),jest.mock("../plugins/simple-slider/view/scale/scale"),beforeEach(()=>{l=document.createElement("div"),n=new o.default(l)}),describe("Window resize",()=>{test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify"),t=new window.Event("resize");window.dispatchEvent(t),expect(e).toBeCalledTimes(1)})}),describe("Assemble slider",()=>{test("Wrapper should be contain a slider element",()=>{expect(l.querySelector(".slider")).not.toBeNull()}),test("Wrapper should be contain a track element",()=>{expect(l.querySelector(".slider__track")).not.toBeNull()}),test("Wrapper should be contain a thumb element",()=>{expect(l.querySelector(".slider__thumb")).not.toBeNull()}),test("Wrapper should be contain a pop-up element",()=>{expect(l.querySelector(".slider__pop-up")).not.toBeNull()}),test("Wrapper should be contain a progress-bar element",()=>{expect(l.querySelector(".slider__progress-bar")).not.toBeNull()}),test("Wrapper should be contain a scale element",()=>{expect(l.querySelector(".slider__scale")).not.toBeNull()}),test("Wrapper should be contain a slider element",()=>{n.slider.remove(),n.thumbTwo=null,n.popUpOne=null,n.popUpTwo=null,n.scale=null,n.assembleSlider(),expect(l.querySelector(".slider")).not.toBeNull()})}),describe("Update method",()=>{test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("thumbIsDragged"),expect(e).toBeCalledTimes(1)}),test("The resetZIndex method of the thumbOne object should be called once",()=>{const e=spyOn(n.thumbOne,"resetZIndex");n.update("thumbIsCatched"),expect(e).toBeCalledTimes(1)}),test("The resetZIndex method of thumbTwo must be called twice",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"resetZIndex");n.update("thumbIsCatched"),n.update("thumbIsCatched"),expect(e).toBeCalledTimes(2)}}),test("Notify method of the SimpleSliderView class not should be called",()=>{const e=spyOn(n.subject,"notify");n.update("emptyEvent"),expect(e).toBeCalledTimes(0)}),test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("clickToTrack"),expect(e).toBeCalledTimes(1)}),test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("clickToScale"),expect(e).toBeCalledTimes(1)})}),describe("Switch to horizontal",()=>{test("The slider must contain a class slider_horizontal",()=>{n.switchToHorizontal(),expect(n.slider.getControl().classList.contains("slider_horizontal")).toBe(!0)}),test("The track must contain a class slider__track_horizontal",()=>{n.switchToHorizontal(),expect(n.track.getControl().classList.contains("slider__track_horizontal")).toBe(!0)}),test("The thumbOne must contain a class slider__thumb_horizontal",()=>{n.switchToHorizontal(),expect(n.thumbOne.getControl().classList.contains("slider__thumb_horizontal")).toBe(!0)}),test("The thumbTwo must contain a class slider__thumb_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.thumbTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__thumb_horizontal")).toBe(!0)}),test("The popUpOne must contain a class slider__pop-up_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.popUpOne)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_horizontal")).toBe(!0)}),test("The popUpTwo must contain a class slider__pop-up_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.popUpTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_horizontal")).toBe(!0)}),test("The progressBar must contain a class slider__progress-bar_horizontal",()=>{n.switchToHorizontal(),expect(n.progressBar.getControl().classList.contains("slider__progress-bar_horizontal")).toBe(!0)}),test("The scale must contain a class slider__scale_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().classList.contains("slider__scale_horizontal")).toBe(!0)})}),describe("Switch to vertical",()=>{test("The slider must contain a class slider_vertical",()=>{n.switchToVertical(),expect(n.slider.getControl().classList.contains("slider_vertical")).toBe(!0)}),test("The track must contain a class slider__track_horizontal",()=>{n.switchToVertical(),expect(n.track.getControl().classList.contains("slider__track_vertical")).toBe(!0)}),test("The thumbOne must contain a class slider__thumb_vertical",()=>{n.switchToVertical(),expect(n.thumbOne.getControl().classList.contains("slider__thumb_vertical")).toBe(!0)}),test("The thumbTwo must contain a class slider__thumb_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.thumbTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__thumb_vertical")).toBe(!0)}),test("The popUpOne must contain a class slider__pop-up_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.popUpOne)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_vertical")).toBe(!0)}),test("The popUpTwo must contain a class slider__pop-up_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.popUpTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_vertical")).toBe(!0)}),test("The progressBar must contain a class slider__progress-bar_vertical",()=>{n.switchToVertical(),expect(n.progressBar.getControl().classList.contains("slider__progress-bar_vertical")).toBe(!0)}),test("The scale must contain a class slider__scale_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().classList.contains("slider__scale_vertical")).toBe(!0)})}),describe("Switch to single",()=>{test("ThumbTwo should be null",()=>{n.switchToSingle(),expect(n.thumbTwo).toBeNull()})}),describe("Switch to range",()=>{test("ThumbTwo should be defined",()=>{n.switchToRange(),expect(n.thumbTwo).not.toBeNull()}),test("ThumbTwo should be defined",()=>{n.switchToSingle(),n.switchToRange(),expect(n.thumbTwo).not.toBeNull()}),test("ThumbTwo should be defined ana popUpTwo should be null",()=>{n.switchToSingle(),n.popUpOne=null,n.switchToRange(),expect(n.thumbTwo).not.toBeNull(),expect(n.popUpTwo).toBeNull()})}),describe("Disable pop ups",()=>{test("PopUpOne should be null",()=>{n.disablePopUps(),expect(n.popUpOne).toBeNull()}),test("PopUpTwo should be null",()=>{n.switchToRange(),n.disablePopUps(),expect(n.popUpTwo).toBeNull()})}),describe("Enable pop ups",()=>{test("PopUpOne should be defined",()=>{n.disablePopUps(),n.enablePopUps(),expect(n.popUpOne).toBeDefined()}),test("PopUpTwo should be null",()=>{n.switchToSingle(),n.enablePopUps(),expect(n.popUpTwo).toBeNull()}),test("PopUpTwo should be defined",()=>{n.switchToSingle(),n.switchToRange(),n.disablePopUps(),n.enablePopUps(),expect(n.popUpTwo).toBeDefined()})}),describe("Disable scale",()=>{test("Scale should be null",()=>{n.disableScale(),expect(n.scale).toBeNull()}),test("Scale should be null",()=>{n.enableScale(),n.disableScale(),expect(n.scale).toBeNull()})}),describe("Enable scale",()=>{test("Scale should be defined",()=>{n.enableScale(),n.enableScale(),expect(n.scale).toBeDefined()}),test("Scale should be defined",()=>{n.disableScale(),n.enableScale(),expect(n.scale).toBeDefined()})}),describe("Get thumb size",()=>{test("Should be true",()=>{expect(n.getThumbSize()).toBe(!0)})}),describe("Get slider size",()=>{test("Should be true",()=>{expect(n.getSliderSize()).toBe(!0)})}),describe("Get thumbs positions",()=>{test("ThumbOne should be true",()=>{expect(n.getThumbsPositions().thumbOne).toBe(!0)}),test("ThumbTwo should be true",()=>{expect(n.getThumbsPositions().thumbTwo).toBe(!0)}),test("ThumbTwo should be true",()=>{n.switchToSingle(),expect(n.getThumbsPositions().thumbOne).toBe(!0)}),test("ThumbTwo should be true",()=>{n.switchToSingle(),expect(n.getThumbsPositions().thumbTwo).toBe(null)})}),describe("Update thumbs",()=>{test("The moveTo method of the thumbOne object should be called once",()=>{const e=spyOn(n.thumbOne,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),expect(e).toBeCalledTimes(1)}),test("The moveTo method of the thumbTwo object must be called zero times",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:null}),expect(e).toBeCalledTimes(0)}}),test("The moveTo method of thumbTwo should be called twice",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),expect(e).toBeCalledTimes(2)}})}),describe("Update progress bar",()=>{test("The update method of the progressBar object should be called once",()=>{const e=spyOn(n.progressBar,"update");n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),expect(e).toBeCalledTimes(1)}),test("The update method of the progressBar object should be called twice",()=>{const e=spyOn(n.progressBar,"update");n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),expect(e).toBeCalledTimes(2)})}),describe("Update pop ups",()=>{test("The update method of the popUpOne object should be called once",()=>{let e;null!==n.popUpOne&&(e=spyOn(n.popUpOne,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeCalledTimes(1)}),test("The update method of the popUpTwo object should be called twice",()=>{let e;null!==n.popUpTwo&&(e=spyOn(n.popUpTwo,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeCalledTimes(2)}),test("The update method of the popUpOne object should be called zero times",()=>{let e,t;n.disablePopUps(),null!==n.popUpOne&&(e=spyOn(n.popUpOne,"update")),null!==n.popUpTwo&&(t=spyOn(n.popUpTwo,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeUndefined(),expect(t).toBeUndefined()})}),describe("Get scale point size",()=>{test("ScalePointSize should be {width: 0, height: 0}",()=>{n.disableScale(),expect(n.getScalePointSize(10).width).toBe(0),expect(n.getScalePointSize(10).height).toBe(0)}),test("ScalePointSize should be true",()=>{expect(n.getScalePointSize(10)).toBe(!0)})}),describe("Add scale point",()=>{test("The length of the scale points array must be 3",()=>{var e;n.addScalePoints([{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0}]),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().querySelectorAll(".scale-point").length).toBe(2)}),test("The length of the scale points array must be 3",()=>{var e;n.addScalePoints([{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0}]),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().querySelectorAll(".scale-point").length).toBe(3)})}),describe("Get track click position",()=>{test("Function should be return true",()=>{expect(n.getTrackClickPosition()).toBe(!0)})}),describe("Get scale click position",()=>{test("Function should be return true",()=>{expect(n.getScaleClickPosition()).toBe(!0)}),test("Function should be return {left: 0, top: 0}",()=>{n.disableScale(),expect(n.getScaleClickPosition().left).toBe(0),expect(n.getScaleClickPosition().top).toBe(0)})}),describe("Get margins",()=>{beforeEach(()=>{n.slider.getRect=jest.fn(()=>({width:120,height:120,top:25,left:49,bottom:60,right:5,x:35,y:48,toJSON:()=>null})),null!==n.scale&&(n.scale.getRect=jest.fn(()=>({width:120,height:120,top:11,left:49,bottom:87,right:45,x:35,y:48,toJSON:()=>null}))),null!==n.popUpOne&&(n.popUpOne.getRect=jest.fn(()=>({width:120,height:120,top:13,left:21,bottom:87,right:5,x:35,y:48,toJSON:()=>null})))}),test("Slider margin-bottom should be 27",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),expect(n.getMargins().bottom).toBe(27)}),test("Slider margin-bottom should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),n.disableScale(),expect(n.getMargins().bottom).toBe(0)}),test("Slider margin-top should be 12",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),expect(n.getMargins().top).toBe(12)}),test("Slider margin-top should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),n.disablePopUps(),expect(n.getMargins().top).toBe(0)}),test("Slider margin-left should be 28",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),expect(n.getMargins().left).toBe(28)}),test("Slider margin-left should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),n.disablePopUps(),expect(n.getMargins().left).toBe(0)}),test("Slider margin-right should be 40",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),expect(n.getMargins().right).toBe(40)}),test("Slider margin-right should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),n.disableScale(),expect(n.getMargins().right).toBe(0)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(7));let l;beforeEach(()=>{l=new o.default}),describe("Append",()=>{test("Slider should contain element with class new-elem",()=>{const e=document.createElement("div");e.classList.add("new-elem"),l.append(e),expect(l.getControl().querySelector(".new-elem")).not.toBeNull()}),test("Slider should contain element with class second-elem",()=>{const e=document.createElement("div");e.classList.add("second-elem"),l.append(e),expect(l.getControl().querySelector(".second-elem")).not.toBeNull()})}),describe("Set margins",()=>{test("Slider margins should be {left: 25, top: 77, right: 13, bottom: 2}",()=>{l.setMargins({left:25,top:77,right:13,bottom:2}),expect(l.control.style.marginLeft).toBe("25px"),expect(l.control.style.marginTop).toBe("77px"),expect(l.control.style.marginRight).toBe("13px"),expect(l.control.style.marginBottom).toBe("2px")}),test("Slider margins should be {left: 84, top: 97, right: 67, bottom: 73}",()=>{l.setMargins({left:84,top:97,right:67,bottom:73}),expect(l.control.style.marginLeft).toBe("84px"),expect(l.control.style.marginTop).toBe("97px"),expect(l.control.style.marginRight).toBe("67px"),expect(l.control.style.marginBottom).toBe("73px")})}),describe("Reset margins",()=>{test("Slider margins should be {left: 0, top: 0, right: 0, bottom: 0}",()=>{l.setMargins({left:25,top:77,right:13,bottom:2}),l.resetMargins(),expect(l.control.style.marginLeft).toBe("0px"),expect(l.control.style.marginTop).toBe("0px"),expect(l.control.style.marginRight).toBe("0px"),expect(l.control.style.marginBottom).toBe("0px")}),test("Slider margins should be {left: 0px, top: 0, right: 0, bottom: 0}",()=>{l.setMargins({left:84,top:97,right:67,bottom:73}),l.resetMargins(),expect(l.control.style.marginLeft).toBe("0px"),expect(l.control.style.marginTop).toBe("0px"),expect(l.control.style.marginRight).toBe("0px"),expect(l.control.style.marginBottom).toBe("0px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));let l=new o.default;beforeEach(()=>{l=new o.default}),describe("Register",()=>{test("Observers must be added",()=>{const e={update(){}},t={update(){}},s={update(){}};l.register("thumbMove",e),expect(l.observers.thumbMove.length).toBe(1),l.register("thumbMove",t),expect(l.observers.thumbMove.length).toBe(2),l.register("thumbMove",s),expect(l.observers.thumbMove.length).toBe(3)})}),describe("Remove",()=>{test("Observers must be removed",()=>{const e={update(){}},t={update(){}},s={update(){}};l.register("thumbMove",e),l.register("thumbMove",t),l.register("thumbMove",s),expect(l.observers.thumbMove.length).toBe(3),l.unsubscribe("thumbMove",e),expect(l.observers.thumbMove.length).toBe(2),l.unsubscribe("thumbMove",t),expect(l.observers.thumbMove.length).toBe(1),l.unsubscribe("thumbMove",s),expect(l.observers.thumbMove.length).toBe(0)})}),describe("Notify",()=>{test("Observers must be notified",()=>{let e=0;const t={update(){e+=1}},s={update(){e+=1}},i={update(){e+=1}};l.register("thumbMove",t),l.notify("thumbMove"),expect(e).toBe(1),e=0,l.register("thumbMove",s),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.register("thumbMove",i),l.notify("thumbMove"),expect(e).toBe(3),e=0,l.unsubscribe("thumbMove",i),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.register("clickToScale",t),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.notify("clickToScale")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(9));let l;beforeEach(()=>{l=new o.default}),describe("Set z-index",()=>{test("Thumb z-inex should be 5",()=>{l.setZIndex(5),expect(l.getControl().style.zIndex).toBe("5")}),test("Thumb z-inex should be 8",()=>{l.setZIndex(8),expect(l.getControl().style.zIndex).toBe("8")})}),describe("Reset z-index",()=>{test('Thumb z-inex should be ""',()=>{l.setZIndex(4),l.resetZIndex(),expect(l.getControl().style.zIndex).toBe("")})}),describe("Move to",()=>{test("Thumb last position should be {left: 40, top: 11}",()=>{l.moveTo({left:40,top:11}),expect(l.getPosition().left).toBe(40),expect(l.getPosition().top).toBe(11)}),test("Thumb element left should be 80px",()=>{l.moveTo({left:80,top:11}),expect(l.getControl().style.left).toBe("80px")}),test("Thumb element top should be 54px",()=>{l.moveTo({left:80,top:54}),expect(l.getControl().style.top).toBe("54px")})}),describe("Thumb dragstart event",()=>{test("Event should return false",()=>{const e=new window.Event("dragstart");expect(l.getControl().dispatchEvent(e)).toBe(!1)})}),describe("Set thumb shift",()=>{test("Thumb shift should be {shiftX: 2, shiftY: 5}",()=>{l.setThumbShift({left:85,top:47},{left:83,top:42}),expect(l.shift.shiftX).toBe(2),expect(l.shift.shiftY).toBe(5)}),test("Thumb shift should be {shiftX: 5, shiftY: 3}",()=>{l.setThumbShift({left:100,top:80},{left:95,top:77}),expect(l.shift.shiftX).toBe(5),expect(l.shift.shiftY).toBe(3)})}),describe("Increase z-index",()=>{test("z-index should be 3",()=>{l.getControl().style.zIndex="2";const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(l.getControl().style.zIndex).toBe("3")}),test("z-index should be 10",()=>{l.getControl().style.zIndex="9";const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(l.getControl().style.zIndex).toBe("10")}),test("z-index should be 1",()=>{l.getControl().style.zIndex="";const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(l.getControl().style.zIndex).toBe("1")})}),describe("Drag",()=>{test("SetPosition method should be called once",()=>{const e=spyOn(l,"setPosition"),t=new window.MouseEvent("pointermove");l.drag(t),expect(e).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=spyOn(l.subject,"notify"),t=new window.MouseEvent("pointermove");l.drag(t),expect(e).toBeCalledTimes(1)})}),describe("Set position",()=>{test("Thumb position should be {left: 40, top: 17}",()=>{l.shift={shiftX:5,shiftY:3},l.setPosition({left:45,top:20}),expect(l.getPosition().left).toBe(40),expect(l.getPosition().top).toBe(17)}),test("Thumb position should be {left: 45, top: 20}",()=>{l.shift={shiftX:8,shiftY:9},l.setPosition({left:146,top:146}),expect(l.getPosition().left).toBe(138),expect(l.getPosition().top).toBe(137)})}),describe("Enable selection",()=>{test("Document onselectstart event should be null",()=>{l.endDrag(),expect(document.onselectstart).toBe(null)}),test("Document pointerdown event should be null",()=>{l.endDrag(),expect(document.onpointerdown).toBe(null)})}),describe("Disable selection",()=>{test("Document pointerdown event not should be null",()=>{const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(document.onselectstart).not.toBe(null)}),test("Document selectstart event should return false",()=>{const e=new window.Event("pointerdown");if(l.getControl().dispatchEvent(e),null!==document.onselectstart){const e=new window.Event("selectstart");expect(document.onselectstart(e)).toBe(!1)}}),test("Document pointerdown event should return false",()=>{const e=new window.Event("pointerdown");if(l.getControl().dispatchEvent(e),null!==document.onpointerdown){const e=new window.Event("pointerdown");expect(document.onpointerdown(e)).toBe(!1)}})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(8));let l;const n=e=>{e.initMouseEvent("click",!0,!0,window,0,50,80,50,80,!1,!1,!1,!1,0,null)};beforeEach(()=>{l=new o.default}),describe("Click on track",()=>{test("SetPosition method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l,"setPosition");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l.subject,"notify");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Position should be {left: 50, top: 80}",()=>{const e=document.createEvent("MouseEvent");n(e),l.control.dispatchEvent(e),expect(l.getPosition().left).toBe(50),expect(l.getPosition().top).toBe(80)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));let l;Object.defineProperties(window.HTMLElement.prototype,{offsetLeft:{get:function(){return parseFloat(window.getComputedStyle(this).marginLeft)||0}},offsetTop:{get:function(){return parseFloat(window.getComputedStyle(this).marginTop)||0}},offsetHeight:{get:function(){return parseFloat(window.getComputedStyle(this).height)||0}},offsetWidth:{get:function(){return parseFloat(window.getComputedStyle(this).width)||0}}}),beforeEach(()=>{l=new o.default("some-element")}),describe("Constructor",()=>{test("UI-Control should have a class some-element",()=>{expect(l.control.classList.contains("some-element")).toBe(!0)}),test("UI-Control should have a class some-element_horizontal",()=>{expect(l.control.classList.contains("some-element_horizontal")).toBe(!0)}),test("UI-Control should have a class some-element_vertical",()=>{l=new o.default("some-element","vertical"),expect(l.control.classList.contains("some-element_vertical")).toBe(!0)})}),describe("Set position and get position",()=>{test("UI-Control position should be {left: 80, top: 20}",()=>{const e=document.createElement("div");e.style.left="100px",e.style.top="40px",e.append(l.getControl()),l.setPosition({left:80,top:20}),expect(l.getPosition().left).toBe(80),expect(l.getPosition().top).toBe(20)}),test("UI-Control position should be {left: 20, top: 10}",()=>{l.setPosition({left:20,top:10}),expect(l.getPosition().left).toBe(20),expect(l.getPosition().top).toBe(10)})}),describe("Get element",()=>{test("UI-Control should be exist",()=>{expect(l.getControl()).not.toBeNull()}),test("UI-Control should be exist",()=>{l=new o.default("some-element","vertical"),expect(l.getControl()).not.toBeNull()})}),describe("Get size",()=>{test("UIControl size should be {width: 400, height: 50}",()=>{l.control.style.width="400px",l.control.style.height="50px",expect(l.getSize().width).toBe(400),expect(l.getSize().height).toBe(50)}),test("UI-Control size should be {width: 250, height: 40}",()=>{l.control.style.width="250px",l.control.style.height="40px",expect(l.getSize().width).toBe(250),expect(l.getSize().height).toBe(40)})}),describe("Switch to horizontal",()=>{test("UI-Control should be not contain class some-element_vertical",()=>{l=new o.default("some-element","vertical"),l.switchToHorizontal(),expect(l.control.classList.contains("some-element_vertical")).toBe(!1)}),test("UI-Control should be contain class some-element_horizontal",()=>{l=new o.default("some-element","vertical"),l.switchToHorizontal(),expect(l.control.classList.contains("some-element_horizontal")).toBe(!0)})}),describe("Switch to vertical",()=>{test("UI-Control should be not contain class some-element_horizontal",()=>{l.switchToVertical(),expect(l.control.classList.contains("some-element_horizontal")).toBe(!1)}),test("UI-Control should be contain class some-element_vertical",()=>{l.switchToVertical(),expect(l.control.classList.contains("some-element_vertical")).toBe(!0)})}),describe("Remove",()=>{test("UI-Control should be not exist in the DOM",()=>{const e=document.querySelector("body");null==e||e.append(l.getControl()),l.remove(),expect(document.querySelector(".some-element")).toBe(null)})}),describe("Get orientation",()=>{test("UI-Control orientation should be horizontal",()=>{expect(l.getOrientation()).toBe("horizontal")}),test("UI-Control orientation should be vertical",()=>{l=new o.default("some-element","vertical"),expect(l.getOrientation()).toBe("vertical")})}),describe("Get rect",()=>{test("UI-Control rect should be {top: 40, left: 45, bottom: 50, right: 55}",()=>{l.control.getBoundingClientRect=jest.fn(()=>({width:120,height:120,top:40,left:45,bottom:50,right:55,x:35,y:48,toJSON:()=>null})),expect(l.getRect().top).toBe(40),expect(l.getRect().left).toBe(45),expect(l.getRect().bottom).toBe(50),expect(l.getRect().right).toBe(55)}),test("UI-Control rect should be {top: 11, left: 49, bottom: 60, right: 5}",()=>{l.control.getBoundingClientRect=jest.fn(()=>({width:120,height:120,top:11,left:49,bottom:60,right:5,x:35,y:48,toJSON:()=>null})),expect(l.getRect().top).toBe(11),expect(l.getRect().left).toBe(49),expect(l.getRect().bottom).toBe(60),expect(l.getRect().right).toBe(5)})}),describe("Get style",()=>{test("UI-Control width style should be 138px",()=>{l.control.style.width="138px",expect(l.getStyle("width")).toBe("138px")}),test('UI-Control width style should be ""',()=>{expect(l.getStyle("someStyle")).toBe("")})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy91aS1jb250cm9sL3VpLWNvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3N1YmplY3Qvc3ViamVjdC50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvbW9kZWwvc2ltcGxlLXNsaWRlci1tb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9zaW1wbGUtc2xpZGVyLXZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL2NvbnRyb2xsZXIvc2ltcGxlLXNsaWRlci1jb250cm9sbGVyLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NsaWRlci9zbGlkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdHJhY2svdHJhY2sudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdGh1bWIvdGh1bWIudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvcG9wLXVwL3BvcC11cC50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9wcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NjYWxlL3NjYWxlLnRzIiwid2VicGFjazovLy8uL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RlbW8vZGVtby50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL2NvbnRyb2wtcGFuZWwvdmlldy9jb250cm9sLXBhbmVsLXZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvY29udHJvbC1wYW5lbC9jb250cm9sLXBhbmVsLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L2dyb3VwLWVsZW1lbnRzLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L3JhZGlvLWJ1dHRvbi9yYWRpby1idXR0b24udHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvY2hlY2tib3gvY2hlY2tib3gudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9jb250cm9sLXBhbmVsL21vZGVsL2NvbnRyb2wtcGFuZWwtbW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9jb250cm9sLXBhbmVsL2NvbnRyb2xsZXIvY29udHJvbC1wYW5lbC1jb250cm9sbGVyLnRzIiwid2VicGFjazovLy8uIHN5bmMgXFwuc2NzcyQiLCJ3ZWJwYWNrOi8vLy4vZGVtby9zY3NzL25vcm1hbGl6ZS5zY3NzIiwid2VicGFjazovLy8uL2RlbW8vc2Nzcy9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL2ZvbnRzL2ZvbnRzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvY2hlY2tib3gvX2FuaW1hdGlvbnMuc2NzcyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL2NvbnRyb2wtcGFuZWwvdmlldy9jaGVja2JveC9jaGVja2JveC5zY3NzIiwid2VicGFjazovLy8uL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L2NvbnRyb2wtcGFuZWwvY29udHJvbC1wYW5lbC5zY3NzIiwid2VicGFjazovLy8uL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L3JhZGlvLWJ1dHRvbi9fYW5pbWF0aW9ucy5zY3NzIiwid2VicGFjazovLy8uL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L3JhZGlvLWJ1dHRvbi9yYWRpby1idXR0b24uc2NzcyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL2NvbnRyb2wtcGFuZWwvdmlldy90ZXh0LWZpZWxkL3RleHQtZmllbGQuc2NzcyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9wb3AtdXAvcG9wLXVwLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvcHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWJhci5zY3NzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NjYWxlL3NjYWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvc2xpZGVyL3NsaWRlci5zY3NzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3RodW1iL3RodW1iLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdHJhY2svdHJhY2suc2NzcyIsIndlYnBhY2s6Ly8vLiBzeW5jIFteZF1cXC50cyQiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9jb250cm9sLXBhbmVsL2NvbnRyb2wtcGFuZWwudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvdGV4dC1maWVsZC90ZXh0LWZpZWxkLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci9tb2RlbC9fX21vY2tzX18vc2ltcGxlLXNsaWRlci1tb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvc2ltcGxlLXNsaWRlci50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9fX21vY2tzX18vc2ltcGxlLXNsaWRlci12aWV3LnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3BvcC11cC9fX21vY2tzX18vcG9wLXVwLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3Byb2dyZXNzLWJhci9fX21vY2tzX18vcHJvZ3Jlc3MtYmFyLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NjYWxlL19fbW9ja3NfXy9zY2FsZS50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9zbGlkZXIvX19tb2Nrc19fL3NsaWRlci50cyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy90aHVtYi9fX21vY2tzX18vdGh1bWIudHMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdHJhY2svX19tb2Nrc19fL3RyYWNrLnRzIiwid2VicGFjazovLy8uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3VpLWNvbnRyb2wvX19tb2Nrc19fL3VpLWNvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvcG9wLXVwLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvcHJvZ3Jlc3MtYmFyLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvc2NhbGUudGVzdC50cyIsIndlYnBhY2s6Ly8vLi90ZXN0cy9zaW1wbGUtc2xpZGVyLWNvbnRyb2xsZXIudGVzdC50cyIsIndlYnBhY2s6Ly8vLi90ZXN0cy9zaW1wbGUtc2xpZGVyLW1vZGVsLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvc2ltcGxlLXNsaWRlci12aWV3LnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvc2xpZGVyLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvc3ViamVjdC50ZXN0LnRzIiwid2VicGFjazovLy8uL3Rlc3RzL3RodW1iLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvdHJhY2sudGVzdC50cyIsIndlYnBhY2s6Ly8vLi90ZXN0cy91aS1jb250cm9sLnRlc3QudHMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJsaXN0Iiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJpZCIsImJhc2UiLCJjb3VudCIsImNvbmNhdCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImpvaW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwidG9TdHJpbmciLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm9yaWVudGF0aW9uIiwiY29udHJvbCIsInRoaXMiLCJzdWJqZWN0IiwibGFzdFBvc2l0aW9uIiwibGVmdCIsInRvcCIsIm9yaWVudGF0aW9uQ2xhc3MiLCJjbGFzc0xpc3QiLCJhZGQiLCJjdXJzb3JQb3NpdGlvbiIsInBvc2l0aW9uSW5zaWRlUGFyZW50IiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsInBhcmVudENvb3JkcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJtYWluQ2xhc3MiLCJyZXBsYWNlIiwic3R5bGVOYW1lIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm9ic2VydmVycyIsImV2ZW50VHlwZSIsIm9ic2VydmVyIiwicmVnaXN0ZXJlZE9ic2VydmVyIiwiU2ltcGxlU2xpZGVyTW9kZWwiLCJzZXR0aW5ncyIsInR5cGUiLCJzY2FsZSIsInBvcFVwcyIsIm1pbiIsIm1heCIsInN0ZXAiLCJ0aHVtYk9uZVZhbHVlIiwidGh1bWJUd29WYWx1ZSIsInNsaWRlclNpemUiLCJ0aHVtYlNpemUiLCJzY2FsZVBvaW50U2l6ZSIsInJlZnJlc2hTbGlkZXJTdGF0ZSIsInVuZGVmaW5lZCIsIm5vdGlmeSIsInJhbmdlVmFsdWVzSXNDb3JyZWN0IiwidXBkYXRlTWluVmFsdWUiLCJ1cGRhdGVNYXhWYWx1ZSIsInVwZGF0ZVN0ZXAiLCJzZXRUaHVtYnNWYWx1ZXMiLCJ0aHVtYk9uZSIsInRodW1iVHdvIiwicG9zaXRpb25zIiwidmFsdWVXaXRoU3RlcCIsInBvc2l0aW9uQnlPcmllbnRhdGlvbiIsInNpemUiLCJnZXRDb3JyZWN0U2l6ZSIsInRodW1icyIsInRodW1iT25lUG9zaXRpb24iLCJ0aHVtYlZhbHVlVG9Qb3NpdGlvbiIsInRodW1iVHdvUG9zaXRpb24iLCJ1cGRhdGVUaHVtYnNTdGF0ZSIsInBvc2l0aW9uIiwic3RhcnQiLCJlbmQiLCJzaXplQnlPcmllbnRhdGlvbiIsInBvcFVwT25lIiwiZ2V0UG9wVXBQb3NpdGlvbiIsInBvcFVwVHdvIiwic2NhbGVQb2ludHMiLCJzdGVwc0NvdW50IiwiZ2V0U3RlcHNDb3VudCIsInN0ZXBTaXplIiwiZ2V0U3RlcFNpemUiLCJzY2FsZVBvaW50c0NvdW50IiwicHJldmlvdXNQb2ludFBvc2l0aW9uIiwiY3VycmVudFBvaW50UG9zaXRpb24iLCJNYXRoIiwicm91bmQiLCJjdXJyZW50UG9pbnRWYWx1ZSIsInRodW1iUG9zaXRpb25Ub1ZhbHVlIiwiZ2V0Q29ycmVjdFBvaW50UG9zaXRpb24iLCJwb2ludHNEb05vdEludGVyc2VjdCIsImZ1bGxQb2ludFBvc2l0aW9uIiwiY3VycmVudFBvc2l0aW9uIiwicHJldmlvdXNQb3NpdGlvbiIsImNsaWNrUG9zaXRpb24iLCJ0aHVtYlR3b0lzTmVhclRvQ2xpY2siLCJhYnMiLCJ0aHVtYlBvc2l0aW9uIiwibmV3UG9zaXRpb24iLCJwaXhlbHNQZXJWYWx1ZSIsImdldFB4UGVyVmFsdWUiLCJuZXdWYWx1ZSIsInB4UGVyVmFsIiwidGh1bWJWYWx1ZSIsInBvc2l0aW9uVmFsdWUiLCJleHRyZW1lUG9zaXRpb24iLCJ3cmFwcGVyIiwiZXZlbnRzIiwidGh1bWJJc0RyYWdnZWQiLCJ0aHVtYklzQ2F0Y2hlZCIsInJlc2V0WkluZGV4IiwiY2xpY2tUb1RyYWNrIiwiY2xpY2tUb1NjYWxlIiwic2xpZGVyV3JhcHBlciIsInNsaWRlciIsInRyYWNrIiwicHJvZ3Jlc3NCYXIiLCJpbml0Iiwic3Vic2NyaWJlVG9FdmVudHMiLCJhc3NlbWJsZVNsaWRlciIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWdpc3RlciIsImFwcGVuZCIsImdldENvbnRyb2wiLCJyZXNldE1hcmdpbnMiLCJzd2l0Y2hUb0hvcml6b250YWwiLCJzd2l0Y2hUb1ZlcnRpY2FsIiwidW5zdWJzY3JpYmUiLCJnZXRPcmllbnRhdGlvbiIsInNldE1hcmdpbnMiLCJnZXRNYXJnaW5zIiwidGh1bWJUd29Jc1dpdGhvdXRQb3B1cCIsImdldFNpemUiLCJnZXRQb3NpdGlvbiIsInRodW1ic1Bvc2l0aW9ucyIsIm1vdmVUbyIsInBhcmFtcyIsImdldFBvaW50U2l6ZSIsInBvaW50cyIsImFkZFBvaW50cyIsIm1hcmdpbnMiLCJyaWdodCIsImJvdHRvbSIsInNsaWRlclJlY3QiLCJnZXRSZWN0IiwicG9wVXBSZWN0Iiwic2NhbGVSZWN0IiwibW9kZWwiLCJ2aWV3IiwiZ2V0VGh1bWJzUG9zaXRpb25zIiwidGh1bWJzUG9zaXRpb25zSXNVcGRhdGVkIiwidXBkYXRlVGh1bWJzUG9zaXRpb25zIiwibWluSXNVcGRhdGVkIiwidXBkYXRlVmlldyIsInJlY2FsY3VsYXRlU3RlcCIsIm1heElzVXBkYXRlZCIsInN0ZXBJc1VwZGF0ZWQiLCJvcmllbnRhdGlvbklzVXBkYXRlZCIsInVwZGF0ZVNsaWRlck9yaWVudGF0aW9uIiwidHlwZUlzVXBkYXRlZCIsInVwZGF0ZVNsaWRlclR5cGUiLCJzY2FsZVN0YXRlSXNVcGRhdGVkIiwidXBkYXRlU2NhbGVTdGF0ZSIsInBvcFVwc1N0YXRlSXNVcGRhdGVkIiwidXBkYXRlUG9wVXBzU3RhdGUiLCJzZXRUaHVtYlBvc2l0aW9uT25DbGlja1Bvc2l0aW9uIiwiZ2V0VHJhY2tDbGlja1Bvc2l0aW9uIiwiZ2V0U2NhbGVDbGlja1Bvc2l0aW9uIiwidGh1bWJzU3dhcHBlZCIsInN3YXBUaHVtYnMiLCJ3aW5kb3dSZXNpemVkIiwibW9kZWxTdWJqZWN0Iiwidmlld1N1YmplY3QiLCJzZXRTbGlkZXJTaXplIiwiZ2V0U2xpZGVyU2l6ZSIsInNldFRodW1iU2l6ZSIsImdldFRodW1iU2l6ZSIsImdldFR5cGUiLCJzd2l0Y2hUb1NpbmdsZSIsInN3aXRjaFRvUmFuZ2UiLCJnZXRQb3BVcHNTdGF0ZSIsImVuYWJsZVBvcFVwcyIsImRpc2FibGVQb3BVcHMiLCJnZXRTY2FsZVN0YXRlIiwiZW5hYmxlU2NhbGUiLCJnZXRNYXgiLCJzZXRTY2FsZVBvaW50U2l6ZSIsImdldFNjYWxlUG9pbnRTaXplIiwiZ2V0U2NhbGVQb2ludHMiLCJhZGRTY2FsZVBvaW50cyIsImRpc2FibGVTY2FsZSIsInVwZGF0ZVRodW1icyIsInVwZGF0ZVBvcFVwcyIsImdldFBvcFVwc1BhcmFtcyIsInVwZGF0ZVByb2dyZXNzQmFyIiwiZ2V0UHJvZ3Jlc3NCYXJQYXJhbXMiLCJTbGlkZXIiLCJzdXBlciIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbiIsIlRyYWNrIiwiaGFuZGxlVHJhY2tDbGljayIsImV2ZW50Iiwic2V0UG9zaXRpb24iLCJjbGllbnRYIiwiY2xpZW50WSIsIlRodW1iIiwic2hpZnRYIiwic2hpZnRZIiwiaGFuZGxlRG9jdW1lbnRQb2ludGVybW92ZSIsImRyYWciLCJoYW5kbGVEb2N1bWVudFBvaW50ZXJ1cCIsImVuZERyYWciLCJoYW5kbGVUaHVtYlBvaW50ZXJkb3duIiwiZGlzYWJsZURyYWdBbmREcm9wIiwiekluZGV4Iiwib25kcmFnc3RhcnQiLCJkaXNhYmxlU2VsZWN0aW9uIiwidGh1bWJDb29yZHMiLCJzZXRUaHVtYlNoaWZ0IiwiaW5jcmVhc2VaSW5kZXgiLCJjdXJzb3JQb3MiLCJ0aHVtYlBvcyIsImdldFN0eWxlIiwicGFyc2VJbnQiLCJlbmFibGVTZWxlY3Rpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25zZWxlY3RzdGFydCIsIm9ucG9pbnRlcmRvd24iLCJQb3BVcCIsInVwZGF0ZVZhbHVlIiwidXBkYXRlUG9zaXRpb24iLCJpbm5lckhUTUwiLCJQcm9ncmVzc0JhciIsIlNjYWxlIiwiaGFuZGxlU2NhbGVDbGljayIsImFkZFBvaW50IiwicG9pbnRTaXplIiwic2NhbGVQb2ludCIsInBvaW50IiwiZGl2aXNpb25NYXJrZXIiLCJkaXZpc2lvbkxhYmVsIiwiaW5uZXJUZXh0Iiwic2NyaXB0cyIsInNjcmlwdCIsImRpcmVjdG9yaWVzIiwic3BsaXQiLCJpbmNsdWRlcyIsImFkZE5ld1NsaWRlckJ1dHRvbiIsImhlbHBJbWFnZSIsImJ1dHRvbldyYXBwZXIiLCJhZGRFdmVudExpc3RlbmVycyIsImhhbmRsZUFkZE5ld1NsaWRlckJ1dHRvbkNsaWNrIiwicXVlcnlTZWxlY3RvckFsbCIsImJlZm9yZSIsImljb24iLCJyZW1vdmVTbGlkZXJCdXR0b24iLCJoYW5kbGVSZW1vdmVTbGlkZXJCdXR0b25DbGljayIsIiQiLCJzaW1wbGVTbGlkZXIiLCJjb250cm9sUGFuZWwiLCJDb250cm9sUGFuZWxWaWV3IiwidHlwZVJhZGlvIiwibGFiZWwiLCJvcmllbnRhdGlvblJhZGlvIiwic2NhbGVDaGVja2JveCIsInBvcFVwc0NoZWNrYm94IiwiY3JlYXRlUGFuZWwiLCJ3cmFwcGVyQ2xhc3MiLCJlbGVtZW50cyIsInR5cGVSYWRpb0dyb3VwIiwiaGVhZGVyIiwib3JpZW50YXRpb25SYWRpb0dyb3VwIiwiYWxsUmFkaW9zR3JvdXAiLCJjaGVja2JveGVzR3JvdXAiLCJnZXRFbGVtZW50Iiwic3dpdGNoT3JpZW50YXRpb24iLCJ0aHVtYnNWYWx1ZXMiLCJzZXRWYWx1ZSIsInN0YXRlIiwic2V0U3RhdGUiLCJzd2l0Y2hUbyIsImdldFZhbHVlIiwiZ2V0U3RhdGUiLCJlbGVtZW50IiwiY2xhc3NOYW1lIiwiUmFkaW9CdXR0b24iLCJ1bmlxdWVOYW1lIiwiZ2VuZXJhdGVOYW1lIiwicmFkaW9zIiwicmFkaW8iLCJjaGVja2VkIiwicmFkaW9XcmFwcGVyIiwicmFkaW9CdXR0b24iLCJoYW5kbGVSYWRpb0J1dHRvbkNoYW5nZSIsImNvdW50ZXIiLCJuZXdOYW1lIiwiQ2hlY2tib3giLCJjaGVja2JveCIsImhhbmRsZUNoZWNrYm94Q2hhbmdlIiwidG9nZ2xlIiwiQ29udHJvbFBhbmVsTW9kZWwiLCJzbGlkZXJTZXR0aW5ncyIsImdldFRodW1ic1ZhbHVlcyIsInNldE1pblZhbHVlIiwiZ2V0TWluIiwic2V0TWF4VmFsdWUiLCJzZXRTdGVwIiwiZ2V0U3RlcCIsImNvbnRyb2xQYW5lbERhdGFVcGRhdGVkIiwiZ2V0VGh1bWJPbmVWYWx1ZSIsImdldFRodW1iVHdvVmFsdWUiLCJzZXRTY2FsZVN0YXRlIiwic2V0UG9wVXBzU3RhdGUiLCJzZXRUeXBlUmFkaW8iLCJzZXRPcmllbnRhdGlvblJhZGlvIiwibWFwIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJjb2RlIiwicmVzb2x2ZSIsImFwaSIsImNvbnRlbnQiLCJkZWZhdWx0IiwibG9jYWxzIiwibWV0aG9kcyIsImVhY2giLCJmbiIsImFjdGlvbiIsImFyZ3MiLCJtZXRob2QiLCJlcnJvciIsImpRdWVyeSIsIlRleHRGaWVsZCIsImxhYmVsVGV4dCIsImZpZWxkIiwiaGFuZGxlVGV4dEZpZWxkQmx1ciIsIm9ua2V5cHJlc3MiLCJyZW1vdmVOb25EaWdpdENoYXIiLCJ0ZXN0IiwiVEVTVF9PSyIsImRlZmF1bHRTZXR0aW5ncyIsImV4dGVuZCIsImNvbnRyb2xsZXIiLCJqZXN0IiwibW9jayIsImRpdiIsInBvcFVwIiwiYmVmb3JlRWFjaCIsImRlc2NyaWJlIiwiZXhwZWN0IiwidG9CZSIsImluaXRFdnQiLCJldnQiLCJpbml0TW91c2VFdmVudCIsImNyZWF0ZUV2ZW50Iiwic3B5Iiwic3B5T24iLCJkaXNwYXRjaEV2ZW50IiwidG9CZUNhbGxlZFRpbWVzIiwibm90Iiwic3B5MSIsInNweTIiLCJzcHkzIiwic3B5NCIsInNweTUiLCJzcHk2Iiwic3B5NyIsInNweTgiLCJwcm9ncmVzc1BhcmFtcyIsInRvQmVDbG9zZVRvIiwicG9zIiwiRXZlbnQiLCJ0b0JlTnVsbCIsImNvbnRhaW5zIiwidG9CZURlZmluZWQiLCJ0b0JlVW5kZWZpbmVkIiwieCIsInkiLCJ0b0pTT04iLCJlbGVtIiwibmV3T2JzZXJ2ZXJPbmUiLCJuZXdPYnNlcnZlclR3byIsIm5ld09ic2VydmVyVGhyZWUiLCJ0aHVtYk1vdmUiLCJudW1iZXJPZk5vdGlmaWVkT2JzZXJ2ZXJzIiwidGh1bWIiLCJzZXRaSW5kZXgiLCJtb3ZlRXZ0IiwiTW91c2VFdmVudCIsImRvY0V2dCIsImRlZmluZVByb3BlcnRpZXMiLCJIVE1MRWxlbWVudCIsIm9mZnNldExlZnQiLCJwYXJzZUZsb2F0Iiwib2Zmc2V0VG9wIiwiZWxlbWVudFBhcnJlbnQiLCJib2R5Il0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkwsRUFBSyxHQUlITSxFQUFJ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UXlJLFVBQVVwSSxLQUFLdVYsS0FBSyxJQUNuQ0QsT0FBTzNWLEVBQVF5SSxVQUFVckksTUFBTXdWLEtBQUssSUFDcENELE9BQU8zVixFQUFReUksVUFBVUYsUUFBUXFOLEtBQUssSUFDdENELE9BQU8zVixFQUFReUksVUFBVUgsT0FBT3NOLEtBQUssT0FJekNGLFNBQVMsWUFBYSxLQUNwQlYsS0FBSyx5Q0FBMEMsS0FDN0NoVixFQUFpQixRQUFFOUMsTUFBTTZELE1BQVEsUUFDakM0VSxPQUFPM1YsRUFBUTJOLFNBQVMsVUFBVWlJLEtBQUssV0FFekNaLEtBQUssc0NBQXVDLEtBQzFDVyxPQUFPM1YsRUFBUTJOLFNBQVMsY0FBY2lJLEtBQUsiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMTMsMV0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsImltcG9ydCB7IElQb3NpdGlvbiwgSVNpemUgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBTdWJqZWN0IGZyb20gJy4uLy4uL3N1YmplY3Qvc3ViamVjdCc7XG5cbmNsYXNzIFVJQ29udHJvbCB7XG4gIHByb3RlY3RlZCBjb250cm9sOiBIVE1MRGl2RWxlbWVudDtcbiAgcHJvdGVjdGVkIGxhc3RQb3NpdGlvbjogSVBvc2l0aW9uO1xuICBzdWJqZWN0OiBTdWJqZWN0O1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgb3JpZW50YXRpb24/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb250cm9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5jb250cm9sID0gY29udHJvbDtcbiAgICB0aGlzLnN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xuICAgIHRoaXMubGFzdFBvc2l0aW9uID0geyBsZWZ0OiAwLCB0b3A6IDAgfTtcblxuICAgIGxldCBvcmllbnRhdGlvbkNsYXNzID0gYCR7bmFtZX1faG9yaXpvbnRhbGA7XG4gICAgaWYgKG9yaWVudGF0aW9uKSB7XG4gICAgICBvcmllbnRhdGlvbkNsYXNzID0gYCR7bmFtZX1fJHtvcmllbnRhdGlvbn1gO1xuICAgIH1cbiAgICB0aGlzLmNvbnRyb2wuY2xhc3NMaXN0LmFkZChgJHtuYW1lfWAsIG9yaWVudGF0aW9uQ2xhc3MpO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0L7RhdGA0LDQvdGP0LXRgiDQv9C+0LfQuNGG0LjRjiDQutGD0YDRgdC+0YDQsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0LvQtdCy0L7Qs9C+INC4INCy0LXRgNGF0L3QtdCz0L4g0LrRgNCw0Y8g0YDQvtC00LjRgtC10LvRjNGB0LrQvtCz0L4g0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICogQHBhcmFtIHtJUG9zaXRpb259IGN1cnNvclBvc2l0aW9uIC0g0L7QsdGK0LXQutGCINGBINC/0L7Qt9C40YbQuNC10Lkg0LrRg9GA0YHQvtGA0LBcbiAgICog0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INC70LXQstC+0LPQviDQuCDQstC10YDRhdC90LXQs9C+INC60YDQsNGPINGN0LrRgNCw0L3QsFxuICAgKi9cbiAgcHJvdGVjdGVkIHNldFBvc2l0aW9uKGN1cnNvclBvc2l0aW9uOiBJUG9zaXRpb24pOiB2b2lkIHtcbiAgICBjb25zdCBwb3NpdGlvbkluc2lkZVBhcmVudCA9IHtcbiAgICAgIGxlZnQ6IGN1cnNvclBvc2l0aW9uLmxlZnQsXG4gICAgICB0b3A6IGN1cnNvclBvc2l0aW9uLnRvcCxcbiAgICB9O1xuXG4gICAgY29uc3QgcGFyZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSB0aGlzLmNvbnRyb2wucGFyZW50RWxlbWVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGNvbnN0IHBhcmVudENvb3JkczogRE9NUmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHBvc2l0aW9uSW5zaWRlUGFyZW50LmxlZnQgLT0gcGFyZW50Q29vcmRzLmxlZnQ7XG4gICAgICBwb3NpdGlvbkluc2lkZVBhcmVudC50b3AgLT0gcGFyZW50Q29vcmRzLnRvcDtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IHBvc2l0aW9uSW5zaWRlUGFyZW50O1xuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0L7RgdC70LXQtNC90Y7RjiDRgdC+0YXRgNCw0L3RkdC90L3Rg9GOINC/0L7Qt9C40YbQuNGOINC60YPRgNGB0L7RgNCwXG4gICAqIEByZXR1cm5zIHtJQ3Vyc29yUG9zaXRpb259IC0g0L7QsdGK0LXQutGCINGBINC/0L7Qt9C40YbQuNC10Lkg0LrRg9GA0YHQvtGA0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+XG4gICAqINC70LXQstC+0LPQviDQuCDQstC10YDRhdC90LXQs9C+INC60YDQsNGPINGA0L7QtNC40YLQtdC70YzRgdC60L7Qs9C+INC60L7QvdGC0LXQudC90LXRgNCwXG4gICAqL1xuICBnZXRQb3NpdGlvbigpOiBJUG9zaXRpb24ge1xuICAgIHJldHVybiB0aGlzLmxhc3RQb3NpdGlvbjtcbiAgfVxuXG4gIGdldENvbnRyb2woKTogSFRNTERpdkVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2w7XG4gIH1cblxuICBnZXRTaXplKCk6IElTaXplIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHRoaXMuY29udHJvbC5vZmZzZXRXaWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5jb250cm9sLm9mZnNldEhlaWdodCxcbiAgICB9O1xuICB9XG5cbiAgc3dpdGNoVG9Ib3Jpem9udGFsKCk6IHZvaWQge1xuICAgIGNvbnN0IG1haW5DbGFzcyA9IHRoaXMuY29udHJvbC5jbGFzc0xpc3RbMF07XG4gICAgdGhpcy5jb250cm9sLmNsYXNzTGlzdC5yZW1vdmUoYCR7bWFpbkNsYXNzfV92ZXJ0aWNhbGApO1xuICAgIHRoaXMuY29udHJvbC5jbGFzc0xpc3QuYWRkKGAke21haW5DbGFzc31faG9yaXpvbnRhbGApO1xuICB9XG5cbiAgc3dpdGNoVG9WZXJ0aWNhbCgpOiB2b2lkIHtcbiAgICBjb25zdCBtYWluQ2xhc3MgPSB0aGlzLmNvbnRyb2wuY2xhc3NMaXN0WzBdO1xuICAgIHRoaXMuY29udHJvbC5jbGFzc0xpc3QucmVtb3ZlKGAke21haW5DbGFzc31faG9yaXpvbnRhbGApO1xuICAgIHRoaXMuY29udHJvbC5jbGFzc0xpc3QuYWRkKGAke21haW5DbGFzc31fdmVydGljYWxgKTtcbiAgfVxuXG4gIHJlbW92ZSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wucmVtb3ZlKCk7XG4gIH1cblxuICBnZXRPcmllbnRhdGlvbigpOiBzdHJpbmcge1xuICAgIGNvbnN0IG1haW5DbGFzcyA9IHRoaXMuY29udHJvbC5jbGFzc0xpc3RbMF07XG4gICAgY29uc3QgY2xhc3NXaXRoT3JpZW50YXRpb24gPSB0aGlzLmNvbnRyb2wuY2xhc3NMaXN0WzFdO1xuICAgIHJldHVybiBjbGFzc1dpdGhPcmllbnRhdGlvbi5yZXBsYWNlKGAke21haW5DbGFzc31fYCwgJycpO1xuICB9XG5cbiAgZ2V0UmVjdCgpOiBET01SZWN0IHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC30L3QsNGH0LXQvdC40LUg0LfQsNC/0YDQsNGI0LjQstCw0LXQvNC+0LPQviDRgdGC0LjQu9GPXG4gICAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9IC0g0LfQvdCw0YfQtdC90LjQtSDQt9Cw0L/RgNCw0YjQuNCy0LDQtdC80L7Qs9C+INGB0YLQuNC70Y9cbiAgICovXG4gIGdldFN0eWxlKHN0eWxlTmFtZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgID8uZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmNvbnRyb2wsIG51bGwpXG4gICAgICAuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZU5hbWUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVJQ29udHJvbDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGZ1bmN0aW9uLXBhcmVuLW5ld2xpbmUgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcGxpY2l0LWFycm93LWxpbmVicmVhayAqL1xuLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG5cbmltcG9ydCB7IElTdWJqZWN0LCBJT2JzZXJ2ZXJzTGlzdCwgSU9ic2VydmVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbi8qKlxuICog0KDQtdCw0LvQuNC30LDRhtC40Y8g0YHRg9Cx0YrQtdC60YLQsCwg0L7Qv9C+0LLQtdGJ0LDRjtGJ0LXQs9C+INC/0L7QtNC/0LjRgdCw0L3QvdGL0YUg0L3QsCDQvdC10LPQviDQvdCw0LHQu9GO0LTQsNGC0LXQu9C10LlcbiAqINC+INC90LDRgdGC0YPQv9C70LXQvdC40Lgg0L7Qv9GA0LXQtNC10LvRkdC90L3QvtCz0L4g0YHQvtCx0YvRgtC40Y8uXG4gKiDQmtC70LDRgdGBINGP0LLQu9GP0LXRgtGB0Y8g0YfQsNGB0YLRjNGOINC/0LDRgtGC0LXRgNC90LAgJ9C90LDQsdC70Y7QtNCw0YLQtdC70YwnINC4INGB0L7Qt9C00LDQvSDRgSDRhtC10LvRjNGOINC+0YHQu9Cw0LHQu9C10L3QuNGPINGB0LLRj9C30LXQuVxuICog0LzQtdC20LTRgyBNb2RlbCwgVmlldyDQuCBDb250cm9sbGVyXG4gKi9cbmNsYXNzIFN1YmplY3QgaW1wbGVtZW50cyBJU3ViamVjdCB7XG4gIHByaXZhdGUgb2JzZXJ2ZXJzOiBJT2JzZXJ2ZXJzTGlzdDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9ic2VydmVycyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqINCg0LXQs9C40YHRgtGA0LDRhtC40Y8g0L3QvtCy0L7Qs9C+INC90LDQsdC70Y7QtNCw0YLQtdC70Y8sINC/0L7QtNC/0LjRgdCw0L3QvdC+0LPQviDQvdCwINGB0L7QsdGL0YLQuNC1IGV2ZW50VHlwZVxuICAgKiBAcGFyYW0ge0lPYnNlcnZlcn0gb2JzZXJ2ZXIgLSDRgNC10LPQuNGB0YLRgNC40YDRg9C10LzRi9C5INC90LDQsdC70Y7QtNCw0YLQtdC70YxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSAtINGC0LjQvyDRgdC+0LHRi9GC0LjRjywg0L/RgNC4INC90LDRgdGC0YPQv9C70LXQvdC40Lgg0LrQvtGC0L7RgNC+0LPQviDQsdGD0LTQtdGCINC/0YDQvtC40YHRhdC+0LTQuNGC0Ywg0L7Qv9C+0LLQtdGJ0LXQvdC40LVcbiAgICog0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90L3Ri9GFINC90LDQsdC70Y7QtNCw0YLQtdC70LXQuVxuICAgKi9cbiAgcmVnaXN0ZXIoZXZlbnRUeXBlOiBzdHJpbmcsIG9ic2VydmVyOiBJT2JzZXJ2ZXIpOiB2b2lkIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9ic2VydmVycywgZXZlbnRUeXBlKSkge1xuICAgICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRUeXBlXSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVyc1tldmVudFR5cGVdLnB1c2gob2JzZXJ2ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqINCj0LTQsNC70LXQvdC40LUg0L3QsNCx0LvRjtC00LDRgtC10LvRjywg0L/QvtC00L/QuNGB0LDQvdC90L7Qs9C+INC90LAg0YHQvtCx0YvRgtC40LUgZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7SU9ic2VydmVyfSBvYnNlcnZlciAtINGD0LTQsNC70Y/QtdC80YvQuSDQvdCw0LHQu9GO0LTQsNGC0LXQu9GMXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSDRgtC40L8g0YHQvtCx0YvRgtC40Y8sINC90LAg0LrQvtGC0L7RgNC+0LUg0L/QvtC00L/QuNGB0LDQvSDRg9C00LDQu9GP0LXQvNGL0Lkg0L3QsNCx0LvRjtC00LDRgtC10LvRjFxuICAgKi9cbiAgdW5zdWJzY3JpYmUoZXZlbnRUeXBlOiBzdHJpbmcsIG9ic2VydmVyOiBJT2JzZXJ2ZXIpOiB2b2lkIHtcbiAgICB0aGlzLm9ic2VydmVyc1tldmVudFR5cGVdID0gdGhpcy5vYnNlcnZlcnNbZXZlbnRUeXBlXS5maWx0ZXIoXG4gICAgICAocmVnaXN0ZXJlZE9ic2VydmVyKSA9PiByZWdpc3RlcmVkT2JzZXJ2ZXIgIT09IG9ic2VydmVyXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntC/0L7QstC10YnQtdC90LjQtSDQvdCw0LHQu9GO0LTQsNGC0LXQu9C10LksINC/0L7QtNC/0LjRgdCw0L3QvdGL0YUg0L3QsCDRgdC+0LHRi9GC0LjQtSBldmVudFR5cGUg0L4g0LXQs9C+INC90LDRgdGC0YPQv9C70LXQvdC40LhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSAtINGC0LjQvyDRgdC+0LHRi9GC0LjRjywg0L/RgNC4INC90LDRgdGC0YPQv9C70LXQvdC40Lgg0LrQvtGC0L7RgNC+0LPQvlxuICAgKiDQsdGD0LTRg9GCINC+0L/QvtCy0LXRidC10L3RiyDQv9C+0LTQv9C40YHQsNC90L3Ri9C1INC90LAg0L3QtdCz0L4g0L3QsNCx0LvRjtC00LDRgtC10LvQuFxuICAgKi9cbiAgbm90aWZ5KGV2ZW50VHlwZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9ic2VydmVycywgZXZlbnRUeXBlKSkge1xuICAgICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRUeXBlXS5mb3JFYWNoKChyZWdpc3RlcmVkT2JzZXJ2ZXIpID0+XG4gICAgICAgIHJlZ2lzdGVyZWRPYnNlcnZlci51cGRhdGUoZXZlbnRUeXBlKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3ViamVjdDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGZ1bmN0aW9uLXBhcmVuLW5ld2xpbmUgKi9cbi8qIGVzbGludC1kaXNhYmxlIG9wZXJhdG9yLWxpbmVicmVhayAqL1xuLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG5cbmltcG9ydCB7XG4gIElTaW1wbGVTbGlkZXJNb2RlbCxcbiAgSVNpemUsXG4gIElUaHVtYnNQb3NpdGlvbnMsXG4gIElQb3NpdGlvbixcbiAgSVNsaWRlclNldHRpbmdzLFxuICBJUHJvZ3Jlc3NCYXJQYXJhbXMsXG4gIElQb3BVcHMsXG4gIElTY2FsZVBvaW50UGFyYW1zLFxuICBJVGh1bWJzVmFsdWVzLFxuICBJU3ViamVjdCxcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgU3ViamVjdCBmcm9tICcuLi9zdWJqZWN0L3N1YmplY3QnO1xuXG5jbGFzcyBTaW1wbGVTbGlkZXJNb2RlbCBpbXBsZW1lbnRzIElTaW1wbGVTbGlkZXJNb2RlbCB7XG4gIHN1YmplY3Q6IElTdWJqZWN0O1xuICBwcml2YXRlIG9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnO1xuICBwcml2YXRlIHR5cGUgPSAncmFuZ2UnO1xuICBwcml2YXRlIHNjYWxlID0gdHJ1ZTtcbiAgcHJpdmF0ZSBwb3BVcHMgPSB0cnVlO1xuICBwcml2YXRlIG1pbiA9IDA7XG4gIHByaXZhdGUgbWF4ID0gMTA7XG4gIHByaXZhdGUgc3RlcCA9IDE7XG4gIHByaXZhdGUgdGh1bWJPbmVWYWx1ZSA9IDM7XG4gIHByaXZhdGUgdGh1bWJUd29WYWx1ZSA9IDc7XG4gIHByaXZhdGUgc2xpZGVyU2l6ZSA9IHsgd2lkdGg6IDUwMCwgaGVpZ2h0OiAxMCB9O1xuICBwcml2YXRlIHRodW1iU2l6ZSA9IHsgd2lkdGg6IDIwLCBoZWlnaHQ6IDEwIH07XG4gIHByaXZhdGUgc2NhbGVQb2ludFNpemUgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcblxuICBjb25zdHJ1Y3RvcihzZXR0aW5nczogSVNsaWRlclNldHRpbmdzKSB7XG4gICAgdGhpcy5zdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgICB0aGlzLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC70L3QvtGB0YLRjNGOINC+0LHQvdC+0LLQu9GP0LXRgiDRgdC+0YHRgtC+0Y/QvdC40LUg0LzQvtC00LXQu9C4INCyINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjQuCDRgSDQv9C+0LvRg9GH0LXQvdC90YvQvCDQvtCx0YrQtdC60YLQvtC8XG4gICAqIEBwYXJhbSBzZXR0aW5ncyAtINC+0LHRitC10LrRgiDRgSDQvdCw0YHRgtGA0L7QudC60LDQvNC4INC80L7QtNC10LvQuFxuICAgKi9cbiAgcmVmcmVzaFNsaWRlclN0YXRlKHNldHRpbmdzOiBJU2xpZGVyU2V0dGluZ3MpOiB2b2lkIHtcbiAgICBpZiAoc2V0dGluZ3Muc2xpZGVyU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNsaWRlclNpemUgPSBzZXR0aW5ncy5zbGlkZXJTaXplO1xuICAgIH1cbiAgICBpZiAoc2V0dGluZ3MudGh1bWJTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudGh1bWJTaXplID0gc2V0dGluZ3MudGh1bWJTaXplO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcmllbnRhdGlvbiAhPT0gc2V0dGluZ3Mub3JpZW50YXRpb24pIHtcbiAgICAgIHRoaXMub3JpZW50YXRpb24gPSBzZXR0aW5ncy5vcmllbnRhdGlvbjtcbiAgICAgIHRoaXMuc3ViamVjdC5ub3RpZnkoJ29yaWVudGF0aW9uSXNVcGRhdGVkJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnR5cGUgIT09IHNldHRpbmdzLnR5cGUpIHtcbiAgICAgIHRoaXMudHlwZSA9IHNldHRpbmdzLnR5cGU7XG4gICAgICBpZiAodGhpcy5yYW5nZVZhbHVlc0lzQ29ycmVjdCgpKSB7XG4gICAgICAgIHRoaXMudGh1bWJUd29WYWx1ZSA9IHRoaXMudGh1bWJPbmVWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3ViamVjdC5ub3RpZnkoJ3R5cGVJc1VwZGF0ZWQnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubWluICE9PSBzZXR0aW5ncy5taW4pIHtcbiAgICAgIHRoaXMudXBkYXRlTWluVmFsdWUoc2V0dGluZ3MubWluKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubWF4ICE9PSBzZXR0aW5ncy5tYXgpIHtcbiAgICAgIHRoaXMudXBkYXRlTWF4VmFsdWUoc2V0dGluZ3MubWF4KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RlcCAhPT0gc2V0dGluZ3Muc3RlcCkge1xuICAgICAgdGhpcy51cGRhdGVTdGVwKHNldHRpbmdzLnN0ZXApO1xuICAgIH1cbiAgICBpZiAodGhpcy5zY2FsZSAhPT0gc2V0dGluZ3Muc2NhbGUpIHtcbiAgICAgIHRoaXMuc2NhbGUgPSBzZXR0aW5ncy5zY2FsZTtcbiAgICAgIHRoaXMuc3ViamVjdC5ub3RpZnkoJ3NjYWxlU3RhdGVJc1VwZGF0ZWQnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucG9wVXBzICE9PSBzZXR0aW5ncy5wb3BVcHMpIHtcbiAgICAgIHRoaXMucG9wVXBzID0gc2V0dGluZ3MucG9wVXBzO1xuICAgICAgdGhpcy5zdWJqZWN0Lm5vdGlmeSgncG9wVXBzU3RhdGVJc1VwZGF0ZWQnKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy50aHVtYk9uZVZhbHVlICE9PSBzZXR0aW5ncy50aHVtYk9uZVZhbHVlIHx8XG4gICAgICB0aGlzLnRodW1iVHdvVmFsdWUgIT09IHNldHRpbmdzLnRodW1iVHdvVmFsdWVcbiAgICApIHtcbiAgICAgIHRoaXMuc2V0VGh1bWJzVmFsdWVzKHtcbiAgICAgICAgdGh1bWJPbmU6IHNldHRpbmdzLnRodW1iT25lVmFsdWUsXG4gICAgICAgIHRodW1iVHdvOiBzZXR0aW5ncy50aHVtYlR3b1ZhbHVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC40YHRgtC40L3Rgywg0LXRgdC70Lgg0YLQuNC/INGB0LvQsNC50LTQtdGA0LAgLSDQtNC40LDQv9Cw0LfQvtC9INC4INC30L3QsNGH0LXQvdC40LUg0LLRgtC+0YDQvtCz0L5cbiAgICog0LHQtdCz0YPQvdC60LAg0LzQtdC90YzRiNC1INC30L3QsNGH0LXQvdC40Y8g0L/QtdGA0LLQvtCz0L5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0g0YDQtdC30YPQu9GM0YLQsNGCINCy0YvRh9C40YHQu9C10L3QuNGPINC70L7Qs9C40YfQtdGB0LrQvtCz0L4g0LLRi9GA0LDQttC10L3QuNGPXG4gICAqL1xuICBwcml2YXRlIHJhbmdlVmFsdWVzSXNDb3JyZWN0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09ICdyYW5nZScgJiYgdGhpcy50aHVtYlR3b1ZhbHVlIDwgdGhpcy50aHVtYk9uZVZhbHVlO1xuICB9XG5cbiAgdXBkYXRlVGh1bWJzU3RhdGUocG9zaXRpb25zOiBJVGh1bWJzUG9zaXRpb25zKTogdm9pZCB7XG4gICAgbGV0IHRodW1iT25lVmFsdWUgPSB0aGlzLnZhbHVlV2l0aFN0ZXAoXG4gICAgICB0aGlzLnBvc2l0aW9uQnlPcmllbnRhdGlvbihwb3NpdGlvbnMudGh1bWJPbmUpXG4gICAgKTtcbiAgICBsZXQgdGh1bWJUd29WYWx1ZTogbnVsbCB8IG51bWJlciA9IG51bGw7XG5cbiAgICBpZiAocG9zaXRpb25zLnRodW1iVHdvKSB7XG4gICAgICB0aHVtYlR3b1ZhbHVlID0gdGhpcy52YWx1ZVdpdGhTdGVwKFxuICAgICAgICB0aGlzLnBvc2l0aW9uQnlPcmllbnRhdGlvbihwb3NpdGlvbnMudGh1bWJUd28pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aHVtYlR3b1ZhbHVlICYmIHRodW1iT25lVmFsdWUgPiB0aHVtYlR3b1ZhbHVlKSB7XG4gICAgICB0aGlzLnN1YmplY3Qubm90aWZ5KCd0aHVtYnNTd2FwcGVkJyk7XG4gICAgICBbdGh1bWJPbmVWYWx1ZSwgdGh1bWJUd29WYWx1ZV0gPSBbdGh1bWJUd29WYWx1ZSwgdGh1bWJPbmVWYWx1ZV07XG4gICAgfVxuXG4gICAgdGhpcy50aHVtYk9uZVZhbHVlID0gdGh1bWJPbmVWYWx1ZTtcbiAgICBpZiAodGh1bWJUd29WYWx1ZSkge1xuICAgICAgdGhpcy50aHVtYlR3b1ZhbHVlID0gdGh1bWJUd29WYWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnN1YmplY3Qubm90aWZ5KCd0aHVtYnNQb3NpdGlvbnNJc1VwZGF0ZWQnKTtcbiAgfVxuXG4gIHNldFNsaWRlclNpemUoc2l6ZTogSVNpemUpOiB2b2lkIHtcbiAgICB0aGlzLnNsaWRlclNpemUgPSBTaW1wbGVTbGlkZXJNb2RlbC5nZXRDb3JyZWN0U2l6ZShzaXplLCAwKTtcbiAgfVxuXG4gIHNldFRodW1iU2l6ZShzaXplOiBJU2l6ZSk6IHZvaWQge1xuICAgIHRoaXMudGh1bWJTaXplID0gU2ltcGxlU2xpZGVyTW9kZWwuZ2V0Q29ycmVjdFNpemUoc2l6ZSwgMCk7XG4gIH1cblxuICBzZXRUaHVtYnNWYWx1ZXModGh1bWJzOiBJVGh1bWJzVmFsdWVzKTogdm9pZCB7XG4gICAgY29uc3QgdGh1bWJPbmVQb3NpdGlvbiA9IHRoaXMudGh1bWJWYWx1ZVRvUG9zaXRpb24odGh1bWJzLnRodW1iT25lKTtcbiAgICBsZXQgdGh1bWJUd29Qb3NpdGlvbiA9IG51bGw7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ3JhbmdlJykge1xuICAgICAgdGh1bWJUd29Qb3NpdGlvbiA9IHRoaXMudGh1bWJWYWx1ZVRvUG9zaXRpb24odGh1bWJzLnRodW1iVHdvKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVUaHVtYnNTdGF0ZSh7XG4gICAgICB0aHVtYk9uZTogdGh1bWJPbmVQb3NpdGlvbixcbiAgICAgIHRodW1iVHdvOiB0aHVtYlR3b1Bvc2l0aW9uLFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0TWluKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubWluO1xuICB9XG5cbiAgZ2V0TWF4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubWF4O1xuICB9XG5cbiAgZ2V0U3RlcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnN0ZXA7XG4gIH1cblxuICBnZXRTY2FsZVN0YXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnNjYWxlO1xuICB9XG5cbiAgZ2V0UG9wVXBzU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucG9wVXBzO1xuICB9XG5cbiAgZ2V0VHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnR5cGU7XG4gIH1cblxuICBnZXRPcmllbnRhdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uO1xuICB9XG5cbiAgZ2V0UHJvZ3Jlc3NCYXJQYXJhbXMoKTogSVByb2dyZXNzQmFyUGFyYW1zIHtcbiAgICBjb25zdCB0aHVtYk9uZVBvc2l0aW9uID0gdGhpcy50aHVtYlZhbHVlVG9Qb3NpdGlvbih0aGlzLnRodW1iT25lVmFsdWUpO1xuICAgIGNvbnN0IHRodW1iVHdvUG9zaXRpb24gPSB0aGlzLnRodW1iVmFsdWVUb1Bvc2l0aW9uKHRoaXMudGh1bWJUd29WYWx1ZSk7XG4gICAgY29uc3Qgc2l6ZSA9IHsgLi4udGhpcy5zbGlkZXJTaXplIH07XG4gICAgY29uc3QgcG9zaXRpb24gPSB7IGxlZnQ6IDAsIHRvcDogMCB9O1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IDA7XG5cbiAgICBpZiAodGhpcy50eXBlID09PSAnc2luZ2xlJykge1xuICAgICAgZW5kID1cbiAgICAgICAgdGhpcy5wb3NpdGlvbkJ5T3JpZW50YXRpb24odGh1bWJPbmVQb3NpdGlvbikgK1xuICAgICAgICB0aGlzLnNpemVCeU9yaWVudGF0aW9uKHRoaXMudGh1bWJTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSB0aGlzLnBvc2l0aW9uQnlPcmllbnRhdGlvbih0aHVtYk9uZVBvc2l0aW9uKTtcbiAgICAgIGVuZCA9XG4gICAgICAgIHRoaXMucG9zaXRpb25CeU9yaWVudGF0aW9uKHRodW1iVHdvUG9zaXRpb24pIC1cbiAgICAgICAgdGhpcy5wb3NpdGlvbkJ5T3JpZW50YXRpb24odGh1bWJPbmVQb3NpdGlvbikgK1xuICAgICAgICB0aGlzLnNpemVCeU9yaWVudGF0aW9uKHRoaXMudGh1bWJTaXplKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICBwb3NpdGlvbi5sZWZ0ID0gc3RhcnQ7XG4gICAgICBzaXplLndpZHRoID0gZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3NpdGlvbi50b3AgPSBzdGFydDtcbiAgICAgIHNpemUuaGVpZ2h0ID0gZW5kO1xuICAgIH1cblxuICAgIHJldHVybiB7IHBvc2l0aW9uLCBzaXplIH07XG4gIH1cblxuICBnZXRUaHVtYnNQb3NpdGlvbnMoKTogSVRodW1ic1Bvc2l0aW9ucyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRodW1iT25lOiB0aGlzLnRodW1iVmFsdWVUb1Bvc2l0aW9uKHRoaXMudGh1bWJPbmVWYWx1ZSksXG4gICAgICB0aHVtYlR3bzogdGhpcy50aHVtYlZhbHVlVG9Qb3NpdGlvbih0aGlzLnRodW1iVHdvVmFsdWUpLFxuICAgIH07XG4gIH1cblxuICBnZXRQb3BVcHNQYXJhbXMoKTogSVBvcFVwcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcFVwT25lOiB7XG4gICAgICAgIHZhbHVlOiB0aGlzLnRodW1iT25lVmFsdWUsXG4gICAgICAgIHBvc2l0aW9uOiB0aGlzLmdldFBvcFVwUG9zaXRpb24oXG4gICAgICAgICAgdGhpcy50aHVtYlZhbHVlVG9Qb3NpdGlvbih0aGlzLnRodW1iT25lVmFsdWUpXG4gICAgICAgICksXG4gICAgICB9LFxuICAgICAgcG9wVXBUd286IHtcbiAgICAgICAgdmFsdWU6IHRoaXMudGh1bWJUd29WYWx1ZSxcbiAgICAgICAgcG9zaXRpb246IHRoaXMuZ2V0UG9wVXBQb3NpdGlvbihcbiAgICAgICAgICB0aGlzLnRodW1iVmFsdWVUb1Bvc2l0aW9uKHRoaXMudGh1bWJUd29WYWx1ZSlcbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIGdldFRodW1ic1ZhbHVlcygpOiBJVGh1bWJzVmFsdWVzIHtcbiAgICByZXR1cm4geyB0aHVtYk9uZTogdGhpcy50aHVtYk9uZVZhbHVlLCB0aHVtYlR3bzogdGhpcy50aHVtYlR3b1ZhbHVlIH07XG4gIH1cblxuICBnZXRTY2FsZVBvaW50cygpOiBJU2NhbGVQb2ludFBhcmFtc1tdIHtcbiAgICBjb25zdCBzY2FsZVBvaW50cyA9IFtdO1xuICAgIGNvbnN0IHN0ZXBzQ291bnQgPSB0aGlzLmdldFN0ZXBzQ291bnQoKTtcbiAgICBjb25zdCBzdGVwU2l6ZTogbnVtYmVyID0gdGhpcy5nZXRTdGVwU2l6ZSgpO1xuICAgIGNvbnN0IHNjYWxlUG9pbnRzQ291bnQgPSBzdGVwc0NvdW50ICsgMTtcbiAgICBsZXQgcHJldmlvdXNQb2ludFBvc2l0aW9uID0gMDtcblxuICAgIGxldCBjdXJyZW50UG9pbnRQb3NpdGlvbiA9XG4gICAgICB0aGlzLnNpemVCeU9yaWVudGF0aW9uKHRoaXMudGh1bWJTaXplKSAvIDIgLVxuICAgICAgdGhpcy5zaXplQnlPcmllbnRhdGlvbih0aGlzLnNjYWxlUG9pbnRTaXplKSAvIDI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBNYXRoLnJvdW5kKHNjYWxlUG9pbnRzQ291bnQgLSAxKTsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjdXJyZW50UG9pbnRWYWx1ZSA9IHRoaXMudGh1bWJQb3NpdGlvblRvVmFsdWUoXG4gICAgICAgIGN1cnJlbnRQb2ludFBvc2l0aW9uIC1cbiAgICAgICAgICB0aGlzLnNpemVCeU9yaWVudGF0aW9uKHRoaXMudGh1bWJTaXplKSAvIDIgK1xuICAgICAgICAgIHRoaXMuc2l6ZUJ5T3JpZW50YXRpb24odGhpcy5zY2FsZVBvaW50U2l6ZSkgLyAyXG4gICAgICApO1xuXG4gICAgICBjdXJyZW50UG9pbnRQb3NpdGlvbiA9IHRoaXMuZ2V0Q29ycmVjdFBvaW50UG9zaXRpb24oY3VycmVudFBvaW50UG9zaXRpb24pO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGkgPT09IDAgfHxcbiAgICAgICAgdGhpcy5wb2ludHNEb05vdEludGVyc2VjdChjdXJyZW50UG9pbnRQb3NpdGlvbiwgcHJldmlvdXNQb2ludFBvc2l0aW9uKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGZ1bGxQb2ludFBvc2l0aW9uID0geyBsZWZ0OiAwLCB0b3A6IDAgfTtcbiAgICAgICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGZ1bGxQb2ludFBvc2l0aW9uLmxlZnQgPSBjdXJyZW50UG9pbnRQb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmdWxsUG9pbnRQb3NpdGlvbi50b3AgPSBjdXJyZW50UG9pbnRQb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlUG9pbnRzLnB1c2goe1xuICAgICAgICAgIHBvc2l0aW9uOiBmdWxsUG9pbnRQb3NpdGlvbixcbiAgICAgICAgICBzaXplOiB0aGlzLnNjYWxlUG9pbnRTaXplLFxuICAgICAgICAgIHZhbHVlOiBjdXJyZW50UG9pbnRWYWx1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcHJldmlvdXNQb2ludFBvc2l0aW9uID0gY3VycmVudFBvaW50UG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRQb2ludFBvc2l0aW9uICs9IHN0ZXBTaXplO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGVQb2ludHM7XG4gIH1cblxuICBzZXRTY2FsZVBvaW50U2l6ZShzaXplOiBJU2l6ZSk6IHZvaWQge1xuICAgIHRoaXMuc2NhbGVQb2ludFNpemUgPSBzaXplO1xuICB9XG5cbiAgLyoqXG4gICAqINCf0LXRgNC10YHRh9C40YLRi9Cy0LDQtdGCINC30L3QsNGH0LXQvdC40LUg0YjQsNCz0LAuINCV0YHQu9C4INGC0LXQutGD0YnQtdC1INC30L3QsNGH0LXQvdC40LUg0YjQsNCz0LAg0LHQvtC70YzRiNC1INC80LDQutGB0LjQvNCw0LvRjNC90L4t0LTQvtC/0YPRgdGC0LjQvNC+0LPQvlxuICAgKiDQutC+0LvQuNGH0LXRgdGC0LLQsCDRiNCw0LPQvtCyINCyINGB0LvQsNC50LTQtdGA0LUsINGC0L4g0L7QvdC+INC/0YDQuNGA0LDQstC90LjQstCw0LXRgtGB0Y8g0Log0LzQsNC60YHQuNC80LDQu9GM0L3Qvi3QtNC+0L/Rg9GB0YLQuNC80L7QvNGDINC60L7Qu9C40YfQtdGB0YLQstGDINGI0LDQs9C+0LJcbiAgICovXG4gIHJlY2FsY3VsYXRlU3RlcCgpOiB2b2lkIHtcbiAgICBjb25zdCBzdGVwc0NvdW50ID0gdGhpcy5tYXggLSB0aGlzLm1pbjtcbiAgICB0aGlzLnN0ZXAgPSB0aGlzLnN0ZXAgPiBzdGVwc0NvdW50ID8gc3RlcHNDb3VudCA6IHRoaXMuc3RlcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9GA0L7QstC10YDRj9C10YIg0L/QvtC80LXRidCw0LXRgtGB0Y8g0LvQuCDRgtC+0YfQutCwINC90LAg0YjQutCw0LvQtSDQsdC10Lcg0L/QtdGA0LXRgdC10YfQtdC90LjRjyDRgSDQtNGA0YPQs9C40LzQuCDRgtC+0YfQutCw0LzQuCwg0LXRgdC70Lgg0L3QtdGCLCDRgtC+INC+0L3QsFxuICAgKiDQvdC1INC00L7QsdCw0LLQu9GP0LXRgtGB0Y8g0L3QsCDRiNC60LDQu9GDXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50UG9zaXRpb24gLSDRgtC10LrRg9GJ0LDRjyDQv9C+0LfQuNGG0LjRjyDRgtC+0YfQutC4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmV2aW91c1Bvc2l0aW9uIC0g0L/QvtC30LjRhtC40Y8g0L/RgNC10LTRi9C00YPRidC10Lkg0YLQvtGH0LrQuFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSDRgNC10LfRg9C70YzRgtCw0YIg0LvQvtCz0LjRh9C10YHQutC+0LPQviDQstGL0YDQsNC20LXQvdC40Y9cbiAgICovXG4gIHByaXZhdGUgcG9pbnRzRG9Ob3RJbnRlcnNlY3QoXG4gICAgY3VycmVudFBvc2l0aW9uOiBudW1iZXIsXG4gICAgcHJldmlvdXNQb3NpdGlvbjogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBjdXJyZW50UG9zaXRpb24gLSBwcmV2aW91c1Bvc2l0aW9uID5cbiAgICAgIHRoaXMuc2l6ZUJ5T3JpZW50YXRpb24odGhpcy5zY2FsZVBvaW50U2l6ZSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0L7RhdGA0LDQvdGP0LXRgiDQt9C90LDRh9C10L3QuNC1INCx0LXQs9GD0L3QutCwLCDQsdC70LjQttCw0LnRiNC10LPQviDQuiDQvNC10YHRgtGDINC60LvQuNC60LAg0L/QviDRiNC60LDQu9C1LCDQu9C40LHQviDRgtGA0LXQutGDXG4gICAqIEBwYXJhbSB7SVBvc2l0aW9ufSBjbGlja1Bvc2l0aW9uIC0g0L7QsdGK0LXQutGCINGBINC/0L7Qt9C40YbQuNC10Lkg0LrQu9C40LrQsFxuICAgKi9cbiAgc2V0VGh1bWJQb3NpdGlvbk9uQ2xpY2tQb3NpdGlvbihjbGlja1Bvc2l0aW9uOiBJUG9zaXRpb24pOiB2b2lkIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHtcbiAgICAgIGxlZnQ6IGNsaWNrUG9zaXRpb24ubGVmdCAtIHRoaXMudGh1bWJTaXplLndpZHRoIC8gMixcbiAgICAgIHRvcDogY2xpY2tQb3NpdGlvbi50b3AgLSB0aGlzLnRodW1iU2l6ZS5oZWlnaHQgLyAyLFxuICAgIH07XG4gICAgbGV0IHRodW1iT25lID0gdGhpcy50aHVtYk9uZVZhbHVlO1xuICAgIGxldCB0aHVtYlR3byA9IHRoaXMudGh1bWJUd29WYWx1ZTtcblxuICAgIGlmICh0aGlzLnRodW1iVHdvSXNOZWFyVG9DbGljayhwb3NpdGlvbikpIHtcbiAgICAgIHRodW1iVHdvID0gdGhpcy50aHVtYlBvc2l0aW9uVG9WYWx1ZShcbiAgICAgICAgdGhpcy5wb3NpdGlvbkJ5T3JpZW50YXRpb24ocG9zaXRpb24pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHVtYk9uZSA9IHRoaXMudGh1bWJQb3NpdGlvblRvVmFsdWUoXG4gICAgICAgIHRoaXMucG9zaXRpb25CeU9yaWVudGF0aW9uKHBvc2l0aW9uKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFRodW1ic1ZhbHVlcyh7IHRodW1iT25lLCB0aHVtYlR3byB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktGL0YfQuNGB0LvRj9C10YIsINC90LDRhdC+0LTQuNGC0YHRjyDQu9C4INCy0YLQvtGA0L7QuSDQsdC10LPRg9C90L7QuiDQsdC70LjQttC1INC6INC80LXRgdGC0YMg0LrQu9C40LrQsCDQv9C+INGI0LrQsNC70LUg0LjQu9C4INGC0YDQtdC60YNcbiAgICogQHBhcmFtIHtJUG9zaXRpb259IHBvc2l0aW9uIC0g0L7QsdGK0LXQutGCINGBINC/0L7Qt9C40YbQuNC10Lkg0LrQu9C40LrQsFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSDQt9C90LDRh9C10L3QuNC1INC/0L7QutCw0LfRi9Cy0LDRjtGJ0LXQtSDQuNGB0YLQuNC90L3QvtGB0YLRjCDRgtC+0LPQviwg0YfRgtC+INCy0YLQvtGA0L7QuSDQsdC10LPRg9C90L7QuiDQvdCw0YXQvtC00LjRgtGB0Y8g0LHQu9C40LbQtVxuICAgKiDQuiDQvNC10YHRgtGDINC60LvQuNC60LAsINGH0LXQvCDQv9C10YDQstGL0LlcbiAgICovXG4gIHByaXZhdGUgdGh1bWJUd29Jc05lYXJUb0NsaWNrKHBvc2l0aW9uOiBJUG9zaXRpb24pOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy50eXBlID09PSAncmFuZ2UnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBNYXRoLmFicyhcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uQnlPcmllbnRhdGlvbihwb3NpdGlvbikgLVxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkJ5T3JpZW50YXRpb24oXG4gICAgICAgICAgICAgIHRoaXMudGh1bWJWYWx1ZVRvUG9zaXRpb24odGhpcy50aHVtYlR3b1ZhbHVlKVxuICAgICAgICAgICAgKVxuICAgICAgICApIDxcbiAgICAgICAgTWF0aC5hYnMoXG4gICAgICAgICAgdGhpcy5wb3NpdGlvbkJ5T3JpZW50YXRpb24ocG9zaXRpb24pIC1cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25CeU9yaWVudGF0aW9uKFxuICAgICAgICAgICAgICB0aGlzLnRodW1iVmFsdWVUb1Bvc2l0aW9uKHRoaXMudGh1bWJPbmVWYWx1ZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog0JLQvtC30LLRgNCw0YnQsNC10YIg0LrQvtGA0YDQtdC60YLQvdGL0Lkg0YDQsNC30LzQtdGAINCyINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjQuCDRgSDQt9Cw0LTQsNC90L3Ri9C8INC80LjQvdC40LzRg9C80L7QvFxuICAgKiBAcGFyYW0ge0lTaXplfSBzaXplIC0g0L7QsdGK0LXQutGCINGBINGI0LjRgNC40L3QvtC5INC4INCy0YvRgdC+0YLQvtC5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gLSDQvNC40L3QuNC80LDQu9GM0L3QvtC1INC30L3QsNGH0LXQvdC40LUg0YjQuNGA0LjQvdGLINC4INCy0YvRgdC+0YLRi1xuICAgKiBAcmV0dXJucyB7SVNpemV9IC0g0L7QsdGK0LXQutGCINGBINC60L7RgNGA0LXQutGC0L3Ri9C80Lgg0YDQsNC30LzQtdGA0LDQvNC4XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBnZXRDb3JyZWN0U2l6ZShzaXplOiBJU2l6ZSwgbWluOiBudW1iZXIpOiBJU2l6ZSB7XG4gICAgY29uc3Qgd2lkdGggPSBzaXplLndpZHRoID49IG1pbiA/IHNpemUud2lkdGggOiBtaW47XG4gICAgY29uc3QgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQgPj0gbWluID8gc2l6ZS5oZWlnaHQgOiBtaW47XG4gICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQb3BVcFBvc2l0aW9uKHRodW1iUG9zaXRpb246IElQb3NpdGlvbik6IElQb3NpdGlvbiB7XG4gICAgbGV0IGxlZnQgPSAwO1xuICAgIGxldCB0b3AgPSAwO1xuXG4gICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgbGVmdCA9IHRodW1iUG9zaXRpb24ubGVmdCArIHRoaXMudGh1bWJTaXplLndpZHRoIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gdGh1bWJQb3NpdGlvbi50b3AgKyB0aGlzLnRodW1iU2l6ZS5oZWlnaHQgLyAyO1xuICAgIH1cblxuICAgIHJldHVybiB7IGxlZnQsIHRvcCB9O1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVNaW5WYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5taW4gPSB2YWx1ZSA8IHRoaXMubWF4ID8gdmFsdWUgOiB0aGlzLm1pbjtcbiAgICB0aGlzLnN1YmplY3Qubm90aWZ5KCdtaW5Jc1VwZGF0ZWQnKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTWF4VmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubWF4ID0gdmFsdWUgPiB0aGlzLm1pbiA/IHZhbHVlIDogdGhpcy5tYXg7XG4gICAgdGhpcy5zdWJqZWN0Lm5vdGlmeSgnbWF4SXNVcGRhdGVkJyk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVN0ZXAodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHN0ZXBzQ291bnQgPSB0aGlzLm1heCAtIHRoaXMubWluO1xuICAgIHRoaXMuc3RlcCA9IHZhbHVlID4gMCAmJiB2YWx1ZSA8PSBzdGVwc0NvdW50ID8gdmFsdWUgOiB0aGlzLnN0ZXA7XG4gICAgdGhpcy5zdWJqZWN0Lm5vdGlmeSgnc3RlcElzVXBkYXRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LXQvdC40LUg0LfQvdCw0YfQtdC90LjQtSDQsdC10LPRg9C90LrQsCDQsiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YEg0LfQsNC00LDQvdC90YvQvCDRiNCw0LPQvtC8INC40YHRhdC+0LTRjyDQuNC3XG4gICAqINC10LPQviDQv9C+0LfQuNGG0LjQuFxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gLSDQv9C+0LfQuNGG0LjRjyDQsdC10LPRg9C90LrQsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0LvQtdCy0L7Qs9C+INC40LvQuCDQstC10YDRhdC90LXQs9C+XG4gICAqINC60YDQsNGPINGA0L7QtNC40YLQtdC70YzRgdC60L7Qs9C+INC60L7QvdGC0LXQudC90LXRgNCwXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IC0g0LfQvdCw0YfQtdC90LjQtSDQsdC10LPRg9C90LrQsCDQsiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YEg0LfQsNC00LDQvdC90YvQvCDRiNCw0LPQvtC8XG4gICAqL1xuICBwcml2YXRlIHZhbHVlV2l0aFN0ZXAocG9zaXRpb246IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMudGh1bWJQb3NpdGlvblRvVmFsdWUocG9zaXRpb24pID49IHRoaXMubWF4KSB7XG4gICAgICByZXR1cm4gdGhpcy50aHVtYlBvc2l0aW9uVG9WYWx1ZShwb3NpdGlvbik7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RlcFNpemUgPSB0aGlzLmdldFN0ZXBTaXplKCk7XG4gICAgY29uc3QgbmV3UG9zaXRpb24gPSBNYXRoLnJvdW5kKHBvc2l0aW9uIC8gc3RlcFNpemUpICogc3RlcFNpemU7XG5cbiAgICByZXR1cm4gdGhpcy50aHVtYlBvc2l0aW9uVG9WYWx1ZShuZXdQb3NpdGlvbik7XG4gIH1cblxuICBwcml2YXRlIGdldFN0ZXBzQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gdGhpcy5zdGVwO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTdGVwU2l6ZSgpOiBudW1iZXIge1xuICAgIGNvbnN0IHN0ZXBzQ291bnQgPSB0aGlzLmdldFN0ZXBzQ291bnQoKTtcbiAgICByZXR1cm4gKFxuICAgICAgKHRoaXMuc2l6ZUJ5T3JpZW50YXRpb24odGhpcy5zbGlkZXJTaXplKSAtXG4gICAgICAgIHRoaXMuc2l6ZUJ5T3JpZW50YXRpb24odGhpcy50aHVtYlNpemUpKSAvXG4gICAgICBzdGVwc0NvdW50XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktC+0LfQstGA0LDRidC10L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LHQtdCz0YPQvdC60LAg0LjRgdGF0L7QtNGPINC40Lcg0LXQs9C+INC/0L7Qt9C40YbQuNC4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvbiAtINC/0L7Qt9C40YbQuNGPINCx0LXQs9GD0L3QutCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQu9C10LLQvtCz0L4g0LjQu9C4INCy0LXRgNGF0L3QtdCz0L5cbiAgICog0LrRgNCw0Y8g0YDQvtC00LjRgtC10LvRjNGB0LrQvtCz0L4g0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICogQHJldHVybnMge251bWJlcn0gLSDQt9C90LDRh9C10L3QuNC1INCx0LXQs9GD0L3QutCwXG4gICAqL1xuICBwcml2YXRlIHRodW1iUG9zaXRpb25Ub1ZhbHVlKHBvc2l0aW9uOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHBpeGVsc1BlclZhbHVlID0gdGhpcy5nZXRQeFBlclZhbHVlKCk7XG5cbiAgICBsZXQgbmV3VmFsdWUgPSBNYXRoLnJvdW5kKFxuICAgICAgdGhpcy5taW4gK1xuICAgICAgICAoKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gdGhpcy5tYXgpICogKHBvc2l0aW9uIC8gcGl4ZWxzUGVyVmFsdWUpXG4gICAgKTtcblxuICAgIG5ld1ZhbHVlID0gbmV3VmFsdWUgPCB0aGlzLm1pbiA/IHRoaXMubWluIDogbmV3VmFsdWU7XG4gICAgbmV3VmFsdWUgPSBuZXdWYWx1ZSA+IHRoaXMubWF4ID8gdGhpcy5tYXggOiBuZXdWYWx1ZTtcblxuICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktC+0LfQstGA0LDRidC10L3QuNC1INC/0L7Qt9C40YbQuNC4INCx0LXQs9GD0L3QutCwINC40YHRhdC+0LTRjyDQuNC3INC10LPQviDQt9C90LDRh9C10L3QuNGPXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtINC30L3QsNGH0LXQvdC40LUg0LHQtdCz0YPQvdC60LBcbiAgICogQHJldHVybnMge0lUaHVtYlBvc2l0aW9ufSAtINC+0LHRitC10LrRgiDRgSDQv9C+0LfQuNGG0LjQtdC5INCx0LXQs9GD0L3QutCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQu9C10LLQvtCz0L4g0Lgg0LLQtdGA0YXQvdC10LPQviDQutGA0LDRj1xuICAgKiDRgNC+0LTQuNGC0LXQu9GM0YHQutC+0LPQviDQutC+0L3RgtC10LnQvdC10YDQsFxuICAgKi9cbiAgcHJpdmF0ZSB0aHVtYlZhbHVlVG9Qb3NpdGlvbih2YWx1ZTogbnVtYmVyKTogSVBvc2l0aW9uIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHsgbGVmdDogMCwgdG9wOiAwIH07XG4gICAgY29uc3QgcHhQZXJWYWwgPSB0aGlzLmdldFB4UGVyVmFsdWUoKTtcbiAgICBsZXQgdGh1bWJWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKHRodW1iVmFsdWUgPCB0aGlzLm1pbikge1xuICAgICAgdGh1bWJWYWx1ZSA9IHRoaXMubWluO1xuICAgIH0gZWxzZSBpZiAodGh1bWJWYWx1ZSA+IHRoaXMubWF4KSB7XG4gICAgICB0aHVtYlZhbHVlID0gdGhpcy5tYXg7XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb25WYWx1ZSA9XG4gICAgICAoKHRodW1iVmFsdWUgLSB0aGlzLm1pbikgLyAodGhpcy5tYXggLSB0aGlzLm1pbikpICogcHhQZXJWYWwgKiB0aGlzLm1heDtcblxuICAgIGlmICh0aGlzLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIHBvc2l0aW9uLmxlZnQgPSBwb3NpdGlvblZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3NpdGlvbi50b3AgPSBwb3NpdGlvblZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktC+0LfQstGA0LDRidCw0LXRgiDQutC+0LvQuNGH0LXRgdGC0LLQviDQv9C40LrRgdC10LvQtdC5INCyINC10LTQuNC90LjRhtC1INGI0LjRgNC40L3RiyDRgdC70LDQudC00LXRgNCwLCDRgSDQstGL0YfQtdGC0L7QvCDQutGA0LDQudC90LjRhSDQt9C+0L1cbiAgICogQHJldHVybnMge251bWJlcn0gLSDQutC+0LvQuNGH0LXRgdGC0LLQviDQv9C40LrRgdC10LvQtdC5INCyINC10LTQuNC90LjRhtC1INGI0LjRgNC40L3RiyDRgdC70LDQudC00LXRgNCwXG4gICAqL1xuICBwcml2YXRlIGdldFB4UGVyVmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKFxuICAgICAgKHRoaXMuc2l6ZUJ5T3JpZW50YXRpb24odGhpcy5zbGlkZXJTaXplKSAtXG4gICAgICAgIHRoaXMuc2l6ZUJ5T3JpZW50YXRpb24odGhpcy50aHVtYlNpemUpKSAvXG4gICAgICB0aGlzLm1heFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog0JLQvtC30LLRgNCw0YnQtdC90LjQtSDRiNC40YDQuNC90Ysg0LjQu9C4INCy0YvRgdC+0YLRiyDQvtCx0YrQtdC60YLQsCwg0LIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINC+0YDQuNC10L3RgtCw0YbQuNC4INGB0LvQsNC50LTQtdGA0LBcbiAgICogQHBhcmFtIHtJU2l6ZX0gc2l6ZSAtINC+0LHRitC10LrRgiDRgSDRiNC40YDQuNC90L7QuSDQuCDQstGL0YHQvtGC0L7QuSDQvtCx0YrQtdC60YLQsFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtINC30L3QsNGH0LXQvdC40LUg0YjQuNGA0LjQvdGLINC40LvQuCDQstGL0YHQvtGC0Ysg0L7QsdGK0LXQutGC0LBcbiAgICovXG4gIHByaXZhdGUgc2l6ZUJ5T3JpZW50YXRpb24oc2l6ZTogSVNpemUpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIHJldHVybiBzaXplLndpZHRoO1xuICAgIH1cblxuICAgIHJldHVybiBzaXplLmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktC+0LfQstGA0LDRidC10L3QuNC1INC70LXQstC+0LPQviDQuNC70Lgg0LLQtdGA0YXQvdC10LPQviDQvtGC0YHRgtGD0L/QsCDQvtCx0YrQtdC60YLQsCwg0LIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINC+0YDQuNC10L3RgtCw0YbQuNC4INGB0LvQsNC50LTQtdGA0LBcbiAgICogQHBhcmFtIHtJUG9zaXRpb259IHBvc2l0aW9uIC0g0L7QsdGK0LXQutGCINGBINC/0L7Qt9C40YbQuNC10LlcbiAgICogQHJldHVybnMge251bWJlcn0gLSDQt9C90LDRh9C10L3QuNC1INC70LXQstC+0LPQviDQuNC70Lgg0LLQtdGA0YXQvdC10LPQviDQvtGC0YHRgtGD0L/QsCDQvtCx0YrQtdC60YLQsFxuICAgKi9cbiAgcHJpdmF0ZSBwb3NpdGlvbkJ5T3JpZW50YXRpb24ocG9zaXRpb246IElQb3NpdGlvbik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgcmV0dXJuIHBvc2l0aW9uLmxlZnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uLnRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntGC0YHQu9C10LbQuNCy0LDQtdGCINC/0L7Qt9C40YbQuNGOINC00LXQu9C10L3QuNGPLCDQvdC1INC00LDQstCw0Y8g0LXQvNGDINCy0YvQudGC0Lgg0LfQsCDQv9GA0LXQtNC10LvRiyDRiNC60LDQu9GLXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvbiAtINC/0L7Qt9C40YbQuNGPINC00LXQu9C10L3QuNGPINGI0LrQsNC70YtcbiAgICogQHJldHVybnMge251bWJlcn0gLSDQv9C+0LfQuNGG0LjRjyDRgdC70LXQtNGD0Y7RidC10LPQviDQtNC10LvQtdC90LjRj1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRDb3JyZWN0UG9pbnRQb3NpdGlvbihwb3NpdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBleHRyZW1lUG9zaXRpb24gPVxuICAgICAgdGhpcy5zaXplQnlPcmllbnRhdGlvbih0aGlzLnNsaWRlclNpemUpIC1cbiAgICAgIHRoaXMuc2l6ZUJ5T3JpZW50YXRpb24odGhpcy50aHVtYlNpemUpIC8gMiAtXG4gICAgICB0aGlzLnNpemVCeU9yaWVudGF0aW9uKHRoaXMuc2NhbGVQb2ludFNpemUpIC8gMjtcblxuICAgIGlmIChwb3NpdGlvbiA+IGV4dHJlbWVQb3NpdGlvbikge1xuICAgICAgcG9zaXRpb24gPSBleHRyZW1lUG9zaXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXBsZVNsaWRlck1vZGVsO1xuIiwiLyogZXNsaW50LWRpc2FibGUgb3BlcmF0b3ItbGluZWJyZWFrICovXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1kYW5nbGUgKi9cblxuaW1wb3J0IHtcbiAgSU9ic2VydmVyLFxuICBJUG9wVXBzLFxuICBJUG9zaXRpb24sXG4gIElQcm9ncmVzc0JhclBhcmFtcyxcbiAgSVNjYWxlUG9pbnRQYXJhbXMsXG4gIElTaW1wbGVTbGlkZXJWaWV3LFxuICBJU2l6ZSxcbiAgSVNsaWRlck1hcmdpbnMsXG4gIElTdWJqZWN0LFxuICBJU3ViamVjdEV2ZW50cyxcbiAgSVRodW1ic1Bvc2l0aW9ucyxcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbmltcG9ydCBTbGlkZXIgZnJvbSAnLi9zbGlkZXIvc2xpZGVyJztcbmltcG9ydCBUcmFjayBmcm9tICcuL3RyYWNrL3RyYWNrJztcbmltcG9ydCBUaHVtYiBmcm9tICcuL3RodW1iL3RodW1iJztcbmltcG9ydCBQb3BVcCBmcm9tICcuL3BvcC11cC9wb3AtdXAnO1xuaW1wb3J0IFByb2dyZXNzQmFyIGZyb20gJy4vcHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWJhcic7XG5pbXBvcnQgU2NhbGUgZnJvbSAnLi9zY2FsZS9zY2FsZSc7XG5pbXBvcnQgU3ViamVjdCBmcm9tICcuLi9zdWJqZWN0L3N1YmplY3QnO1xuXG5jbGFzcyBTaW1wbGVTbGlkZXJWaWV3IGltcGxlbWVudHMgSVNpbXBsZVNsaWRlclZpZXcsIElPYnNlcnZlciB7XG4gIHN1YmplY3Q6IElTdWJqZWN0O1xuICBwcml2YXRlIHNsaWRlcjogU2xpZGVyO1xuICBwcml2YXRlIHNsaWRlcldyYXBwZXI6IEhUTUxEaXZFbGVtZW50O1xuICBwcml2YXRlIHRyYWNrOiBUcmFjaztcbiAgcHJpdmF0ZSB0aHVtYk9uZTogVGh1bWI7XG4gIHByaXZhdGUgdGh1bWJUd286IFRodW1iIHwgbnVsbDtcbiAgcHJpdmF0ZSBwb3BVcE9uZTogUG9wVXAgfCBudWxsO1xuICBwcml2YXRlIHBvcFVwVHdvOiBQb3BVcCB8IG51bGw7XG4gIHByaXZhdGUgcHJvZ3Jlc3NCYXI6IFByb2dyZXNzQmFyO1xuICBwcml2YXRlIHNjYWxlOiBTY2FsZSB8IG51bGw7XG5cbiAgcHJpdmF0ZSBldmVudHM6IElTdWJqZWN0RXZlbnRzID0ge1xuICAgIHRodW1iSXNEcmFnZ2VkOiAoKSA9PiB0aGlzLnN1YmplY3Qubm90aWZ5KCd0aHVtYklzRHJhZ2dlZCcpLFxuICAgIHRodW1iSXNDYXRjaGVkOiAoKSA9PiB7XG4gICAgICB0aGlzLnRodW1iT25lLnJlc2V0WkluZGV4KCk7XG4gICAgICB0aGlzLnRodW1iVHdvPy5yZXNldFpJbmRleCgpO1xuICAgIH0sXG4gICAgY2xpY2tUb1RyYWNrOiAoKSA9PiB0aGlzLnN1YmplY3Qubm90aWZ5KCdjbGlja1RvVHJhY2snKSxcbiAgICBjbGlja1RvU2NhbGU6ICgpID0+IHRoaXMuc3ViamVjdC5ub3RpZnkoJ2NsaWNrVG9TY2FsZScpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHdyYXBwZXI6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgdGhpcy5zdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgICB0aGlzLnNsaWRlcldyYXBwZXIgPSB3cmFwcGVyO1xuXG4gICAgdGhpcy5zbGlkZXIgPSBuZXcgU2xpZGVyKCk7XG4gICAgdGhpcy50cmFjayA9IG5ldyBUcmFjaygpO1xuICAgIHRoaXMudGh1bWJPbmUgPSBuZXcgVGh1bWIoKTtcbiAgICB0aGlzLnRodW1iVHdvID0gbmV3IFRodW1iKCk7XG4gICAgdGhpcy5wb3BVcE9uZSA9IG5ldyBQb3BVcCgpO1xuICAgIHRoaXMucG9wVXBUd28gPSBuZXcgUG9wVXAoKTtcbiAgICB0aGlzLnByb2dyZXNzQmFyID0gbmV3IFByb2dyZXNzQmFyKCk7XG4gICAgdGhpcy5zY2FsZSA9IG5ldyBTY2FsZSgpO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBwcml2YXRlIGluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVUb0V2ZW50cygpO1xuICAgIHRoaXMuYXNzZW1ibGVTbGlkZXIoKTtcblxuICAgIHRoaXMuaGFuZGxlV2luZG93UmVzaXplID0gdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUuYmluZCh0aGlzKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVXaW5kb3dSZXNpemUoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJqZWN0Lm5vdGlmeSgnd2luZG93UmVzaXplZCcpO1xuICB9XG5cbiAgc3Vic2NyaWJlVG9FdmVudHMoKTogdm9pZCB7XG4gICAgdGhpcy50aHVtYk9uZS5zdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYklzRHJhZ2dlZCcsIHRoaXMpO1xuICAgIHRoaXMudGh1bWJUd28/LnN1YmplY3QucmVnaXN0ZXIoJ3RodW1iSXNEcmFnZ2VkJywgdGhpcyk7XG4gICAgdGhpcy50aHVtYk9uZS5zdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYklzQ2F0Y2hlZCcsIHRoaXMpO1xuICAgIHRoaXMudGh1bWJUd28/LnN1YmplY3QucmVnaXN0ZXIoJ3RodW1iSXNDYXRjaGVkJywgdGhpcyk7XG4gICAgdGhpcy50cmFjay5zdWJqZWN0LnJlZ2lzdGVyKCdjbGlja1RvVHJhY2snLCB0aGlzKTtcbiAgICB0aGlzLnNjYWxlPy5zdWJqZWN0LnJlZ2lzdGVyKCdjbGlja1RvU2NhbGUnLCB0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgYXNzZW1ibGVTbGlkZXIoKTogdm9pZCB7XG4gICAgdGhpcy5zbGlkZXIuYXBwZW5kKHRoaXMudHJhY2suZ2V0Q29udHJvbCgpKTtcbiAgICB0aGlzLnNsaWRlci5hcHBlbmQodGhpcy50aHVtYk9uZS5nZXRDb250cm9sKCkpO1xuICAgIGlmICh0aGlzLnRodW1iVHdvKSB7XG4gICAgICB0aGlzLnNsaWRlci5hcHBlbmQodGhpcy50aHVtYlR3by5nZXRDb250cm9sKCkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wb3BVcE9uZSkge1xuICAgICAgdGhpcy5zbGlkZXIuYXBwZW5kKHRoaXMucG9wVXBPbmUuZ2V0Q29udHJvbCgpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucG9wVXBUd28pIHtcbiAgICAgIHRoaXMuc2xpZGVyLmFwcGVuZCh0aGlzLnBvcFVwVHdvLmdldENvbnRyb2woKSk7XG4gICAgfVxuICAgIHRoaXMuc2xpZGVyLmFwcGVuZCh0aGlzLnByb2dyZXNzQmFyLmdldENvbnRyb2woKSk7XG4gICAgaWYgKHRoaXMuc2NhbGUpIHtcbiAgICAgIHRoaXMuc2xpZGVyLmFwcGVuZCh0aGlzLnNjYWxlLmdldENvbnRyb2woKSk7XG4gICAgfVxuXG4gICAgdGhpcy5zbGlkZXJXcmFwcGVyLmFwcGVuZCh0aGlzLnNsaWRlci5nZXRDb250cm9sKCkpO1xuICB9XG5cbiAgdXBkYXRlKGV2ZW50VHlwZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50VHlwZSBpbiB0aGlzLmV2ZW50cykge1xuICAgICAgdGhpcy5ldmVudHNbZXZlbnRUeXBlXSgpO1xuICAgIH1cbiAgfVxuXG4gIHN3YXBUaHVtYnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGh1bWJUd28pIHtcbiAgICAgIFt0aGlzLnRodW1iT25lLCB0aGlzLnRodW1iVHdvXSA9IFt0aGlzLnRodW1iVHdvLCB0aGlzLnRodW1iT25lXTtcbiAgICB9XG4gIH1cblxuICBzd2l0Y2hUb0hvcml6b250YWwoKTogdm9pZCB7XG4gICAgdGhpcy5zbGlkZXIucmVzZXRNYXJnaW5zKCk7XG4gICAgdGhpcy5zbGlkZXIuc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gICAgdGhpcy50cmFjay5zd2l0Y2hUb0hvcml6b250YWwoKTtcbiAgICB0aGlzLnRodW1iT25lLnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIHRoaXMudGh1bWJUd28/LnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIHRoaXMucG9wVXBPbmU/LnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIHRoaXMucG9wVXBUd28/LnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gICAgdGhpcy5zY2FsZT8uc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gIH1cblxuICBzd2l0Y2hUb1ZlcnRpY2FsKCk6IHZvaWQge1xuICAgIHRoaXMuc2xpZGVyLnJlc2V0TWFyZ2lucygpO1xuICAgIHRoaXMuc2xpZGVyLnN3aXRjaFRvVmVydGljYWwoKTtcbiAgICB0aGlzLnRyYWNrLnN3aXRjaFRvVmVydGljYWwoKTtcbiAgICB0aGlzLnRodW1iT25lLnN3aXRjaFRvVmVydGljYWwoKTtcbiAgICB0aGlzLnRodW1iVHdvPy5zd2l0Y2hUb1ZlcnRpY2FsKCk7XG4gICAgdGhpcy5wb3BVcE9uZT8uc3dpdGNoVG9WZXJ0aWNhbCgpO1xuICAgIHRoaXMucG9wVXBUd28/LnN3aXRjaFRvVmVydGljYWwoKTtcbiAgICB0aGlzLnByb2dyZXNzQmFyLnN3aXRjaFRvVmVydGljYWwoKTtcbiAgICB0aGlzLnNjYWxlPy5zd2l0Y2hUb1ZlcnRpY2FsKCk7XG4gIH1cblxuICBzd2l0Y2hUb1NpbmdsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnRodW1iVHdvPy5zdWJqZWN0LnVuc3Vic2NyaWJlKCd0aHVtYklzQ2F0Y2hlZCcsIHRoaXMpO1xuICAgIHRoaXMudGh1bWJUd28/LnN1YmplY3QudW5zdWJzY3JpYmUoJ3RodW1iSXNDYXRjaGVkJywgdGhpcyk7XG5cbiAgICB0aGlzLnRodW1iVHdvPy5yZW1vdmUoKTtcbiAgICB0aGlzLnRodW1iVHdvID0gbnVsbDtcbiAgICB0aGlzLnBvcFVwVHdvPy5yZW1vdmUoKTtcbiAgICB0aGlzLnBvcFVwVHdvID0gbnVsbDtcbiAgfVxuXG4gIHN3aXRjaFRvUmFuZ2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGh1bWJUd28gPT09IG51bGwpIHtcbiAgICAgIHRoaXMudGh1bWJUd28gPSBuZXcgVGh1bWIodGhpcy5zbGlkZXIuZ2V0T3JpZW50YXRpb24oKSk7XG4gICAgICB0aGlzLnNsaWRlci5hcHBlbmQodGhpcy50aHVtYlR3by5nZXRDb250cm9sKCkpO1xuXG4gICAgICBpZiAodGhpcy5wb3BVcE9uZSkge1xuICAgICAgICB0aGlzLnBvcFVwVHdvID0gbmV3IFBvcFVwKHRoaXMuc2xpZGVyLmdldE9yaWVudGF0aW9uKCkpO1xuICAgICAgICB0aGlzLnNsaWRlci5hcHBlbmQodGhpcy5wb3BVcFR3by5nZXRDb250cm9sKCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRodW1iVHdvLnN1YmplY3QucmVnaXN0ZXIoJ3RodW1iSXNEcmFnZ2VkJywgdGhpcyk7XG4gICAgICB0aGlzLnRodW1iVHdvLnN1YmplY3QucmVnaXN0ZXIoJ3RodW1iSXNDYXRjaGVkJywgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZGlzYWJsZVBvcFVwcygpOiB2b2lkIHtcbiAgICB0aGlzLnBvcFVwT25lPy5yZW1vdmUoKTtcbiAgICB0aGlzLnBvcFVwT25lID0gbnVsbDtcbiAgICB0aGlzLnBvcFVwVHdvPy5yZW1vdmUoKTtcbiAgICB0aGlzLnBvcFVwVHdvID0gbnVsbDtcblxuICAgIHRoaXMuc2xpZGVyLnNldE1hcmdpbnModGhpcy5nZXRNYXJnaW5zKCkpO1xuICB9XG5cbiAgZW5hYmxlUG9wVXBzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnBvcFVwT25lID09PSBudWxsKSB7XG4gICAgICB0aGlzLnBvcFVwT25lID0gbmV3IFBvcFVwKHRoaXMuc2xpZGVyLmdldE9yaWVudGF0aW9uKCkpO1xuICAgICAgdGhpcy5zbGlkZXIuYXBwZW5kKHRoaXMucG9wVXBPbmUuZ2V0Q29udHJvbCgpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aHVtYlR3b0lzV2l0aG91dFBvcHVwKCkpIHtcbiAgICAgIHRoaXMucG9wVXBUd28gPSBuZXcgUG9wVXAodGhpcy5zbGlkZXIuZ2V0T3JpZW50YXRpb24oKSk7XG4gICAgICB0aGlzLnNsaWRlci5hcHBlbmQodGhpcy5wb3BVcFR3by5nZXRDb250cm9sKCkpO1xuICAgIH1cblxuICAgIHRoaXMuc2xpZGVyLnNldE1hcmdpbnModGhpcy5nZXRNYXJnaW5zKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC40YHRgtC40L3Rgywg0LXRgdC70Lgg0LLRgdC/0LvRi9Cy0LDRjtGJ0LDRjyDQv9C+0LTRgdC60LDQt9C60LAg0L3QsNC0INCy0YLQvtGA0YvQvCDQsdC10LPRg9C90LrQvtC8INGA0LDQstC90LAgbnVsbCxcbiAgICog0L3QviDRgdCw0Lwg0LLRgtC+0YDQvtC5INCx0LXQs9GD0L3QvtC6INC90LUg0YDQsNCy0LXQvSBudWxsXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtINGA0LXQt9GD0LvRjNGC0LDRgiDQstGL0YfQuNGB0LvQtdC90LjRjyDQu9C+0LPQuNGH0LXRgdC60L7Qs9C+INCy0YvRgNCw0LbQtdC90LjRj1xuICAgKi9cbiAgcHJpdmF0ZSB0aHVtYlR3b0lzV2l0aG91dFBvcHVwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBvcFVwVHdvID09PSBudWxsICYmIHRoaXMudGh1bWJUd28gIT09IG51bGw7XG4gIH1cblxuICBkaXNhYmxlU2NhbGUoKTogdm9pZCB7XG4gICAgdGhpcy5zY2FsZT8uc3ViamVjdC51bnN1YnNjcmliZSgnY2xpY2tUb1NjYWxlJywgdGhpcyk7XG4gICAgdGhpcy5zY2FsZT8ucmVtb3ZlKCk7XG4gICAgdGhpcy5zY2FsZSA9IG51bGw7XG5cbiAgICB0aGlzLnNsaWRlci5zZXRNYXJnaW5zKHRoaXMuZ2V0TWFyZ2lucygpKTtcbiAgfVxuXG4gIGVuYWJsZVNjYWxlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNjYWxlKSB7XG4gICAgICB0aGlzLnNjYWxlPy5yZW1vdmUoKTtcbiAgICB9XG4gICAgdGhpcy5zY2FsZSA9IG5ldyBTY2FsZSh0aGlzLnNsaWRlci5nZXRPcmllbnRhdGlvbigpKTtcbiAgICB0aGlzLnNsaWRlci5hcHBlbmQodGhpcy5zY2FsZS5nZXRDb250cm9sKCkpO1xuICAgIHRoaXMuc2NhbGUuc3ViamVjdC5yZWdpc3RlcignY2xpY2tUb1NjYWxlJywgdGhpcyk7XG5cbiAgICB0aGlzLnNsaWRlci5zZXRNYXJnaW5zKHRoaXMuZ2V0TWFyZ2lucygpKTtcbiAgfVxuXG4gIGdldFRodW1iU2l6ZSgpOiBJU2l6ZSB7XG4gICAgcmV0dXJuIHRoaXMudGh1bWJPbmUuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgZ2V0U2xpZGVyU2l6ZSgpOiBJU2l6ZSB7XG4gICAgcmV0dXJuIHRoaXMuc2xpZGVyLmdldFNpemUoKTtcbiAgfVxuXG4gIGdldFRodW1ic1Bvc2l0aW9ucygpOiBJVGh1bWJzUG9zaXRpb25zIHtcbiAgICBjb25zdCB0aHVtYk9uZSA9IHRoaXMudGh1bWJPbmUuZ2V0UG9zaXRpb24oKTtcbiAgICBsZXQgdGh1bWJUd286IElQb3NpdGlvbiB8IG51bGwgPSBudWxsO1xuICAgIGlmICh0aGlzLnRodW1iVHdvKSB7XG4gICAgICB0aHVtYlR3byA9IHRoaXMudGh1bWJUd28uZ2V0UG9zaXRpb24oKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdGh1bWJPbmUsIHRodW1iVHdvIH07XG4gIH1cblxuICB1cGRhdGVUaHVtYnModGh1bWJzUG9zaXRpb25zOiBJVGh1bWJzUG9zaXRpb25zKTogdm9pZCB7XG4gICAgdGhpcy50aHVtYk9uZS5tb3ZlVG8odGh1bWJzUG9zaXRpb25zLnRodW1iT25lKTtcbiAgICBpZiAodGh1bWJzUG9zaXRpb25zLnRodW1iVHdvKSB7XG4gICAgICB0aGlzLnRodW1iVHdvPy5tb3ZlVG8odGh1bWJzUG9zaXRpb25zLnRodW1iVHdvKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVQcm9ncmVzc0JhcihwYXJhbXM6IElQcm9ncmVzc0JhclBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMucHJvZ3Jlc3NCYXIudXBkYXRlKHBhcmFtcyk7XG4gIH1cblxuICB1cGRhdGVQb3BVcHMocGFyYW1zOiBJUG9wVXBzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucG9wVXBPbmUpIHtcbiAgICAgIHRoaXMucG9wVXBPbmUudXBkYXRlKHBhcmFtcy5wb3BVcE9uZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnBvcFVwVHdvKSB7XG4gICAgICB0aGlzLnBvcFVwVHdvLnVwZGF0ZShwYXJhbXMucG9wVXBUd28pO1xuICAgIH1cbiAgfVxuXG4gIGdldFNjYWxlUG9pbnRTaXplKHZhbHVlOiBudW1iZXIpOiBJU2l6ZSB7XG4gICAgaWYgKHRoaXMuc2NhbGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjYWxlLmdldFBvaW50U2l6ZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbiAgfVxuXG4gIGFkZFNjYWxlUG9pbnRzKHBvaW50czogSVNjYWxlUG9pbnRQYXJhbXNbXSk6IHZvaWQge1xuICAgIHRoaXMuc2NhbGU/LmFkZFBvaW50cyhwb2ludHMpO1xuICAgIHRoaXMuc2xpZGVyLnNldE1hcmdpbnModGhpcy5nZXRNYXJnaW5zKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0L7Qt9C40YbQuNGOINC/0L7RgdC70LXQtNC90LXQs9C+INC60LvQuNC60LAg0L/QviDRgtGA0LXQutGDXG4gICAqIEByZXR1cm5zIHtJUG9zaXRpb259IC0g0L7QsdGK0LXQutGCINGBINC/0L7Qt9C40YbQuNC10Lkg0L/QvtGB0LvQtdC00L3QtdCz0L4g0LrQu9C40LrQsCDQv9C+INGC0YDQtdC60YNcbiAgICovXG4gIGdldFRyYWNrQ2xpY2tQb3NpdGlvbigpOiBJUG9zaXRpb24ge1xuICAgIHJldHVybiB0aGlzLnRyYWNrLmdldFBvc2l0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICog0JLQvtC30LLRgNCw0YnQsNC10YIg0L/QvtC30LjRhtC40Y4g0L/QvtGB0LvQtdC00L3QtdCz0L4g0LrQu9C40LrQsCDQv9C+INGI0LrQsNC70LVcbiAgICogQHJldHVybnMge0lQb3NpdGlvbn0gLSDQvtCx0YrQtdC60YIg0YEg0L/QvtC30LjRhtC40LXQuSDQv9C+0YHQu9C10LTQvdC10LPQviDQutC70LjQutCwINC/0L4g0YjQutCw0LvQtVxuICAgKi9cbiAgZ2V0U2NhbGVDbGlja1Bvc2l0aW9uKCk6IElQb3NpdGlvbiB7XG4gICAgY29uc3QgcG9zaXRpb24gPVxuICAgICAgdGhpcy5zY2FsZSA9PT0gbnVsbCA/IHsgbGVmdDogMCwgdG9wOiAwIH0gOiB0aGlzLnNjYWxlLmdldFBvc2l0aW9uKCk7XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC+0LHRitC10LrRgiDRgSDQvtGC0YHRgtGD0L/QsNC80Lgg0L7RgiDQu9C10LLQvtC5LCDQstC10YDRhdC90LXQuSwg0L/RgNCw0LLQvtC5INC4INC90LjQttC90LXQuSDQs9GA0LDQvdC40YYg0YHQu9Cw0LnQtNC10YDQsFxuICAgKiBAcmV0dXJucyB7SVNsaWRlck1hcmdpbnN9IC0g0L7QsdGK0LXQutGCINGBINC+0YLRgdGC0YPQv9Cw0LzQuCDQvtGCINC70LXQstC+0LksINCy0LXRgNGF0L3QtdC5LCDQv9GA0LDQstC+0LlcbiAgICog0Lgg0L3QuNC20L3QtdC5INCz0YDQsNC90LjRhiDRgdC70LDQudC00LXRgNCwXG4gICAqL1xuICBwcml2YXRlIGdldE1hcmdpbnMoKTogSVNsaWRlck1hcmdpbnMge1xuICAgIGNvbnN0IG1hcmdpbnMgPSB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgfTtcblxuICAgIGNvbnN0IHNsaWRlclJlY3QgPSB0aGlzLnNsaWRlci5nZXRSZWN0KCk7XG4gICAgY29uc3QgcG9wVXBSZWN0ID0gdGhpcy5wb3BVcE9uZSA/IHRoaXMucG9wVXBPbmUuZ2V0UmVjdCgpIDogbnVsbDtcbiAgICBjb25zdCBzY2FsZVJlY3QgPSB0aGlzLnNjYWxlID8gdGhpcy5zY2FsZS5nZXRSZWN0KCkgOiBudWxsO1xuXG4gICAgaWYgKHRoaXMuc2xpZGVyLmdldE9yaWVudGF0aW9uKCkgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgaWYgKHBvcFVwUmVjdCkge1xuICAgICAgICBtYXJnaW5zLnRvcCArPSBzbGlkZXJSZWN0LnRvcCAtIHBvcFVwUmVjdC50b3A7XG4gICAgICB9XG4gICAgICBpZiAoc2NhbGVSZWN0KSB7XG4gICAgICAgIG1hcmdpbnMuYm90dG9tICs9IHNjYWxlUmVjdC5ib3R0b20gLSBzbGlkZXJSZWN0LmJvdHRvbTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBvcFVwUmVjdCkge1xuICAgICAgICBtYXJnaW5zLmxlZnQgKz0gc2xpZGVyUmVjdC5sZWZ0IC0gcG9wVXBSZWN0LmxlZnQ7XG4gICAgICB9XG4gICAgICBpZiAoc2NhbGVSZWN0KSB7XG4gICAgICAgIG1hcmdpbnMucmlnaHQgKz0gc2NhbGVSZWN0LnJpZ2h0IC0gc2xpZGVyUmVjdC5yaWdodDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFyZ2lucztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW1wbGVTbGlkZXJWaWV3O1xuIiwiLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG5cbmltcG9ydCB7XG4gIElDb250cm9sbGVyUGFyYW1zLFxuICBJT2JzZXJ2ZXIsXG4gIElTaW1wbGVTbGlkZXJNb2RlbCxcbiAgSVNpbXBsZVNsaWRlclZpZXcsXG4gIElTdWJqZWN0LFxuICBJU3ViamVjdEV2ZW50cyxcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbmNsYXNzIFNpbXBsZVNsaWRlckNvbnRyb2xsZXIgaW1wbGVtZW50cyBJT2JzZXJ2ZXIge1xuICBwcml2YXRlIG1vZGVsOiBJU2ltcGxlU2xpZGVyTW9kZWw7XG4gIHByaXZhdGUgdmlldzogSVNpbXBsZVNsaWRlclZpZXc7XG4gIHByaXZhdGUgbW9kZWxTdWJqZWN0OiBJU3ViamVjdDtcbiAgcHJpdmF0ZSB2aWV3U3ViamVjdDogSVN1YmplY3Q7XG5cbiAgcHJpdmF0ZSBldmVudHM6IElTdWJqZWN0RXZlbnRzID0ge1xuICAgIHRodW1iSXNEcmFnZ2VkOiAoKSA9PiB7XG4gICAgICB0aGlzLm1vZGVsLnVwZGF0ZVRodW1ic1N0YXRlKHRoaXMudmlldy5nZXRUaHVtYnNQb3NpdGlvbnMoKSk7XG4gICAgfSxcbiAgICB0aHVtYnNQb3NpdGlvbnNJc1VwZGF0ZWQ6ICgpID0+IHRoaXMudXBkYXRlVGh1bWJzUG9zaXRpb25zKCksXG4gICAgbWluSXNVcGRhdGVkOiAoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgICAgIHRoaXMubW9kZWwucmVjYWxjdWxhdGVTdGVwKCk7XG4gICAgfSxcbiAgICBtYXhJc1VwZGF0ZWQ6ICgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgICAgdGhpcy5tb2RlbC5yZWNhbGN1bGF0ZVN0ZXAoKTtcbiAgICB9LFxuICAgIHN0ZXBJc1VwZGF0ZWQ6ICgpID0+IHRoaXMudXBkYXRlVmlldygpLFxuICAgIG9yaWVudGF0aW9uSXNVcGRhdGVkOiAoKSA9PiB0aGlzLnVwZGF0ZVNsaWRlck9yaWVudGF0aW9uKCksXG4gICAgdHlwZUlzVXBkYXRlZDogKCkgPT4gdGhpcy51cGRhdGVTbGlkZXJUeXBlKCksXG4gICAgc2NhbGVTdGF0ZUlzVXBkYXRlZDogKCkgPT4gdGhpcy51cGRhdGVTY2FsZVN0YXRlKCksXG4gICAgcG9wVXBzU3RhdGVJc1VwZGF0ZWQ6ICgpID0+IHRoaXMudXBkYXRlUG9wVXBzU3RhdGUoKSxcbiAgICBjbGlja1RvVHJhY2s6ICgpID0+IHtcbiAgICAgIHRoaXMubW9kZWwuc2V0VGh1bWJQb3NpdGlvbk9uQ2xpY2tQb3NpdGlvbihcbiAgICAgICAgdGhpcy52aWV3LmdldFRyYWNrQ2xpY2tQb3NpdGlvbigpXG4gICAgICApO1xuICAgIH0sXG4gICAgY2xpY2tUb1NjYWxlOiAoKSA9PiB7XG4gICAgICB0aGlzLm1vZGVsLnNldFRodW1iUG9zaXRpb25PbkNsaWNrUG9zaXRpb24oXG4gICAgICAgIHRoaXMudmlldy5nZXRTY2FsZUNsaWNrUG9zaXRpb24oKVxuICAgICAgKTtcbiAgICB9LFxuICAgIHRodW1ic1N3YXBwZWQ6ICgpID0+IHRoaXMudmlldy5zd2FwVGh1bWJzKCksXG4gICAgd2luZG93UmVzaXplZDogKCkgPT4gdGhpcy5pbml0KCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBJQ29udHJvbGxlclBhcmFtcykge1xuICAgIHRoaXMubW9kZWwgPSBwYXJhbXMubW9kZWw7XG4gICAgdGhpcy52aWV3ID0gcGFyYW1zLnZpZXc7XG4gICAgdGhpcy5tb2RlbFN1YmplY3QgPSB0aGlzLm1vZGVsLnN1YmplY3Q7XG4gICAgdGhpcy52aWV3U3ViamVjdCA9IHRoaXMudmlldy5zdWJqZWN0O1xuXG4gICAgdGhpcy5zdWJzY3JpYmVUb0V2ZW50cygpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1vZGVsLmdldE9yaWVudGF0aW9uKCkgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgdGhpcy52aWV3LnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuc3dpdGNoVG9WZXJ0aWNhbCgpO1xuICAgIH1cblxuICAgIHRoaXMubW9kZWwuc2V0U2xpZGVyU2l6ZSh0aGlzLnZpZXcuZ2V0U2xpZGVyU2l6ZSgpKTtcbiAgICB0aGlzLm1vZGVsLnNldFRodW1iU2l6ZSh0aGlzLnZpZXcuZ2V0VGh1bWJTaXplKCkpO1xuXG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0VHlwZSgpID09PSAnc2luZ2xlJykge1xuICAgICAgdGhpcy52aWV3LnN3aXRjaFRvU2luZ2xlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlldy5zd2l0Y2hUb1JhbmdlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0UG9wVXBzU3RhdGUoKSkge1xuICAgICAgdGhpcy52aWV3LmVuYWJsZVBvcFVwcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuZGlzYWJsZVBvcFVwcygpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlVmlldygpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb0V2ZW50cygpOiB2b2lkIHtcbiAgICB0aGlzLnZpZXdTdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYklzRHJhZ2dlZCcsIHRoaXMpO1xuICAgIHRoaXMubW9kZWxTdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYnNQb3NpdGlvbnNJc1VwZGF0ZWQnLCB0aGlzKTtcbiAgICB0aGlzLm1vZGVsU3ViamVjdC5yZWdpc3RlcignbWluSXNVcGRhdGVkJywgdGhpcyk7XG4gICAgdGhpcy5tb2RlbFN1YmplY3QucmVnaXN0ZXIoJ21heElzVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMubW9kZWxTdWJqZWN0LnJlZ2lzdGVyKCdzdGVwSXNVcGRhdGVkJywgdGhpcyk7XG4gICAgdGhpcy5tb2RlbFN1YmplY3QucmVnaXN0ZXIoJ3R5cGVJc1VwZGF0ZWQnLCB0aGlzKTtcbiAgICB0aGlzLm1vZGVsU3ViamVjdC5yZWdpc3Rlcignb3JpZW50YXRpb25Jc1VwZGF0ZWQnLCB0aGlzKTtcbiAgICB0aGlzLm1vZGVsU3ViamVjdC5yZWdpc3Rlcignc2NhbGVTdGF0ZUlzVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMubW9kZWxTdWJqZWN0LnJlZ2lzdGVyKCdwb3BVcHNTdGF0ZUlzVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMubW9kZWxTdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYnNTd2FwcGVkJywgdGhpcyk7XG4gICAgdGhpcy52aWV3LnN1YmplY3QucmVnaXN0ZXIoJ2NsaWNrVG9UcmFjaycsIHRoaXMpO1xuICAgIHRoaXMudmlldy5zdWJqZWN0LnJlZ2lzdGVyKCdjbGlja1RvU2NhbGUnLCB0aGlzKTtcbiAgICB0aGlzLnZpZXcuc3ViamVjdC5yZWdpc3Rlcignd2luZG93UmVzaXplZCcsIHRoaXMpO1xuICB9XG5cbiAgdXBkYXRlKGV2ZW50VHlwZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50VHlwZSBpbiB0aGlzLmV2ZW50cykge1xuICAgICAgdGhpcy5ldmVudHNbZXZlbnRUeXBlXSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlVmlldygpOiB2b2lkIHtcbiAgICB0aGlzLm1vZGVsLnVwZGF0ZVRodW1ic1N0YXRlKHRoaXMubW9kZWwuZ2V0VGh1bWJzUG9zaXRpb25zKCkpO1xuXG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0U2NhbGVTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnZpZXcuZW5hYmxlU2NhbGUoKTtcblxuICAgICAgY29uc3QgbWF4ID0gdGhpcy5tb2RlbC5nZXRNYXgoKTtcbiAgICAgIHRoaXMubW9kZWwuc2V0U2NhbGVQb2ludFNpemUodGhpcy52aWV3LmdldFNjYWxlUG9pbnRTaXplKG1heCkpO1xuXG4gICAgICBjb25zdCBwb2ludHMgPSB0aGlzLm1vZGVsLmdldFNjYWxlUG9pbnRzKCk7XG4gICAgICB0aGlzLnZpZXcuYWRkU2NhbGVQb2ludHMocG9pbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52aWV3LmRpc2FibGVTY2FsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlVGh1bWJzUG9zaXRpb25zKCk6IHZvaWQge1xuICAgIHRoaXMudmlldy51cGRhdGVUaHVtYnModGhpcy5tb2RlbC5nZXRUaHVtYnNQb3NpdGlvbnMoKSk7XG4gICAgdGhpcy52aWV3LnVwZGF0ZVBvcFVwcyh0aGlzLm1vZGVsLmdldFBvcFVwc1BhcmFtcygpKTtcbiAgICB0aGlzLnZpZXcudXBkYXRlUHJvZ3Jlc3NCYXIodGhpcy5tb2RlbC5nZXRQcm9ncmVzc0JhclBhcmFtcygpKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU2xpZGVyT3JpZW50YXRpb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0T3JpZW50YXRpb24oKSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICB0aGlzLnZpZXcuc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlldy5zd2l0Y2hUb1ZlcnRpY2FsKCk7XG4gICAgfVxuXG4gICAgdGhpcy5tb2RlbC5zZXRTbGlkZXJTaXplKHRoaXMudmlldy5nZXRTbGlkZXJTaXplKCkpO1xuICAgIHRoaXMudXBkYXRlVmlldygpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTbGlkZXJUeXBlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1vZGVsLmdldFR5cGUoKSA9PT0gJ3NpbmdsZScpIHtcbiAgICAgIHRoaXMudmlldy5zd2l0Y2hUb1NpbmdsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuc3dpdGNoVG9SYW5nZSgpO1xuICAgIH1cblxuICAgIHRoaXMubW9kZWwudXBkYXRlVGh1bWJzU3RhdGUodGhpcy5tb2RlbC5nZXRUaHVtYnNQb3NpdGlvbnMoKSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVNjYWxlU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0U2NhbGVTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnZpZXcuZW5hYmxlU2NhbGUoKTtcbiAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuZGlzYWJsZVNjYWxlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVQb3BVcHNTdGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tb2RlbC5nZXRQb3BVcHNTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnZpZXcuZW5hYmxlUG9wVXBzKCk7XG4gICAgICB0aGlzLm1vZGVsLnVwZGF0ZVRodW1ic1N0YXRlKHRoaXMubW9kZWwuZ2V0VGh1bWJzUG9zaXRpb25zKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuZGlzYWJsZVBvcFVwcygpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW1wbGVTbGlkZXJDb250cm9sbGVyO1xuIiwiaW1wb3J0IHsgSVNsaWRlck1hcmdpbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBVSUNvbnRyb2wgZnJvbSAnLi4vdWktY29udHJvbC91aS1jb250cm9sJztcblxuY2xhc3MgU2xpZGVyIGV4dGVuZHMgVUlDb250cm9sIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3NsaWRlcicpO1xuICB9XG5cbiAgLyoqXG4gICAqINCU0L7QsdCw0LLQu9GP0LXRgiDQv9GA0LjQvdGP0YLRi9C5IGRpdiDRjdC70LXQvNC10L3RgiDQsiDQutC+0L3QtdGGINC60L7QvdGC0LXQudC90LXRgNCwXG4gICAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IGNvbnRyb2wgLSBkaXYg0Y3Qu9C10LzQtdC90YIsINC60L7RgtC+0YDRi9C5INC00L7Qu9C20LXQvSDQsdGL0YLRjCDQtNC+0LHQsNCy0LvQtdC9INCyINC60L7QvdGC0LXQudC90LXRgFxuICAgKi9cbiAgYXBwZW5kKGNvbnRyb2w6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgdGhpcy5jb250cm9sLmFwcGVuZChjb250cm9sKTtcbiAgfVxuXG4gIHNldE1hcmdpbnMobWFyZ2luczogSVNsaWRlck1hcmdpbnMpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wuc3R5bGUubWFyZ2luTGVmdCA9IGAke21hcmdpbnMubGVmdH1weGA7XG4gICAgdGhpcy5jb250cm9sLnN0eWxlLm1hcmdpblRvcCA9IGAke21hcmdpbnMudG9wfXB4YDtcbiAgICB0aGlzLmNvbnRyb2wuc3R5bGUubWFyZ2luUmlnaHQgPSBgJHttYXJnaW5zLnJpZ2h0fXB4YDtcbiAgICB0aGlzLmNvbnRyb2wuc3R5bGUubWFyZ2luQm90dG9tID0gYCR7bWFyZ2lucy5ib3R0b219cHhgO1xuICB9XG5cbiAgcmVzZXRNYXJnaW5zKCk6IHZvaWQge1xuICAgIHRoaXMuY29udHJvbC5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2xpZGVyO1xuIiwiaW1wb3J0IFVJQ29udHJvbCBmcm9tICcuLi91aS1jb250cm9sL3VpLWNvbnRyb2wnO1xuXG5jbGFzcyBUcmFjayBleHRlbmRzIFVJQ29udHJvbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCd0cmFjaycpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlVHJhY2tDbGljayA9IHRoaXMuaGFuZGxlVHJhY2tDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY29udHJvbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlVHJhY2tDbGljayk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVRyYWNrQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLnNldFBvc2l0aW9uKHsgbGVmdDogZXZlbnQuY2xpZW50WCwgdG9wOiBldmVudC5jbGllbnRZIH0pO1xuICAgIHRoaXMuc3ViamVjdC5ub3RpZnkoJ2NsaWNrVG9UcmFjaycpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyYWNrO1xuIiwiLyogZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiXSAqL1xuLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG5cbmltcG9ydCB7IElQb3NpdGlvbiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IFVJQ29udHJvbCBmcm9tICcuLi91aS1jb250cm9sL3VpLWNvbnRyb2wnO1xuXG5jbGFzcyBUaHVtYiBleHRlbmRzIFVJQ29udHJvbCB7XG4gIHByaXZhdGUgc2hpZnQgPSB7IHNoaWZ0WDogMCwgc2hpZnRZOiAwIH07XG4gIHByaXZhdGUgaGFuZGxlRG9jdW1lbnRQb2ludGVybW92ZTogKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHZvaWQ7XG4gIHByaXZhdGUgaGFuZGxlRG9jdW1lbnRQb2ludGVydXA6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3Iob3JpZW50YXRpb24/OiBzdHJpbmcpIHtcbiAgICBzdXBlcigndGh1bWInLCBvcmllbnRhdGlvbik7XG5cbiAgICB0aGlzLmhhbmRsZURvY3VtZW50UG9pbnRlcm1vdmUgPSB0aGlzLmRyYWcuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZURvY3VtZW50UG9pbnRlcnVwID0gdGhpcy5lbmREcmFnLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdCgpIHtcbiAgICB0aGlzLmhhbmRsZVRodW1iUG9pbnRlcmRvd24gPSB0aGlzLmhhbmRsZVRodW1iUG9pbnRlcmRvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZVRodW1iUG9pbnRlcmRvd24pO1xuXG4gICAgdGhpcy5kaXNhYmxlRHJhZ0FuZERyb3AoKTtcbiAgfVxuXG4gIHNldFpJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5jb250cm9sLnN0eWxlLnpJbmRleCA9IGluZGV4LnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog0J7RgtC60LvRjtGH0LDQtdGCIGh0bWw1IERyYWcgYW5kIERyb3BcbiAgICovXG4gIHByaXZhdGUgZGlzYWJsZURyYWdBbmREcm9wKCk6IHZvaWQge1xuICAgIHRoaXMuY29udHJvbC5vbmRyYWdzdGFydCA9ICgpID0+IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUaHVtYlBvaW50ZXJkb3duKGV2ZW50OiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBUaHVtYi5kaXNhYmxlU2VsZWN0aW9uKCk7XG5cbiAgICBjb25zdCB0aHVtYkNvb3JkczogRE9NUmVjdCA9IHRoaXMuY29udHJvbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0aGlzLnNldFRodW1iU2hpZnQoXG4gICAgICB7IGxlZnQ6IGV2ZW50LmNsaWVudFgsIHRvcDogZXZlbnQuY2xpZW50WSB9LFxuICAgICAgeyBsZWZ0OiB0aHVtYkNvb3Jkcy5sZWZ0LCB0b3A6IHRodW1iQ29vcmRzLnRvcCB9XG4gICAgKTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5oYW5kbGVEb2N1bWVudFBvaW50ZXJtb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLmhhbmRsZURvY3VtZW50UG9pbnRlcnVwKTtcblxuICAgIHRoaXMuc3ViamVjdC5ub3RpZnkoJ3RodW1iSXNDYXRjaGVkJyk7XG4gICAgdGhpcy5pbmNyZWFzZVpJbmRleCgpO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0L7RhdGA0LDQvdGP0LXRgiDRgNCw0LfQvdC40YbRgyDQvNC10LbQtNGDINC/0L7Qt9C40YbQuNGP0LzQuCDQsdC10LPRg9C90LrQsCDQuCDQutGD0YDRgdC+0YDQsFxuICAgKiBAcGFyYW0ge0lQb3NpdGlvbn0gY3Vyc29yUG9zIC0g0L/QvtC30LjRhtC40Y8g0LrRg9GA0YHQvtGA0LBcbiAgICogQHBhcmFtIHtJUG9zaXRpb259IHRodW1iUG9zIC0g0L/QvtC30LjRhtC40Y8g0LHQtdCz0YPQvdC60LBcbiAgICovXG4gIHByaXZhdGUgc2V0VGh1bWJTaGlmdChjdXJzb3JQb3M6IElQb3NpdGlvbiwgdGh1bWJQb3M6IElQb3NpdGlvbikge1xuICAgIHRoaXMuc2hpZnQuc2hpZnRYID0gY3Vyc29yUG9zLmxlZnQgLSB0aHVtYlBvcy5sZWZ0O1xuICAgIHRoaXMuc2hpZnQuc2hpZnRZID0gY3Vyc29yUG9zLnRvcCAtIHRodW1iUG9zLnRvcDtcbiAgfVxuXG4gIHByaXZhdGUgaW5jcmVhc2VaSW5kZXgoKSB7XG4gICAgY29uc3QgekluZGV4ID0gdGhpcy5nZXRTdHlsZSgnei1pbmRleCcpO1xuICAgIHRoaXMuY29udHJvbC5zdHlsZS56SW5kZXggPSAocGFyc2VJbnQoekluZGV4IHx8ICcwJywgMTApICsgMSkudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJlc2V0WkluZGV4KCk6IHZvaWQge1xuICAgIHRoaXMuY29udHJvbC5zdHlsZS56SW5kZXggPSAnJztcbiAgfVxuXG4gIHByaXZhdGUgZHJhZyhldmVudDogUG9pbnRlckV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5zZXRQb3NpdGlvbih7XG4gICAgICBsZWZ0OiBldmVudC5jbGllbnRYLFxuICAgICAgdG9wOiBldmVudC5jbGllbnRZLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zdWJqZWN0Lm5vdGlmeSgndGh1bWJJc0RyYWdnZWQnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRQb3NpdGlvbihjdXJzb3JQb3NpdGlvbjogSVBvc2l0aW9uKTogdm9pZCB7XG4gICAgc3VwZXIuc2V0UG9zaXRpb24oY3Vyc29yUG9zaXRpb24pO1xuICAgIHRoaXMubGFzdFBvc2l0aW9uLmxlZnQgLT0gdGhpcy5zaGlmdC5zaGlmdFg7XG4gICAgdGhpcy5sYXN0UG9zaXRpb24udG9wIC09IHRoaXMuc2hpZnQuc2hpZnRZO1xuICB9XG5cbiAgcHJpdmF0ZSBlbmREcmFnKCk6IHZvaWQge1xuICAgIFRodW1iLmVuYWJsZVNlbGVjdGlvbigpO1xuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLmhhbmRsZURvY3VtZW50UG9pbnRlcm1vdmUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMuaGFuZGxlRG9jdW1lbnRQb2ludGVydXApO1xuICB9XG5cbiAgbW92ZVRvKHBvc2l0aW9uOiBJUG9zaXRpb24pOiB2b2lkIHtcbiAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIHRoaXMuY29udHJvbC5zdHlsZS5sZWZ0ID0gYCR7cG9zaXRpb24ubGVmdH1weGA7XG4gICAgdGhpcy5jb250cm9sLnN0eWxlLnRvcCA9IGAke3Bvc2l0aW9uLnRvcH1weGA7XG4gIH1cblxuICAvKipcbiAgICog0J7RgtC60LvRjtGH0LXQvdC40LUg0LLRi9C00LXQu9C10L3QuNGPINC/0YDQuCDQv9C10YDQtdGC0Y/Qs9C40LLQsNC90LjQuCDQsdC10LPRg9C90LrQsFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgZGlzYWJsZVNlbGVjdGlvbigpIHtcbiAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gKCkgPT4gZmFsc2U7XG4gICAgZG9jdW1lbnQub25wb2ludGVyZG93biA9ICgpID0+IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0LrQu9GO0YfQtdC90LjQtSDQstGL0LTQtdC70LXQvdC40Y8g0YLQtdC60YHRgtCwXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBlbmFibGVTZWxlY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IG51bGw7XG4gICAgZG9jdW1lbnQub25wb2ludGVyZG93biA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGh1bWI7XG4iLCJpbXBvcnQgeyBJUG9wVXBQYXJhbXMsIElQb3NpdGlvbiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IFVJQ29udHJvbCBmcm9tICcuLi91aS1jb250cm9sL3VpLWNvbnRyb2wnO1xuXG5jbGFzcyBQb3BVcCBleHRlbmRzIFVJQ29udHJvbCB7XG4gIGNvbnN0cnVjdG9yKG9yaWVudGF0aW9uPzogc3RyaW5nKSB7XG4gICAgc3VwZXIoJ3BvcC11cCcsIG9yaWVudGF0aW9uKTtcbiAgfVxuXG4gIHVwZGF0ZShwYXJhbXM6IElQb3BVcFBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlVmFsdWUocGFyYW1zLnZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKHBhcmFtcy5wb3NpdGlvbik7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVZhbHVlKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wuaW5uZXJIVE1MID0gYCR7dmFsdWV9YDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUG9zaXRpb24ocG9zaXRpb246IElQb3NpdGlvbik6IHZvaWQge1xuICAgIHRoaXMuY29udHJvbC5zdHlsZS5sZWZ0ID0gYCR7cG9zaXRpb24ubGVmdH1weGA7XG4gICAgdGhpcy5jb250cm9sLnN0eWxlLnRvcCA9IGAke3Bvc2l0aW9uLnRvcH1weGA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wVXA7XG4iLCJpbXBvcnQgeyBJUHJvZ3Jlc3NCYXJQYXJhbXMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBVSUNvbnRyb2wgZnJvbSAnLi4vdWktY29udHJvbC91aS1jb250cm9sJztcblxuY2xhc3MgUHJvZ3Jlc3NCYXIgZXh0ZW5kcyBVSUNvbnRyb2wge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigncHJvZ3Jlc3MtYmFyJyk7XG4gIH1cblxuICB1cGRhdGUocGFyYW1zOiBJUHJvZ3Jlc3NCYXJQYXJhbXMpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wuc3R5bGUubGVmdCA9IGAke3BhcmFtcy5wb3NpdGlvbi5sZWZ0fXB4YDtcbiAgICB0aGlzLmNvbnRyb2wuc3R5bGUudG9wID0gYCR7cGFyYW1zLnBvc2l0aW9uLnRvcH1weGA7XG4gICAgdGhpcy5jb250cm9sLnN0eWxlLndpZHRoID0gYCR7cGFyYW1zLnNpemUud2lkdGh9cHhgO1xuICAgIHRoaXMuY29udHJvbC5zdHlsZS5oZWlnaHQgPSBgJHtwYXJhbXMuc2l6ZS5oZWlnaHR9cHhgO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2dyZXNzQmFyO1xuIiwiLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG5pbXBvcnQgeyBJU2NhbGVQb2ludFBhcmFtcywgSVNpemUgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBVSUNvbnRyb2wgZnJvbSAnLi4vdWktY29udHJvbC91aS1jb250cm9sJztcblxuY2xhc3MgU2NhbGUgZXh0ZW5kcyBVSUNvbnRyb2wge1xuICBjb25zdHJ1Y3RvcihvcmllbnRhdGlvbj86IHN0cmluZykge1xuICAgIHN1cGVyKCdzY2FsZScsIG9yaWVudGF0aW9uKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZVNjYWxlQ2xpY2sgPSB0aGlzLmhhbmRsZVNjYWxlQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZVNjYWxlQ2xpY2spO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVTY2FsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5zZXRQb3NpdGlvbih7IGxlZnQ6IGV2ZW50LmNsaWVudFgsIHRvcDogZXZlbnQuY2xpZW50WSB9KTtcbiAgICB0aGlzLnN1YmplY3Qubm90aWZ5KCdjbGlja1RvU2NhbGUnKTtcbiAgfVxuXG4gIGdldFBvaW50U2l6ZSh2YWx1ZTogbnVtYmVyKTogSVNpemUge1xuICAgIHRoaXMuYWRkUG9pbnQoe1xuICAgICAgcG9zaXRpb246IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICBzaXplOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAgIHZhbHVlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcG9pbnRTaXplID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gICAgY29uc3Qgc2NhbGVQb2ludDogSFRNTERpdkVsZW1lbnQgfCBudWxsID1cbiAgICAgIHRoaXMuY29udHJvbC5xdWVyeVNlbGVjdG9yKCcuc2NhbGVfX3BvaW50Jyk7XG5cbiAgICBwb2ludFNpemUud2lkdGggPSBzY2FsZVBvaW50Py5vZmZzZXRXaWR0aCB8fCAwO1xuICAgIHBvaW50U2l6ZS5oZWlnaHQgPSBzY2FsZVBvaW50Py5vZmZzZXRIZWlnaHQgfHwgMDtcbiAgICBzY2FsZVBvaW50Py5yZW1vdmUoKTtcblxuICAgIHJldHVybiBwb2ludFNpemU7XG4gIH1cblxuICBhZGRQb2ludHMocG9pbnRzOiBJU2NhbGVQb2ludFBhcmFtc1tdKTogdm9pZCB7XG4gICAgcG9pbnRzLmZvckVhY2goKHBvaW50KSA9PiB0aGlzLmFkZFBvaW50KHBvaW50KSk7XG4gIH1cblxuICBwcml2YXRlIGFkZFBvaW50KHBvaW50OiBJU2NhbGVQb2ludFBhcmFtcyk6IHZvaWQge1xuICAgIGNvbnN0IG9yaWVudGF0aW9uID0gdGhpcy5nZXRPcmllbnRhdGlvbigpO1xuICAgIGNvbnN0IHNjYWxlUG9pbnQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgc2NhbGVQb2ludC5jbGFzc0xpc3QuYWRkKCdzY2FsZV9fcG9pbnQnLCBgc2NhbGVfX3BvaW50XyR7b3JpZW50YXRpb259YCk7XG4gICAgaWYgKHBvaW50LnNpemUud2lkdGggPiAwKSB7XG4gICAgICBzY2FsZVBvaW50LnN0eWxlLndpZHRoID0gYCR7cG9pbnQuc2l6ZS53aWR0aH1weGA7XG4gICAgfVxuXG4gICAgaWYgKG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIHRoaXMuY29udHJvbC5zdHlsZS5oZWlnaHQgPSBgJHtwb2ludC5zaXplLmhlaWdodH1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29udHJvbC5zdHlsZS53aWR0aCA9IGAke3BvaW50LnNpemUud2lkdGh9cHhgO1xuICAgIH1cblxuICAgIGNvbnN0IGRpdmlzaW9uTWFya2VyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdmlzaW9uTWFya2VyLmNsYXNzTGlzdC5hZGQoJ3NjYWxlX19wb2ludC1tYXJrZXInKTtcblxuICAgIGNvbnN0IGRpdmlzaW9uTGFiZWw6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2aXNpb25MYWJlbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgJ3NjYWxlX19wb2ludC1sYWJlbCcsXG4gICAgICBgc2NhbGVfX3BvaW50LWxhYmVsXyR7b3JpZW50YXRpb259YFxuICAgICk7XG4gICAgZGl2aXNpb25MYWJlbC5pbm5lclRleHQgPSBwb2ludC52YWx1ZS50b1N0cmluZygpO1xuXG4gICAgc2NhbGVQb2ludC5zdHlsZS5sZWZ0ID0gYCR7cG9pbnQucG9zaXRpb24ubGVmdH1weGA7XG4gICAgc2NhbGVQb2ludC5zdHlsZS50b3AgPSBgJHtwb2ludC5wb3NpdGlvbi50b3B9cHhgO1xuXG4gICAgc2NhbGVQb2ludC5hcHBlbmQoZGl2aXNpb25NYXJrZXIpO1xuICAgIHNjYWxlUG9pbnQuYXBwZW5kKGRpdmlzaW9uTGFiZWwpO1xuICAgIHRoaXMuY29udHJvbC5hcHBlbmQoc2NhbGVQb2ludCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NhbGU7XG4iLCJpbXBvcnQgRGVtbyBmcm9tICcuL2RlbW8vZGVtbyc7XG5cbnJlcXVpcmUuY29udGV4dCgnJywgdHJ1ZSwgL1xcLnNjc3MkLyk7XG5cbmNvbnN0IHNjcmlwdHMgPSByZXF1aXJlLmNvbnRleHQoJycsIHRydWUsIC9bXmRdXFwudHMkLyk7XG5zY3JpcHRzLmtleXMoKS5mb3JFYWNoKChzY3JpcHQpID0+IHtcbiAgY29uc3QgZGlyZWN0b3JpZXMgPSBzY3JpcHQuc3BsaXQoJy8nKTtcblxuICBpZiAoIWRpcmVjdG9yaWVzLmluY2x1ZGVzKCdfX21vY2tzX18nKSAmJiAhZGlyZWN0b3JpZXMuaW5jbHVkZXMoJ3Rlc3RzJykpIHtcbiAgICBzY3JpcHRzKHNjcmlwdCk7XG4gIH1cbn0pO1xuXG5jb25zdCBkZW1vID0gbmV3IERlbW8oKTtcbiIsImNsYXNzIERlbW8ge1xuICBwcml2YXRlIGFkZE5ld1NsaWRlckJ1dHRvbjogSFRNTERpdkVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBoZWxwSW1hZ2U6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgYnV0dG9uV3JhcHBlcjogSFRNTERpdkVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBwcml2YXRlIGluaXQoKSB7XG4gICAgdGhpcy5hZGROZXdTbGlkZXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLW5ldy1zbGlkZXItYnV0dG9uJyk7XG4gICAgdGhpcy5oZWxwSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVscC1pbWFnZScpO1xuICAgIHRoaXMuYnV0dG9uV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24td3JhcHBlcicpO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmhhbmRsZUFkZE5ld1NsaWRlckJ1dHRvbkNsaWNrID1cbiAgICAgIHRoaXMuaGFuZGxlQWRkTmV3U2xpZGVyQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcblxuICAgIHRoaXMuYWRkTmV3U2xpZGVyQnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIHRoaXMuaGFuZGxlQWRkTmV3U2xpZGVyQnV0dG9uQ2xpY2tcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVSZW1vdmVTbGlkZXJCdXR0b25DbGljayhzbGlkZXJXcmFwcGVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgIHNsaWRlcldyYXBwZXIucmVtb3ZlKCk7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXItd3JhcHBlcicpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5hZGROZXdTbGlkZXJCdXR0b24/LmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICdhZGQtbmV3LXNsaWRlci1idXR0b25fbWFyZ2luLXRvcCdcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVBZGROZXdTbGlkZXJCdXR0b25DbGljaygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5idXR0b25XcmFwcGVyID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5oZWxwSW1hZ2U/LnJlbW92ZSgpO1xuICAgIHRoaXMuaGVscEltYWdlID0gbnVsbDtcblxuICAgIHRoaXMuYWRkTmV3U2xpZGVyQnV0dG9uPy5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgJ2FkZC1uZXctc2xpZGVyLWJ1dHRvbl9tYXJnaW4tdG9wJ1xuICAgICk7XG5cbiAgICBjb25zdCBzbGlkZXJXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgc2xpZGVyV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdzbGlkZXItd3JhcHBlcicpO1xuICAgIHRoaXMuYnV0dG9uV3JhcHBlci5iZWZvcmUoc2xpZGVyV3JhcHBlcik7XG5cbiAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGljb24uY2xhc3NMaXN0LmFkZCgnbWF0ZXJpYWwtaWNvbnMnLCAncmVtb3ZlLXNsaWRlci1idXR0b25fX2ljb24nKTtcbiAgICBpY29uLmlubmVyVGV4dCA9ICdjbGVhcic7XG5cbiAgICBjb25zdCByZW1vdmVTbGlkZXJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICByZW1vdmVTbGlkZXJCdXR0b24uY2xhc3NMaXN0LmFkZCgncmVtb3ZlLXNsaWRlci1idXR0b24nKTtcbiAgICByZW1vdmVTbGlkZXJCdXR0b24uYXBwZW5kKGljb24pO1xuICAgIHJlbW92ZVNsaWRlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIHRoaXMuaGFuZGxlUmVtb3ZlU2xpZGVyQnV0dG9uQ2xpY2suYmluZChyZW1vdmVTbGlkZXJCdXR0b24sIHNsaWRlcldyYXBwZXIpXG4gICAgKTtcbiAgICBzbGlkZXJXcmFwcGVyLmFwcGVuZChyZW1vdmVTbGlkZXJCdXR0b24pO1xuXG4gICAgJChzbGlkZXJXcmFwcGVyKS5zaW1wbGVTbGlkZXIoKS5jb250cm9sUGFuZWwoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZW1vO1xuIiwiLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG5cbmltcG9ydCBDb250cm9sUGFuZWwgZnJvbSAnLi9jb250cm9sLXBhbmVsL2NvbnRyb2wtcGFuZWwnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICcuL3RleHQtZmllbGQvdGV4dC1maWVsZCc7XG5pbXBvcnQgZ3JvdXBFbGVtZW50cyBmcm9tICcuL2dyb3VwLWVsZW1lbnRzJztcbmltcG9ydCBSYWRpb0J1dHRvbiBmcm9tICcuL3JhZGlvLWJ1dHRvbi9yYWRpby1idXR0b24nO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4vY2hlY2tib3gvY2hlY2tib3gnO1xuaW1wb3J0IHsgSU9ic2VydmVyLCBJVGh1bWJzVmFsdWVzIH0gZnJvbSAnLi4vLi4vc2ltcGxlLXNsaWRlci9pbnRlcmZhY2VzJztcbmltcG9ydCBTdWJqZWN0IGZyb20gJy4uLy4uL3NpbXBsZS1zbGlkZXIvc3ViamVjdC9zdWJqZWN0JztcblxuY2xhc3MgQ29udHJvbFBhbmVsVmlldyBleHRlbmRzIFN1YmplY3QgaW1wbGVtZW50cyBJT2JzZXJ2ZXIge1xuICBwcml2YXRlIHNsaWRlcldyYXBwZXI6IEhUTUxEaXZFbGVtZW50O1xuICBwcml2YXRlIGNvbnRyb2xQYW5lbDogQ29udHJvbFBhbmVsO1xuICBwcml2YXRlIHRodW1iT25lVmFsdWU6IFRleHRGaWVsZDtcbiAgcHJpdmF0ZSB0aHVtYlR3b1ZhbHVlOiBUZXh0RmllbGQ7XG4gIHByaXZhdGUgbWluOiBUZXh0RmllbGQ7XG4gIHByaXZhdGUgbWF4OiBUZXh0RmllbGQ7XG4gIHByaXZhdGUgc3RlcDogVGV4dEZpZWxkO1xuICBwcml2YXRlIHR5cGVSYWRpbzogUmFkaW9CdXR0b247XG4gIHByaXZhdGUgb3JpZW50YXRpb25SYWRpbzogUmFkaW9CdXR0b247XG4gIHByaXZhdGUgc2NhbGVDaGVja2JveDogQ2hlY2tib3g7XG4gIHByaXZhdGUgcG9wVXBzQ2hlY2tib3g6IENoZWNrYm94O1xuXG4gIGNvbnN0cnVjdG9yKHNsaWRlcldyYXBwZXI6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbnRyb2xQYW5lbCA9IG5ldyBDb250cm9sUGFuZWwoKTtcbiAgICB0aGlzLnNsaWRlcldyYXBwZXIgPSBzbGlkZXJXcmFwcGVyO1xuICAgIHRoaXMudGh1bWJPbmVWYWx1ZSA9IG5ldyBUZXh0RmllbGQoJ0ZpcnN0IHRodW1iIHZhbHVlJyk7XG4gICAgdGhpcy50aHVtYlR3b1ZhbHVlID0gbmV3IFRleHRGaWVsZCgnU2Vjb25kIHRodW1iIHZhbHVlJyk7XG4gICAgdGhpcy5taW4gPSBuZXcgVGV4dEZpZWxkKCdtaW4gdmFsdWUnKTtcbiAgICB0aGlzLm1heCA9IG5ldyBUZXh0RmllbGQoJ21heCB2YWx1ZScpO1xuICAgIHRoaXMuc3RlcCA9IG5ldyBUZXh0RmllbGQoJ3N0ZXAnKTtcbiAgICB0aGlzLnR5cGVSYWRpbyA9IG5ldyBSYWRpb0J1dHRvbihcbiAgICAgICd0eXBlJyxcbiAgICAgIHsgbGFiZWw6ICdzaW5nbGUnLCB2YWx1ZTogJ3NpbmdsZScgfSxcbiAgICAgIHsgbGFiZWw6ICdyYW5nZScsIHZhbHVlOiAncmFuZ2UnIH0sXG4gICAgKTtcbiAgICB0aGlzLm9yaWVudGF0aW9uUmFkaW8gPSBuZXcgUmFkaW9CdXR0b24oXG4gICAgICAnb3JpZW50YXRpb24nLFxuICAgICAgeyBsYWJlbDogJ2hvcml6b250YWwnLCB2YWx1ZTogJ2hvcml6b250YWwnIH0sXG4gICAgICB7IGxhYmVsOiAndmVydGljYWwnLCB2YWx1ZTogJ3ZlcnRpY2FsJyB9LFxuICAgICk7XG4gICAgdGhpcy5zY2FsZUNoZWNrYm94ID0gbmV3IENoZWNrYm94KHtcbiAgICAgIGxhYmVsOiAnc2NhbGUnLFxuICAgICAgbmFtZTogJ3NjYWxlJyxcbiAgICAgIHZhbHVlOiAnc2NhbGUnLFxuICAgIH0pO1xuICAgIHRoaXMucG9wVXBzQ2hlY2tib3ggPSBuZXcgQ2hlY2tib3goe1xuICAgICAgbGFiZWw6ICdwb3AgdXBzJyxcbiAgICAgIG5hbWU6ICdwb3BVcHMnLFxuICAgICAgdmFsdWU6ICdwb3BVcHMnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zdWJzY3JpYmVUb0V2ZW50cygpO1xuICAgIHRoaXMuY3JlYXRlUGFuZWwoKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUGFuZWwoKTogdm9pZCB7XG4gICAgdGhpcy5jb250cm9sUGFuZWwuYXBwZW5kKFxuICAgICAgZ3JvdXBFbGVtZW50cyh7XG4gICAgICAgIHdyYXBwZXJDbGFzczogJ2NvbnRyb2wtcGFuZWxfX3RleHQtZmllbGRzLWdyb3VwJyxcbiAgICAgICAgZWxlbWVudHM6IFtcbiAgICAgICAgICB0aGlzLnRodW1iT25lVmFsdWUuZ2V0Q29udHJvbCgpLFxuICAgICAgICAgIHRoaXMudGh1bWJUd29WYWx1ZS5nZXRDb250cm9sKCksXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICApO1xuXG4gICAgdGhpcy5jb250cm9sUGFuZWwuYXBwZW5kKFxuICAgICAgZ3JvdXBFbGVtZW50cyh7XG4gICAgICAgIHdyYXBwZXJDbGFzczogJ2NvbnRyb2wtcGFuZWxfX3RleHQtZmllbGRzLWdyb3VwJyxcbiAgICAgICAgZWxlbWVudHM6IFtcbiAgICAgICAgICB0aGlzLm1pbi5nZXRDb250cm9sKCksXG4gICAgICAgICAgdGhpcy5tYXguZ2V0Q29udHJvbCgpLFxuICAgICAgICAgIHRoaXMuc3RlcC5nZXRDb250cm9sKCksXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICApO1xuXG4gICAgY29uc3QgdHlwZVJhZGlvR3JvdXAgPSBncm91cEVsZW1lbnRzKHtcbiAgICAgIGhlYWRlcjogJ3R5cGUnLFxuICAgICAgd3JhcHBlckNsYXNzOiAnY29udHJvbC1wYW5lbF9fcmFkaW8tZ3JvdXAnLFxuICAgICAgZWxlbWVudHM6IFt0aGlzLnR5cGVSYWRpby5nZXRDb250cm9sKCldLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgb3JpZW50YXRpb25SYWRpb0dyb3VwID0gZ3JvdXBFbGVtZW50cyh7XG4gICAgICBoZWFkZXI6ICdvcmllbnRhdGlvbicsXG4gICAgICB3cmFwcGVyQ2xhc3M6ICdjb250cm9sLXBhbmVsX19yYWRpby1ncm91cCcsXG4gICAgICBlbGVtZW50czogW3RoaXMub3JpZW50YXRpb25SYWRpby5nZXRDb250cm9sKCldLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYWxsUmFkaW9zR3JvdXAgPSBncm91cEVsZW1lbnRzKHtcbiAgICAgIHdyYXBwZXJDbGFzczogJ2NvbnRyb2wtcGFuZWxfX3dyYXBwZXInLFxuICAgICAgZWxlbWVudHM6IFt0eXBlUmFkaW9Hcm91cCwgb3JpZW50YXRpb25SYWRpb0dyb3VwXSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGNoZWNrYm94ZXNHcm91cCA9IGdyb3VwRWxlbWVudHMoe1xuICAgICAgaGVhZGVyOiAnb24vb2ZmIGVsZW1lbnRzJyxcbiAgICAgIHdyYXBwZXJDbGFzczogJ2NvbnRyb2wtcGFuZWxfX3dyYXBwZXInLFxuICAgICAgZWxlbWVudHM6IFtcbiAgICAgICAgdGhpcy5zY2FsZUNoZWNrYm94LmdldENvbnRyb2woKSxcbiAgICAgICAgdGhpcy5wb3BVcHNDaGVja2JveC5nZXRDb250cm9sKCksXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgdGhpcy5jb250cm9sUGFuZWwuYXBwZW5kKFxuICAgICAgZ3JvdXBFbGVtZW50cyh7XG4gICAgICAgIHdyYXBwZXJDbGFzczogJ2NvbnRyb2wtcGFuZWxfX2NoZWNrYm94ZXMtYW5kLXJhZGlvcy13cmFwcGVyJyxcbiAgICAgICAgZWxlbWVudHM6IFthbGxSYWRpb3NHcm91cCwgY2hlY2tib3hlc0dyb3VwXSxcbiAgICAgIH0pLFxuICAgICk7XG5cbiAgICB0aGlzLnNsaWRlcldyYXBwZXIuYXBwZW5kKHRoaXMuY29udHJvbFBhbmVsLmdldEVsZW1lbnQoKSk7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvRXZlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMudGh1bWJPbmVWYWx1ZS5yZWdpc3RlcignY29udHJvbFBhbmVsRGF0YVVwZGF0ZWQnLCB0aGlzKTtcbiAgICB0aGlzLnRodW1iVHdvVmFsdWUucmVnaXN0ZXIoJ2NvbnRyb2xQYW5lbERhdGFVcGRhdGVkJywgdGhpcyk7XG4gICAgdGhpcy5taW4ucmVnaXN0ZXIoJ2NvbnRyb2xQYW5lbERhdGFVcGRhdGVkJywgdGhpcyk7XG4gICAgdGhpcy5tYXgucmVnaXN0ZXIoJ2NvbnRyb2xQYW5lbERhdGFVcGRhdGVkJywgdGhpcyk7XG4gICAgdGhpcy5zdGVwLnJlZ2lzdGVyKCdjb250cm9sUGFuZWxEYXRhVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMudHlwZVJhZGlvLnJlZ2lzdGVyKCdjb250cm9sUGFuZWxEYXRhVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMub3JpZW50YXRpb25SYWRpby5yZWdpc3RlcignY29udHJvbFBhbmVsRGF0YVVwZGF0ZWQnLCB0aGlzKTtcbiAgICB0aGlzLnNjYWxlQ2hlY2tib3gucmVnaXN0ZXIoJ2NvbnRyb2xQYW5lbERhdGFVcGRhdGVkJywgdGhpcyk7XG4gICAgdGhpcy5wb3BVcHNDaGVja2JveC5yZWdpc3RlcignY29udHJvbFBhbmVsRGF0YVVwZGF0ZWQnLCB0aGlzKTtcbiAgfVxuXG4gIHVwZGF0ZShldmVudFR5cGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChldmVudFR5cGUgPT09ICdjb250cm9sUGFuZWxEYXRhVXBkYXRlZCcpIHtcbiAgICAgIHRoaXMubm90aWZ5KCdjb250cm9sUGFuZWxEYXRhVXBkYXRlZCcpO1xuICAgICAgdGhpcy5zd2l0Y2hPcmllbnRhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3dpdGNoT3JpZW50YXRpb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZ2V0T3JpZW50YXRpb24oKSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICB0aGlzLmNvbnRyb2xQYW5lbC5zd2l0Y2hUb0hvcml6b250YWwoKTtcbiAgICAgIHRoaXMuc2xpZGVyV3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXItd3JhcHBlcl92ZXJ0aWNhbCcpO1xuICAgICAgdGhpcy5zbGlkZXJXcmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlci13cmFwcGVyX2hvcml6b250YWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250cm9sUGFuZWwuc3dpdGNoVG9WZXJ0aWNhbCgpO1xuICAgICAgdGhpcy5zbGlkZXJXcmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlci13cmFwcGVyX2hvcml6b250YWwnKTtcbiAgICAgIHRoaXMuc2xpZGVyV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdzbGlkZXItd3JhcHBlcl92ZXJ0aWNhbCcpO1xuICAgIH1cbiAgfVxuXG4gIHNldFRodW1ic1ZhbHVlcyh0aHVtYnNWYWx1ZXM6IElUaHVtYnNWYWx1ZXMpOiB2b2lkIHtcbiAgICB0aGlzLnRodW1iT25lVmFsdWUuc2V0VmFsdWUodGh1bWJzVmFsdWVzLnRodW1iT25lKTtcbiAgICB0aGlzLnRodW1iVHdvVmFsdWUuc2V0VmFsdWUodGh1bWJzVmFsdWVzLnRodW1iVHdvKTtcbiAgfVxuXG4gIHNldE1pblZhbHVlKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLm1pbi5zZXRWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBzZXRNYXhWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5tYXguc2V0VmFsdWUodmFsdWUpO1xuICB9XG5cbiAgc2V0U3RlcCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zdGVwLnNldFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIHNldFNjYWxlU3RhdGUoc3RhdGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnNjYWxlQ2hlY2tib3guc2V0U3RhdGUoc3RhdGUpO1xuICB9XG5cbiAgc2V0UG9wVXBzU3RhdGUoc3RhdGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnBvcFVwc0NoZWNrYm94LnNldFN0YXRlKHN0YXRlKTtcbiAgfVxuXG4gIHNldFR5cGVSYWRpbyh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50eXBlUmFkaW8uc3dpdGNoVG8odmFsdWUpO1xuICB9XG5cbiAgc2V0T3JpZW50YXRpb25SYWRpbyh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5vcmllbnRhdGlvblJhZGlvLnN3aXRjaFRvKHZhbHVlKTtcbiAgfVxuXG4gIGdldE9yaWVudGF0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb25SYWRpby5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgZ2V0VHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnR5cGVSYWRpby5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgZ2V0U2NhbGVTdGF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zY2FsZUNoZWNrYm94LmdldFN0YXRlKCk7XG4gIH1cblxuICBnZXRQb3BVcHNTdGF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wb3BVcHNDaGVja2JveC5nZXRTdGF0ZSgpO1xuICB9XG5cbiAgZ2V0TWluKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubWluLmdldFZhbHVlKCk7XG4gIH1cblxuICBnZXRNYXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5tYXguZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIGdldFN0ZXAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zdGVwLmdldFZhbHVlKCk7XG4gIH1cblxuICBnZXRUaHVtYk9uZVZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudGh1bWJPbmVWYWx1ZS5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgZ2V0VGh1bWJUd29WYWx1ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRodW1iVHdvVmFsdWUuZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIGdldFRodW1ic1ZhbHVlcygpOiBJVGh1bWJzVmFsdWVzIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGh1bWJPbmU6IHRoaXMudGh1bWJPbmVWYWx1ZS5nZXRWYWx1ZSgpLFxuICAgICAgdGh1bWJUd286IHRoaXMudGh1bWJUd29WYWx1ZS5nZXRWYWx1ZSgpLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFBhbmVsVmlldztcbiIsImNsYXNzIENvbnRyb2xQYW5lbCB7XG4gIHByaXZhdGUgZWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbnRyb2wtcGFuZWwnKTtcbiAgfVxuXG4gIGdldEVsZW1lbnQoKTogSFRNTERpdkVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICog0JTQvtCx0LDQstC70Y/QtdGCINC/0YDQuNC90Y/RgtGL0LkgZGl2INGN0LvQtdC80LXQvdGCINCyINC60L7QvdC10YYg0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gY29udHJvbCAtIGRpdiDRjdC70LXQvNC10L3Rgiwg0LrQvtGC0L7RgNGL0Lkg0LTQvtC70LbQtdC9INCx0YvRgtGMINC00L7QsdCw0LLQu9C10L0g0LIg0LrQvtC90YLQtdC50L3QtdGAXG4gICAqL1xuICBhcHBlbmQoY29udHJvbDogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKGNvbnRyb2wpO1xuICB9XG5cbiAgc3dpdGNoVG9Ib3Jpem9udGFsKCk6IHZvaWQge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdjb250cm9sLXBhbmVsX3ZlcnRpY2FsJyk7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbnRyb2wtcGFuZWxfaG9yaXpvbnRhbCcpO1xuICB9XG5cbiAgc3dpdGNoVG9WZXJ0aWNhbCgpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29udHJvbC1wYW5lbF9ob3Jpem9udGFsJyk7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbnRyb2wtcGFuZWxfdmVydGljYWwnKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sUGFuZWw7XG4iLCJpbXBvcnQgeyBJR3JvdXBFbGVtZW50cyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuXG4vKipcbiAqINCe0LHQvtGA0LDRh9C40LLQsNC10YIg0L/QvtC70YPRh9C10L3QvdGL0LUg0Y3Qu9C10LzQtdC90YLRiyDQsiBkaXYg0YEg0LfQsNC00LDQvdC90YvQvCDQutC70LDRgdGB0L7QvFxuICogQHBhcmFtIHtzdHJpbmd9IHdyYXBwZXJDbGFzcyAtINC60LvQsNGB0YEsINC60L7RgtC+0YDRi9C5INCx0YPQtNC10YIg0L3QsNC30L3QsNGH0LXQvSDQvtCx0ZHRgNGC0LrQtVxuICogQHBhcmFtIHtIVE1MRWxlbWVudFtdfSAtINC80LDRgdGB0LjQsiDRjdC70LXQvNC10L3RgtC+0LIsINC60L7RgtC+0YDRi9C1INGC0YDQtdCx0YPQtdGC0YHRjyDQvtCx0LXRgNC90YPRgtGMXG4gKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9IC0g0Y3Qu9C10LzQtdC90YLRiyDQsiDQvtCx0ZHRgNGC0LrQtVxuICovXG5mdW5jdGlvbiBncm91cEVsZW1lbnRzKHBhcmFtczogSUdyb3VwRWxlbWVudHMpOiBIVE1MRGl2RWxlbWVudCB7XG4gIGNvbnN0IHdyYXBwZXI6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHdyYXBwZXIuY2xhc3NOYW1lID0gcGFyYW1zLndyYXBwZXJDbGFzcztcblxuICBpZiAocGFyYW1zLmhlYWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnY29udHJvbC1wYW5lbF9fZ3JvdXAtdGl0bGUnKTtcbiAgICBoZWFkZXIuaW5uZXJUZXh0ID0gcGFyYW1zLmhlYWRlcjtcbiAgICB3cmFwcGVyLmFwcGVuZChoZWFkZXIpO1xuICB9XG5cbiAgcGFyYW1zLmVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICB3cmFwcGVyLmFwcGVuZChlbGVtZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdyb3VwRWxlbWVudHM7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1kYW5nbGUgKi9cblxuaW1wb3J0IFN1YmplY3QgZnJvbSAnLi4vLi4vLi4vc2ltcGxlLXNsaWRlci9zdWJqZWN0L3N1YmplY3QnO1xuaW1wb3J0IHsgSVJhZGlvUGFyYW1zIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5cbmNsYXNzIFJhZGlvQnV0dG9uIGV4dGVuZHMgU3ViamVjdCB7XG4gIHByaXZhdGUgY29udHJvbDogSFRNTERpdkVsZW1lbnQ7XG4gIHByaXZhdGUgcmFkaW9zOiBIVE1MSW5wdXRFbGVtZW50W107XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCAuLi5wYXJhbXM6IElSYWRpb1BhcmFtc1tdKSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCB1bmlxdWVOYW1lID0gUmFkaW9CdXR0b24uZ2VuZXJhdGVOYW1lKG5hbWUpO1xuICAgIHRoaXMuY29udHJvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuY29udHJvbC5jbGFzc0xpc3QuYWRkKCdyYWRpby1idXR0b24nKTtcbiAgICB0aGlzLnJhZGlvcyA9IFtdO1xuXG4gICAgdGhpcy5pbml0KHVuaXF1ZU5hbWUsIHBhcmFtcyk7XG4gIH1cblxuICBnZXRDb250cm9sKCk6IEhUTUxEaXZFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sO1xuICB9XG5cbiAgZ2V0VmFsdWUoKTogc3RyaW5nIHtcbiAgICBsZXQgdmFsdWUgPSAnJztcblxuICAgIHRoaXMucmFkaW9zLmZvckVhY2goKHJhZGlvKSA9PiB7XG4gICAgICBpZiAocmFkaW8uY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZSA9IHJhZGlvLnZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KG5hbWU6IHN0cmluZywgcGFyYW1zOiBJUmFkaW9QYXJhbXNbXSkge1xuICAgIHBhcmFtcy5mb3JFYWNoKChyYWRpbykgPT4ge1xuICAgICAgY29uc3QgcmFkaW9XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICByYWRpb1dyYXBwZXIuY2xhc3NMaXN0LmFkZCgncmFkaW8tYnV0dG9uX19yYWRpby13cmFwcGVyJyk7XG5cbiAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3JhZGlvLWJ1dHRvbl9fbGFiZWwnKTtcbiAgICAgIGxhYmVsLmlubmVyVGV4dCA9IHJhZGlvLmxhYmVsO1xuXG4gICAgICBjb25zdCByYWRpb0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICByYWRpb0J1dHRvbi50eXBlID0gJ3JhZGlvJztcbiAgICAgIHJhZGlvQnV0dG9uLm5hbWUgPSBuYW1lO1xuICAgICAgcmFkaW9CdXR0b24udmFsdWUgPSByYWRpby52YWx1ZTtcbiAgICAgIGlmIChwYXJhbXNbMF0gPT09IHJhZGlvIHx8IHJhZGlvLmNoZWNrZWQpIHtcbiAgICAgICAgcmFkaW9CdXR0b24uY2hlY2tlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByYWRpb0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdyYWRpby1idXR0b25fX3JhZGlvLWJ1dHRvbicpO1xuICAgICAgdGhpcy5oYW5kbGVSYWRpb0J1dHRvbkNoYW5nZSA9IHRoaXMuaGFuZGxlUmFkaW9CdXR0b25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgIHJhZGlvQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlUmFkaW9CdXR0b25DaGFuZ2UpO1xuICAgICAgdGhpcy5yYWRpb3MucHVzaChyYWRpb0J1dHRvbik7XG5cbiAgICAgIGxhYmVsLmFwcGVuZChyYWRpb0J1dHRvbik7XG4gICAgICByYWRpb1dyYXBwZXIuYXBwZW5kKGxhYmVsKTtcbiAgICAgIHRoaXMuY29udHJvbC5hcHBlbmQocmFkaW9XcmFwcGVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlUmFkaW9CdXR0b25DaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5yYWRpb3MuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICAgIGNvbnN0IGxhYmVsID0gcmFkaW8ucGFyZW50RWxlbWVudDtcblxuICAgICAgaWYgKHJhZGlvLmNoZWNrZWQpIHtcbiAgICAgICAgbGFiZWw/LmNsYXNzTGlzdC5hZGQoJ3JhZGlvLWJ1dHRvbl9fbGFiZWxfY2hlY2tlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFiZWw/LmNsYXNzTGlzdC5yZW1vdmUoJ3JhZGlvLWJ1dHRvbl9fbGFiZWxfY2hlY2tlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5ub3RpZnkoJ2NvbnRyb2xQYW5lbERhdGFVcGRhdGVkJyk7XG4gIH1cblxuICBzd2l0Y2hUbyh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yYWRpb3MuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICAgIGlmIChyYWRpby52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmFkaW8uY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFuZGxlUmFkaW9CdXR0b25DaGFuZ2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGdlbmVyYXRlTmFtZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBsZXQgdW5pcXVlTmFtZSA9ICcnO1xuXG4gICAgd2hpbGUgKHVuaXF1ZU5hbWUgPT09ICcnKSB7XG4gICAgICBjb25zdCBuZXdOYW1lID0gYCR7bmFtZX0ke2NvdW50ZXJ9YDtcbiAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7bmV3TmFtZX1cIl1gKSA9PT0gbnVsbCkge1xuICAgICAgICB1bmlxdWVOYW1lID0gbmV3TmFtZTtcbiAgICAgIH1cbiAgICAgIGNvdW50ZXIgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5pcXVlTmFtZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYWRpb0J1dHRvbjtcbiIsImltcG9ydCBTdWJqZWN0IGZyb20gJy4uLy4uLy4uL3NpbXBsZS1zbGlkZXIvc3ViamVjdC9zdWJqZWN0JztcbmltcG9ydCB7IElDaGVja2JveFBhcmFtcyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuXG5jbGFzcyBDaGVja2JveCBleHRlbmRzIFN1YmplY3Qge1xuICBwcml2YXRlIGNvbnRyb2w6IEhUTUxEaXZFbGVtZW50O1xuICBwcml2YXRlIGNoZWNrYm94OiBIVE1MSW5wdXRFbGVtZW50O1xuICBwcml2YXRlIGxhYmVsOiBIVE1MTGFiZWxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogSUNoZWNrYm94UGFyYW1zKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbnRyb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICB0aGlzLmNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblxuICAgIHRoaXMuaW5pdChwYXJhbXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KHBhcmFtczogSUNoZWNrYm94UGFyYW1zKTogdm9pZCB7XG4gICAgdGhpcy5jb250cm9sLmNsYXNzTGlzdC5hZGQoJ2NoZWNrYm94Jyk7XG5cbiAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC5hZGQoJ2NoZWNrYm94X19sYWJlbCcpO1xuICAgIHRoaXMubGFiZWwuaW5uZXJUZXh0ID0gcGFyYW1zLmxhYmVsO1xuXG4gICAgdGhpcy5jaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICB0aGlzLmNoZWNrYm94Lm5hbWUgPSBwYXJhbXMubmFtZTtcbiAgICB0aGlzLmNoZWNrYm94LnZhbHVlID0gcGFyYW1zLnZhbHVlO1xuICAgIHRoaXMuY2hlY2tib3guY2xhc3NMaXN0LmFkZCgnY2hlY2tib3hfX2NoZWNrJyk7XG4gICAgdGhpcy5oYW5kbGVDaGVja2JveENoYW5nZSA9IHRoaXMuaGFuZGxlQ2hlY2tib3hDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ2hlY2tib3hDaGFuZ2UpO1xuXG4gICAgdGhpcy5sYWJlbC5hcHBlbmQodGhpcy5jaGVja2JveCk7XG4gICAgdGhpcy5jb250cm9sLmFwcGVuZCh0aGlzLmxhYmVsKTtcbiAgfVxuXG4gIGdldENvbnRyb2woKTogSFRNTERpdkVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2w7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNoZWNrYm94Q2hhbmdlKCk6IHZvaWQge1xuICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LnRvZ2dsZSgnY2hlY2tib3hfX2xhYmVsX2NoZWNrZWQnKTtcblxuICAgIHRoaXMubm90aWZ5KCdjb250cm9sUGFuZWxEYXRhVXBkYXRlZCcpO1xuICB9XG5cbiAgc2V0U3RhdGUoc3RhdGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrYm94LmNoZWNrZWQgPSBzdGF0ZTtcbiAgICB0aGlzLmhhbmRsZUNoZWNrYm94Q2hhbmdlKCk7XG4gIH1cblxuICBnZXRTdGF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jaGVja2JveC5jaGVja2VkO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94O1xuIiwiaW1wb3J0IHtcbiAgSU9ic2VydmVyLFxuICBJU2xpZGVyU2V0dGluZ3MsXG4gIElTdWJqZWN0LFxuICBJVGh1bWJzVmFsdWVzLFxufSBmcm9tICcuLi8uLi9zaW1wbGUtc2xpZGVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IFN1YmplY3QgZnJvbSAnLi4vLi4vc2ltcGxlLXNsaWRlci9zdWJqZWN0L3N1YmplY3QnO1xuaW1wb3J0IHsgSVN1YmplY3RFdmVudHMgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuY2xhc3MgQ29udHJvbFBhbmVsTW9kZWwgZXh0ZW5kcyBTdWJqZWN0IGltcGxlbWVudHMgSU9ic2VydmVyIHtcbiAgcHJpdmF0ZSBzbGlkZXI6IEpRdWVyeTxIVE1MRWxlbWVudD47XG4gIHByaXZhdGUgc3ViamVjdDogSVN1YmplY3Q7XG5cbiAgcHJpdmF0ZSBldmVudHM6IElTdWJqZWN0RXZlbnRzID0ge1xuICAgIHRodW1ic1Bvc2l0aW9uc0lzVXBkYXRlZDogKCkgPT4gdGhpcy5ub3RpZnkoJ3RodW1ic1Bvc2l0aW9uc0lzVXBkYXRlZCcpLFxuICAgIG1pbklzVXBkYXRlZDogKCkgPT4gdGhpcy5ub3RpZnkoJ21pbklzVXBkYXRlZCcpLFxuICAgIG1heElzVXBkYXRlZDogKCkgPT4gdGhpcy5ub3RpZnkoJ21heElzVXBkYXRlZCcpLFxuICAgIHN0ZXBJc1VwZGF0ZWQ6ICgpID0+IHRoaXMubm90aWZ5KCdzdGVwSXNVcGRhdGVkJyksXG4gIH07XG5cbiAgY29uc3RydWN0b3Ioc2xpZGVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNsaWRlciA9IHNsaWRlcjtcbiAgICB0aGlzLnN1YmplY3QgPSBzbGlkZXIuc2ltcGxlU2xpZGVyKCdnZXRNb2RlbFN1YmplY3QnKTtcbiAgICB0aGlzLnN1YmplY3QucmVnaXN0ZXIoJ3RodW1ic1Bvc2l0aW9uc0lzVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMuc3ViamVjdC5yZWdpc3RlcignbWluSXNVcGRhdGVkJywgdGhpcyk7XG4gICAgdGhpcy5zdWJqZWN0LnJlZ2lzdGVyKCdtYXhJc1VwZGF0ZWQnLCB0aGlzKTtcbiAgICB0aGlzLnN1YmplY3QucmVnaXN0ZXIoJ3N0ZXBJc1VwZGF0ZWQnLCB0aGlzKTtcbiAgfVxuXG4gIHVwZGF0ZShldmVudFR5cGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChldmVudFR5cGUgaW4gdGhpcy5ldmVudHMpIHtcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50VHlwZV0oKTtcbiAgICB9XG4gIH1cblxuICBnZXRUaHVtYnNWYWx1ZXMoKTogSVRodW1ic1ZhbHVlcyB7XG4gICAgcmV0dXJuIHRoaXMuc2xpZGVyLnNpbXBsZVNsaWRlcignZ2V0VGh1bWJzVmFsdWVzJyk7XG4gIH1cblxuICBnZXRNaW4oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zbGlkZXIuc2ltcGxlU2xpZGVyKCdnZXRNaW4nKTtcbiAgfVxuXG4gIGdldE1heCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNsaWRlci5zaW1wbGVTbGlkZXIoJ2dldE1heCcpO1xuICB9XG5cbiAgZ2V0U3RlcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNsaWRlci5zaW1wbGVTbGlkZXIoJ2dldFN0ZXAnKTtcbiAgfVxuXG4gIGdldFNjYWxlU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2xpZGVyLnNpbXBsZVNsaWRlcignZ2V0U2NhbGVTdGF0ZScpO1xuICB9XG5cbiAgZ2V0UG9wVXBzU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2xpZGVyLnNpbXBsZVNsaWRlcignZ2V0UG9wVXBzU3RhdGUnKTtcbiAgfVxuXG4gIGdldFR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zbGlkZXIuc2ltcGxlU2xpZGVyKCdnZXRUeXBlJyk7XG4gIH1cblxuICBnZXRPcmllbnRhdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNsaWRlci5zaW1wbGVTbGlkZXIoJ2dldE9yaWVudGF0aW9uJyk7XG4gIH1cblxuICByZWZyZXNoU2xpZGVyU3RhdGUoc2xpZGVyU2V0dGluZ3M6IElTbGlkZXJTZXR0aW5ncyk6IHZvaWQge1xuICAgIHRoaXMuc2xpZGVyLnNpbXBsZVNsaWRlcigncmVmcmVzaFNsaWRlclN0YXRlJywgc2xpZGVyU2V0dGluZ3MpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYW5lbE1vZGVsO1xuIiwiaW1wb3J0IHsgSU9ic2VydmVyIH0gZnJvbSAnLi4vLi4vc2ltcGxlLXNsaWRlci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IElTdWJqZWN0RXZlbnRzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgQ29udHJvbFBhbmVsTW9kZWwgZnJvbSAnLi4vbW9kZWwvY29udHJvbC1wYW5lbC1tb2RlbCc7XG5pbXBvcnQgQ29udHJvbFBhbmVsVmlldyBmcm9tICcuLi92aWV3L2NvbnRyb2wtcGFuZWwtdmlldyc7XG5cbmNsYXNzIENvbnRyb2xQYW5lbENvbnRyb2xsZXIgaW1wbGVtZW50cyBJT2JzZXJ2ZXIge1xuICBwcml2YXRlIHZpZXc6IENvbnRyb2xQYW5lbFZpZXc7XG4gIHByaXZhdGUgbW9kZWw6IENvbnRyb2xQYW5lbE1vZGVsO1xuXG4gIHByaXZhdGUgZXZlbnRzOiBJU3ViamVjdEV2ZW50cyA9IHtcbiAgICB0aHVtYnNQb3NpdGlvbnNJc1VwZGF0ZWQ6ICgpID0+IHtcbiAgICAgIHRoaXMudmlldy5zZXRUaHVtYnNWYWx1ZXModGhpcy5tb2RlbC5nZXRUaHVtYnNWYWx1ZXMoKSk7XG4gICAgfSxcbiAgICBtaW5Jc1VwZGF0ZWQ6ICgpID0+IHRoaXMudmlldy5zZXRNaW5WYWx1ZSh0aGlzLm1vZGVsLmdldE1pbigpKSxcbiAgICBtYXhJc1VwZGF0ZWQ6ICgpID0+IHRoaXMudmlldy5zZXRNYXhWYWx1ZSh0aGlzLm1vZGVsLmdldE1heCgpKSxcbiAgICBzdGVwSXNVcGRhdGVkOiAoKSA9PiB0aGlzLnZpZXcuc2V0U3RlcCh0aGlzLm1vZGVsLmdldFN0ZXAoKSksXG4gICAgY29udHJvbFBhbmVsRGF0YVVwZGF0ZWQ6ICgpID0+IHtcbiAgICAgIGNvbnN0IHNsaWRlclNldHRpbmdzID0ge1xuICAgICAgICBvcmllbnRhdGlvbjogdGhpcy52aWV3LmdldE9yaWVudGF0aW9uKCksXG4gICAgICAgIHR5cGU6IHRoaXMudmlldy5nZXRUeXBlKCksXG4gICAgICAgIHNjYWxlOiB0aGlzLnZpZXcuZ2V0U2NhbGVTdGF0ZSgpLFxuICAgICAgICBwb3BVcHM6IHRoaXMudmlldy5nZXRQb3BVcHNTdGF0ZSgpLFxuICAgICAgICBtaW46IHRoaXMudmlldy5nZXRNaW4oKSxcbiAgICAgICAgbWF4OiB0aGlzLnZpZXcuZ2V0TWF4KCksXG4gICAgICAgIHN0ZXA6IHRoaXMudmlldy5nZXRTdGVwKCksXG4gICAgICAgIHRodW1iT25lVmFsdWU6IHRoaXMudmlldy5nZXRUaHVtYk9uZVZhbHVlKCksXG4gICAgICAgIHRodW1iVHdvVmFsdWU6IHRoaXMudmlldy5nZXRUaHVtYlR3b1ZhbHVlKCksXG4gICAgICB9O1xuICAgICAgdGhpcy5tb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2xpZGVyU2V0dGluZ3MpO1xuICAgIH0sXG4gIH07XG5cbiAgY29uc3RydWN0b3IodmlldzogQ29udHJvbFBhbmVsVmlldywgbW9kZWw6IENvbnRyb2xQYW5lbE1vZGVsKSB7XG4gICAgdGhpcy52aWV3ID0gdmlldztcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgdGhpcy5pbml0KCk7XG5cbiAgICB0aGlzLnN1YnNjcmliZVRvRXZlbnRzKCk7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvRXZlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMubW9kZWwucmVnaXN0ZXIoJ3RodW1ic1Bvc2l0aW9uc0lzVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMubW9kZWwucmVnaXN0ZXIoJ21pbklzVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMubW9kZWwucmVnaXN0ZXIoJ21heElzVXBkYXRlZCcsIHRoaXMpO1xuICAgIHRoaXMubW9kZWwucmVnaXN0ZXIoJ3N0ZXBJc1VwZGF0ZWQnLCB0aGlzKTtcbiAgICB0aGlzLnZpZXcucmVnaXN0ZXIoJ2NvbnRyb2xQYW5lbERhdGFVcGRhdGVkJywgdGhpcyk7XG4gIH1cblxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMudmlldy5zZXRUaHVtYnNWYWx1ZXModGhpcy5tb2RlbC5nZXRUaHVtYnNWYWx1ZXMoKSk7XG4gICAgdGhpcy52aWV3LnNldE1pblZhbHVlKHRoaXMubW9kZWwuZ2V0TWluKCkpO1xuICAgIHRoaXMudmlldy5zZXRNYXhWYWx1ZSh0aGlzLm1vZGVsLmdldE1heCgpKTtcbiAgICB0aGlzLnZpZXcuc2V0U3RlcCh0aGlzLm1vZGVsLmdldFN0ZXAoKSk7XG4gICAgdGhpcy52aWV3LnNldFNjYWxlU3RhdGUodGhpcy5tb2RlbC5nZXRTY2FsZVN0YXRlKCkpO1xuICAgIHRoaXMudmlldy5zZXRQb3BVcHNTdGF0ZSh0aGlzLm1vZGVsLmdldFBvcFVwc1N0YXRlKCkpO1xuICAgIHRoaXMudmlldy5zZXRUeXBlUmFkaW8odGhpcy5tb2RlbC5nZXRUeXBlKCkpO1xuICAgIHRoaXMudmlldy5zZXRPcmllbnRhdGlvblJhZGlvKHRoaXMubW9kZWwuZ2V0T3JpZW50YXRpb24oKSk7XG4gIH1cblxuICB1cGRhdGUoZXZlbnRUeXBlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnRUeXBlIGluIHRoaXMuZXZlbnRzKSB7XG4gICAgICB0aGlzLmV2ZW50c1tldmVudFR5cGVdKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYW5lbENvbnRyb2xsZXI7XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vZGVtby9zY3NzL25vcm1hbGl6ZS5zY3NzXCI6IDIzLFxuXHRcIi4vZGVtby9zY3NzL3N0eWxlLnNjc3NcIjogMjUsXG5cdFwiLi9mb250cy9mb250cy5zY3NzXCI6IDI3LFxuXHRcIi4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvY2hlY2tib3gvX2FuaW1hdGlvbnMuc2Nzc1wiOiAyOSxcblx0XCIuL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L2NoZWNrYm94L2NoZWNrYm94LnNjc3NcIjogMzEsXG5cdFwiLi9wbHVnaW5zL2NvbnRyb2wtcGFuZWwvdmlldy9jb250cm9sLXBhbmVsL2NvbnRyb2wtcGFuZWwuc2Nzc1wiOiAzMyxcblx0XCIuL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L3JhZGlvLWJ1dHRvbi9fYW5pbWF0aW9ucy5zY3NzXCI6IDM1LFxuXHRcIi4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvcmFkaW8tYnV0dG9uL3JhZGlvLWJ1dHRvbi5zY3NzXCI6IDM3LFxuXHRcIi4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvdGV4dC1maWVsZC90ZXh0LWZpZWxkLnNjc3NcIjogMzksXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9wb3AtdXAvcG9wLXVwLnNjc3NcIjogNDEsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9wcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLnNjc3NcIjogNDMsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9zY2FsZS9zY2FsZS5zY3NzXCI6IDQ1LFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvc2xpZGVyL3NsaWRlci5zY3NzXCI6IDQ3LFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdGh1bWIvdGh1bWIuc2Nzc1wiOiA0OSxcblx0XCIuL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3RyYWNrL3RyYWNrLnNjc3NcIjogNTFcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyMjsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi00IS4vbm9ybWFsaXplLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTQhLi9zdHlsZS5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi00IS4vZm9udHMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0yIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtNCEuL19hbmltYXRpb25zLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0zIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTQhLi9jaGVja2JveC5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi00IS4vY29udHJvbC1wYW5lbC5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi00IS4vX2FuaW1hdGlvbnMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0yIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtNCEuL3JhZGlvLWJ1dHRvbi5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi00IS4vdGV4dC1maWVsZC5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi00IS4vcG9wLXVwLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0zIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTQhLi9wcm9ncmVzcy1iYXIuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0yIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtNCEuL3NjYWxlLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0zIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTQhLi9zbGlkZXIuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0yIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtNCEuL3RodW1iLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0zIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTQhLi90cmFjay5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vZGVtby9kZW1vLnRzXCI6IDE0LFxuXHRcIi4vaW5kZXgudHNcIjogMTMsXG5cdFwiLi9wbHVnaW5zL2NvbnRyb2wtcGFuZWwvY29udHJvbC1wYW5lbC50c1wiOiA1NCxcblx0XCIuL3BsdWdpbnMvY29udHJvbC1wYW5lbC9jb250cm9sbGVyL2NvbnRyb2wtcGFuZWwtY29udHJvbGxlci50c1wiOiAyMSxcblx0XCIuL3BsdWdpbnMvY29udHJvbC1wYW5lbC9pbnRlcmZhY2VzLnRzXCI6IDU2LFxuXHRcIi4vcGx1Z2lucy9jb250cm9sLXBhbmVsL21vZGVsL2NvbnRyb2wtcGFuZWwtbW9kZWwudHNcIjogMjAsXG5cdFwiLi9wbHVnaW5zL2NvbnRyb2wtcGFuZWwvdmlldy9jaGVja2JveC9jaGVja2JveC50c1wiOiAxOSxcblx0XCIuL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L2NvbnRyb2wtcGFuZWwtdmlldy50c1wiOiAxNSxcblx0XCIuL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L2NvbnRyb2wtcGFuZWwvY29udHJvbC1wYW5lbC50c1wiOiAxNixcblx0XCIuL3BsdWdpbnMvY29udHJvbC1wYW5lbC92aWV3L2dyb3VwLWVsZW1lbnRzLnRzXCI6IDE3LFxuXHRcIi4vcGx1Z2lucy9jb250cm9sLXBhbmVsL3ZpZXcvcmFkaW8tYnV0dG9uL3JhZGlvLWJ1dHRvbi50c1wiOiAxOCxcblx0XCIuL3BsdWdpbnMvc2ltcGxlLXNsaWRlci9jb250cm9sbGVyL3NpbXBsZS1zbGlkZXItY29udHJvbGxlci50c1wiOiA2LFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL2ludGVyZmFjZXMudHNcIjogNTcsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvbW9kZWwvX19tb2Nrc19fL3NpbXBsZS1zbGlkZXItbW9kZWwudHNcIjogNTgsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvbW9kZWwvc2ltcGxlLXNsaWRlci1tb2RlbC50c1wiOiAzLFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3NpbXBsZS1zbGlkZXIudHNcIjogNTksXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvc3ViamVjdC9zdWJqZWN0LnRzXCI6IDIsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9fX21vY2tzX18vc2ltcGxlLXNsaWRlci12aWV3LnRzXCI6IDYwLFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvcG9wLXVwL19fbW9ja3NfXy9wb3AtdXAudHNcIjogNjEsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9wb3AtdXAvcG9wLXVwLnRzXCI6IDEwLFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvcHJvZ3Jlc3MtYmFyL19fbW9ja3NfXy9wcm9ncmVzcy1iYXIudHNcIjogNjIsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9wcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLnRzXCI6IDExLFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvc2NhbGUvX19tb2Nrc19fL3NjYWxlLnRzXCI6IDYzLFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvc2NhbGUvc2NhbGUudHNcIjogMTIsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9zaW1wbGUtc2xpZGVyLXZpZXcudHNcIjogNCxcblx0XCIuL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NsaWRlci9fX21vY2tzX18vc2xpZGVyLnRzXCI6IDY0LFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvc2xpZGVyL3NsaWRlci50c1wiOiA3LFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdGh1bWIvX19tb2Nrc19fL3RodW1iLnRzXCI6IDY1LFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdGh1bWIvdGh1bWIudHNcIjogOSxcblx0XCIuL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3RyYWNrL19fbW9ja3NfXy90cmFjay50c1wiOiA2Nixcblx0XCIuL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3RyYWNrL3RyYWNrLnRzXCI6IDgsXG5cdFwiLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy91aS1jb250cm9sL19fbW9ja3NfXy91aS1jb250cm9sLnRzXCI6IDY3LFxuXHRcIi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdWktY29udHJvbC91aS1jb250cm9sLnRzXCI6IDEsXG5cdFwiLi90ZXN0cy9wb3AtdXAudGVzdC50c1wiOiA2OCxcblx0XCIuL3Rlc3RzL3Byb2dyZXNzLWJhci50ZXN0LnRzXCI6IDY5LFxuXHRcIi4vdGVzdHMvc2NhbGUudGVzdC50c1wiOiA3MCxcblx0XCIuL3Rlc3RzL3NpbXBsZS1zbGlkZXItY29udHJvbGxlci50ZXN0LnRzXCI6IDcxLFxuXHRcIi4vdGVzdHMvc2ltcGxlLXNsaWRlci1tb2RlbC50ZXN0LnRzXCI6IDcyLFxuXHRcIi4vdGVzdHMvc2ltcGxlLXNsaWRlci12aWV3LnRlc3QudHNcIjogNzMsXG5cdFwiLi90ZXN0cy9zbGlkZXIudGVzdC50c1wiOiA3NCxcblx0XCIuL3Rlc3RzL3N1YmplY3QudGVzdC50c1wiOiA3NSxcblx0XCIuL3Rlc3RzL3RodW1iLnRlc3QudHNcIjogNzYsXG5cdFwiLi90ZXN0cy90cmFjay50ZXN0LnRzXCI6IDc3LFxuXHRcIi4vdGVzdHMvdWktY29udHJvbC50ZXN0LnRzXCI6IDc4XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNTM7IiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLW5hbWVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG5pbXBvcnQgQ29udHJvbFBhbmVsVmlldyBmcm9tICcuL3ZpZXcvY29udHJvbC1wYW5lbC12aWV3JztcbmltcG9ydCBDb250cm9sUGFuZWxNb2RlbCBmcm9tICcuL21vZGVsL2NvbnRyb2wtcGFuZWwtbW9kZWwnO1xuaW1wb3J0IENvbnRyb2xQYW5lbENvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyL2NvbnRyb2wtcGFuZWwtY29udHJvbGxlcic7XG5cbigoJCkgPT4ge1xuICBjb25zdCBtZXRob2RzOiBhbnkgPSB7XG4gICAgaW5pdCgpOiB2b2lkIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKHRoaXM6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgQ29udHJvbFBhbmVsVmlldyh0aGlzKTtcbiAgICAgICAgY29uc3QgbW9kZWwgPSBuZXcgQ29udHJvbFBhbmVsTW9kZWwoJCh0aGlzKSk7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbFBhbmVsQ29udHJvbGxlcih2aWV3LCBtb2RlbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xuXG4gICQuZm4uY29udHJvbFBhbmVsID0gZnVuY3Rpb24gKGFjdGlvbj86IHN0cmluZywgYXJncz8pOiBKUXVlcnk8SFRNTEVsZW1lbnQ+IHtcbiAgICBsZXQgbWV0aG9kOiBhbnk7XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycgJiYgbWV0aG9kc1thY3Rpb25dKSB7XG4gICAgICBtZXRob2QgPSBtZXRob2RzW2FjdGlvbl0uY2FsbCh0aGlzLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdvYmplY3QnIHx8ICFhY3Rpb24pIHtcbiAgICAgIG1ldGhvZCA9IG1ldGhvZHMuaW5pdC5jYWxsKHRoaXMsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkLmVycm9yKGDQnNC10YLQvtC0INGBINC40LzQtdC90LXQvCAke2FjdGlvbn0g0L3QtSDRgdGD0YnQtdGB0YLQstGD0LXRgiDQtNC70Y8galF1ZXJ5LmNvbnRyb2xQYW5lbGApO1xuICAgICAgbWV0aG9kID0gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gbWV0aG9kO1xuICB9O1xufSkoalF1ZXJ5KTtcbiIsImltcG9ydCBTdWJqZWN0IGZyb20gJy4uLy4uLy4uL3NpbXBsZS1zbGlkZXIvc3ViamVjdC9zdWJqZWN0JztcblxuY2xhc3MgVGV4dEZpZWxkIGV4dGVuZHMgU3ViamVjdCB7XG4gIHByaXZhdGUgY29udHJvbDogSFRNTERpdkVsZW1lbnQ7XG4gIHByaXZhdGUgZmllbGQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHByaXZhdGUgbGFiZWw6IEhUTUxMYWJlbEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IobGFiZWxUZXh0OiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29udHJvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHRoaXMubGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuXG4gICAgdGhpcy5pbml0KGxhYmVsVGV4dCk7XG4gIH1cblxuICBnZXRDb250cm9sKCk6IEhUTUxEaXZFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sO1xuICB9XG5cbiAgZ2V0VmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5maWVsZC52YWx1ZSwgMTApO1xuICB9XG5cbiAgc2V0VmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuZmllbGQudmFsdWUgPSBgJHt2YWx1ZX1gO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KGxhYmVsVGV4dDogc3RyaW5nKSB7XG4gICAgdGhpcy5jb250cm9sLmNsYXNzTGlzdC5hZGQoJ3RleHQtZmllbGQnKTtcblxuICAgIHRoaXMuZmllbGQudHlwZSA9ICdudW1iZXInO1xuICAgIHRoaXMuZmllbGQuY2xhc3NMaXN0LmFkZCgndGV4dC1maWVsZF9faW5wdXQnKTtcbiAgICB0aGlzLmhhbmRsZVRleHRGaWVsZEJsdXIgPSB0aGlzLmhhbmRsZVRleHRGaWVsZEJsdXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLmhhbmRsZVRleHRGaWVsZEJsdXIpO1xuICAgIHRoaXMuZmllbGQub25rZXlwcmVzcyA9IFRleHRGaWVsZC5yZW1vdmVOb25EaWdpdENoYXI7XG5cbiAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC5hZGQoJ3RleHQtZmllbGRfX2xhYmVsJyk7XG4gICAgdGhpcy5sYWJlbC5pbm5lclRleHQgPSBsYWJlbFRleHQ7XG4gICAgdGhpcy5sYWJlbC5hcHBlbmQodGhpcy5maWVsZCk7XG5cbiAgICB0aGlzLmNvbnRyb2wuYXBwZW5kKHRoaXMubGFiZWwpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUZXh0RmllbGRCbHVyKCkge1xuICAgIHRoaXMubm90aWZ5KCdjb250cm9sUGFuZWxEYXRhVXBkYXRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqINCj0LTQsNC70Y/QtdGCINC40Lcg0YLQtdC60YHRgtC+0LLQvtCz0L4g0L/QvtC70Y8g0YHQuNC80LLQvtC70YssINC90LUg0Y/QstC70Y/RjtGJ0LjQtdGB0Y8g0YbQuNGE0YDQsNC80LhcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtINGB0L7QsdGL0YLQuNC1INC60LvQsNCy0LjQsNGC0YPRgNGLXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZW1vdmVOb25EaWdpdENoYXIoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gL1stXFxkXS8udGVzdChldmVudC5rZXkpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRGaWVsZDtcbiIsImltcG9ydCB7IElTaXplLCBJU2xpZGVyU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kZWwge1xuICBwcml2YXRlIG9yaWVudGF0aW9uO1xuICBwcml2YXRlIHR5cGU7XG4gIHByaXZhdGUgc2NhbGU7XG4gIHByaXZhdGUgcG9wVXBzO1xuICBwcml2YXRlIG1pbjtcbiAgcHJpdmF0ZSBtYXg7XG4gIHByaXZhdGUgc3RlcDtcbiAgcHJpdmF0ZSBzY2FsZVBvaW50U2l6ZSA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICBwcml2YXRlIFRFU1RfT0sgPSB0cnVlO1xuICBzdWJqZWN0ID0ge1xuICAgIHJlZ2lzdGVyOiAoKTogYm9vbGVhbiA9PiB0cnVlLFxuICAgIHVuc3Vic2NyaWJlOiAoKTogYm9vbGVhbiA9PiB0cnVlLFxuICAgIG5vdGlmeTogKCk6IGJvb2xlYW4gPT4gdHJ1ZSxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihzZXR0aW5nczogSVNsaWRlclNldHRpbmdzKSB7XG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IHNldHRpbmdzLm9yaWVudGF0aW9uO1xuICAgIHRoaXMudHlwZSA9IHNldHRpbmdzLnR5cGU7XG4gICAgdGhpcy5zY2FsZSA9IHNldHRpbmdzLnNjYWxlO1xuICAgIHRoaXMucG9wVXBzID0gc2V0dGluZ3MucG9wVXBzO1xuICAgIHRoaXMubWluID0gc2V0dGluZ3MubWluO1xuICAgIHRoaXMubWF4ID0gc2V0dGluZ3MubWF4O1xuICAgIHRoaXMuc3RlcCA9IHNldHRpbmdzLnN0ZXA7XG4gIH1cblxuICBzZXRTbGlkZXJTaXplKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBzZXRUaHVtYlNpemUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIHNldFRodW1iUG9zaXRpb25PbkNsaWNrUG9zaXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIGdldE9yaWVudGF0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb247XG4gIH1cblxuICBnZXRUeXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgfVxuXG4gIGdldFBvcFVwc1N0YXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBvcFVwcztcbiAgfVxuXG4gIGdldFRodW1ic1Bvc2l0aW9ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgZ2V0UG9wVXBzUGFyYW1zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBnZXRQcm9ncmVzc0JhclBhcmFtcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgdXBkYXRlVGh1bWJzU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIGdldFNjYWxlU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2NhbGU7XG4gIH1cblxuICBnZXRNaW4oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5taW47XG4gIH1cblxuICBnZXRNYXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5tYXg7XG4gIH1cblxuICBnZXRTdGVwKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc3RlcDtcbiAgfVxuXG4gIGdldFNjYWxlUG9pbnRzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBzZXRTY2FsZVBvaW50U2l6ZShzaXplOiBJU2l6ZSk6IHZvaWQge1xuICAgIHRoaXMuc2NhbGVQb2ludFNpemUgPSBzaXplO1xuICB9XG5cbiAgcmVjYWxjdWxhdGVTdGVwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1kYW5nbGUgKi9cblxuaW1wb3J0IHsgSVNsaWRlclNldHRpbmdzLCBJU3ViamVjdCwgSVRodW1ic1ZhbHVlcyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgU2ltcGxlU2xpZGVyTW9kZWwgZnJvbSAnLi9tb2RlbC9zaW1wbGUtc2xpZGVyLW1vZGVsJztcbmltcG9ydCBTaW1wbGVTbGlkZXJDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlci9zaW1wbGUtc2xpZGVyLWNvbnRyb2xsZXInO1xuaW1wb3J0IFNpbXBsZVNsaWRlclZpZXcgZnJvbSAnLi92aWV3L3NpbXBsZS1zbGlkZXItdmlldyc7XG5cbigoJCkgPT4ge1xuICAvLyDQndCw0YHRgtGA0L7QudC60Lgg0L/Qu9Cw0LPQuNC90LAg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y5cbiAgY29uc3QgZGVmYXVsdFNldHRpbmdzID0ge1xuICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcsXG4gICAgdHlwZTogJ3JhbmdlJyxcbiAgICBzY2FsZTogdHJ1ZSxcbiAgICBwb3BVcHM6IHRydWUsXG4gICAgbWluOiAwLFxuICAgIG1heDogMTAsXG4gICAgc3RlcDogMSxcbiAgICB0aHVtYk9uZVZhbHVlOiAzLFxuICAgIHRodW1iVHdvVmFsdWU6IDcsXG4gICAgc2xpZGVyU2l6ZTogeyB3aWR0aDogNTAwLCBoZWlnaHQ6IDEwIH0sXG4gICAgdGh1bWJTaXplOiB7IHdpZHRoOiAyMCwgaGVpZ2h0OiAyMCB9LFxuICB9O1xuXG4gIC8vIEFQSSDQvNC10YLQvtC00Ysg0L/Qu9Cw0LPQuNC90LBcbiAgY29uc3QgbWV0aG9kczogYW55ID0ge1xuICAgIGluaXQob3B0aW9uczogSVNsaWRlclNldHRpbmdzKTogdm9pZCB7XG4gICAgICAvLyDQntCx0L3QvtCy0LvQtdC90LjQtSDQvdCw0YHRgtGA0L7QtdC6INC/0LvQsNCz0LjQvdCwINCyINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjQuCDRgSDQv9C+0LvRg9GH0LXQvdC90YvQvNC4INC/0LDRgNCw0LzQtdGC0YDQsNC80LhcbiAgICAgIGNvbnN0IHNldHRpbmdzOiBJU2xpZGVyU2V0dGluZ3MgPSAkLmV4dGVuZChkZWZhdWx0U2V0dGluZ3MsIG9wdGlvbnMpO1xuXG4gICAgICAvLyDQodC+0LfQtNCw0L3QuNC1INGB0LvQsNC50LTQtdGA0L7QslxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBjcmVhdGVTbGlkZXIodGhpczogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSBuZXcgU2ltcGxlU2xpZGVyTW9kZWwoc2V0dGluZ3MpO1xuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFNpbXBsZVNsaWRlclZpZXcodGhpcyk7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgU2ltcGxlU2xpZGVyQ29udHJvbGxlcih7XG4gICAgICAgICAgbW9kZWwsXG4gICAgICAgICAgdmlldyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh0aGlzKS5kYXRhKCdzZXR0aW5ncycsIHNldHRpbmdzKTtcbiAgICAgICAgJCh0aGlzKS5kYXRhKCdjb250cm9sbGVyJywgY29udHJvbGxlcik7XG4gICAgICAgICQodGhpcykuZGF0YSgnbW9kZWwnLCBtb2RlbCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldE1vZGVsU3ViamVjdCgpOiBJU3ViamVjdCB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCkubW9kZWwuc3ViamVjdDtcbiAgICB9LFxuICAgIGdldFRodW1ic1ZhbHVlcygpOiBJVGh1bWJzVmFsdWVzIHtcbiAgICAgIHJldHVybiAkKHRoaXMpLmRhdGEoKS5tb2RlbC5nZXRUaHVtYnNWYWx1ZXMoKTtcbiAgICB9LFxuICAgIGdldE1pbigpOiBudW1iZXIge1xuICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgpLm1vZGVsLmdldE1pbigpO1xuICAgIH0sXG4gICAgZ2V0TWF4KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCkubW9kZWwuZ2V0TWF4KCk7XG4gICAgfSxcbiAgICBnZXRTdGVwKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCkubW9kZWwuZ2V0U3RlcCgpO1xuICAgIH0sXG4gICAgZ2V0U2NhbGVTdGF0ZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAkKHRoaXMpLmRhdGEoKS5tb2RlbC5nZXRTY2FsZVN0YXRlKCk7XG4gICAgfSxcbiAgICBnZXRQb3BVcHNTdGF0ZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAkKHRoaXMpLmRhdGEoKS5tb2RlbC5nZXRQb3BVcHNTdGF0ZSgpO1xuICAgIH0sXG4gICAgZ2V0VHlwZSgpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgpLm1vZGVsLmdldFR5cGUoKTtcbiAgICB9LFxuICAgIGdldE9yaWVudGF0aW9uKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCkubW9kZWwuZ2V0T3JpZW50YXRpb24oKTtcbiAgICB9LFxuICAgIHJlZnJlc2hTbGlkZXJTdGF0ZShzbGlkZXJTZXR0aW5nczogSVNsaWRlclNldHRpbmdzKTogdm9pZCB7XG4gICAgICAkKHRoaXMpLmRhdGEoKS5tb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2xpZGVyU2V0dGluZ3MpO1xuICAgIH0sXG4gIH07XG5cbiAgJC5mbi5zaW1wbGVTbGlkZXIgPSBmdW5jdGlvbiBwbHVnKFxuICAgIGFjdGlvbj86IHN0cmluZyB8IElTbGlkZXJTZXR0aW5ncyxcbiAgICBhcmdzPyxcbiAgKTogYW55IHtcbiAgICBsZXQgbWV0aG9kOiBhbnk7XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycgJiYgbWV0aG9kc1thY3Rpb25dKSB7XG4gICAgICBtZXRob2QgPSBtZXRob2RzW2FjdGlvbl0uY2FsbCh0aGlzLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdvYmplY3QnIHx8ICFhY3Rpb24pIHtcbiAgICAgIG1ldGhvZCA9IG1ldGhvZHMuaW5pdC5jYWxsKHRoaXMsIGFjdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICQuZXJyb3IoYNCc0LXRgtC+0LQg0YEg0LjQvNC10L3QtdC8ICR7YWN0aW9ufSDQvdC1INGB0YPRidC10YHRgtCy0YPQtdGCINC00LvRjyBqUXVlcnkuc2ltcGxlU2xpZGVyYCk7XG4gICAgICBtZXRob2QgPSB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBtZXRob2Q7XG4gIH07XG59KShqUXVlcnkpO1xuIiwiaW1wb3J0IHsgSVNpemUgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlldyB7XG4gIHByaXZhdGUgc2NhbGVQb2ludFNpemUgPSB7IHdpZHRoOiAxMCwgaGVpZ2h0OiAxMCB9O1xuICBwcml2YXRlIHdyYXBwZXI6IEhUTUxEaXZFbGVtZW50O1xuICBwcml2YXRlIFRFU1RfT0sgPSB0cnVlO1xuICBzdWJqZWN0ID0ge1xuICAgIHJlZ2lzdGVyOiAoKTogYm9vbGVhbiA9PiB0cnVlLFxuICAgIHVuc3Vic2NyaWJlOiAoKTogYm9vbGVhbiA9PiB0cnVlLFxuICAgIG5vdGlmeTogKCk6IGJvb2xlYW4gPT4gdHJ1ZSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcih3cmFwcGVyOiBIVE1MRGl2RWxlbWVudCkge1xuICAgIHRoaXMud3JhcHBlciA9IHdyYXBwZXI7XG4gIH1cblxuICBnZXRTbGlkZXJTaXplKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBnZXRUaHVtYlNpemUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIGdldFRodW1ic1Bvc2l0aW9ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgZ2V0VHJhY2tDbGlja1Bvc2l0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBnZXRTY2FsZUNsaWNrUG9zaXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIHN3aXRjaFRvSG9yaXpvbnRhbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgc3dpdGNoVG9WZXJ0aWNhbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgc3dpdGNoVG9TaW5nbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIHN3aXRjaFRvUmFuZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIGVuYWJsZVBvcFVwcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgZGlzYWJsZVBvcFVwcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgZW5hYmxlU2NhbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIGRpc2FibGVTY2FsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgZ2V0U2NhbGVQb2ludFNpemUoKTogSVNpemUge1xuICAgIHJldHVybiB0aGlzLnNjYWxlUG9pbnRTaXplO1xuICB9XG5cbiAgYWRkU2NhbGVQb2ludHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIHVwZGF0ZVRodW1icygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgdXBkYXRlUG9wVXBzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICB1cGRhdGVQcm9ncmVzc0JhcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG59XG4iLCJpbXBvcnQgVUlDb250cm9sIGZyb20gJy4uLy4uL3VpLWNvbnRyb2wvdWktY29udHJvbCc7XG5cbmplc3QubW9jaygnLi4vLi4vdWktY29udHJvbC91aS1jb250cm9sJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcFVwIGV4dGVuZHMgVUlDb250cm9sIHtcbiAgcHJpdmF0ZSBURVNUX09LID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignc2xpZGVyX19wb3AtdXAnKTtcbiAgfVxuXG4gIHVwZGF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG59XG4iLCJpbXBvcnQgVUlDb250cm9sIGZyb20gJy4uLy4uL3VpLWNvbnRyb2wvdWktY29udHJvbCc7XG5cbmplc3QubW9jaygnLi4vLi4vdWktY29udHJvbC91aS1jb250cm9sJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzQmFyIGV4dGVuZHMgVUlDb250cm9sIHtcbiAgcHJpdmF0ZSBURVNUX09LID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignc2xpZGVyX19wcm9ncmVzcy1iYXInKTtcbiAgfVxuXG4gIHVwZGF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NhbGVQb2ludFBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IFVJQ29udHJvbCBmcm9tICcuLi8uLi91aS1jb250cm9sL3VpLWNvbnRyb2wnO1xuXG5qZXN0Lm1vY2soJy4uLy4uL3VpLWNvbnRyb2wvdWktY29udHJvbCcpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3BVcCBleHRlbmRzIFVJQ29udHJvbCB7XG4gIHByaXZhdGUgVEVTVF9PSyA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3NsaWRlcl9fc2NhbGUnKTtcbiAgfVxuXG4gIGdldFBvaW50U2l6ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgYWRkUG9pbnRzKHBvaW50czogSVNjYWxlUG9pbnRQYXJhbXNbXSk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdzY2FsZS1wb2ludCcpO1xuICAgICAgdGhpcy5jb250cm9sLmFwcGVuZChkaXYpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFVJQ29udHJvbCBmcm9tICcuLi8uLi91aS1jb250cm9sL3VpLWNvbnRyb2wnO1xuXG5qZXN0Lm1vY2soJy4uLy4uL3VpLWNvbnRyb2wvdWktY29udHJvbCcpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbGlkZXIgZXh0ZW5kcyBVSUNvbnRyb2wge1xuICBURVNUX09LID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignc2xpZGVyJyk7XG4gIH1cblxuICBhcHBlbmQoY29udHJvbDogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wuYXBwZW5kKGNvbnRyb2wpO1xuICB9XG5cbiAgcmVzZXRNYXJnaW5zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBzZXRNYXJnaW5zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cbn1cbiIsImltcG9ydCBVSUNvbnRyb2wgZnJvbSAnLi4vLi4vdWktY29udHJvbC91aS1jb250cm9sJztcblxuamVzdC5tb2NrKCcuLi8uLi91aS1jb250cm9sL3VpLWNvbnRyb2wnKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGh1bWIgZXh0ZW5kcyBVSUNvbnRyb2wge1xuICBwcml2YXRlIFRFU1RfT0sgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdzbGlkZXJfX3RodW1iJyk7XG4gIH1cblxuICByZXNldFpJbmRleCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgbW92ZVRvKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICByZWdpc3RlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG59XG4iLCJpbXBvcnQgVUlDb250cm9sIGZyb20gJy4uLy4uL3VpLWNvbnRyb2wvdWktY29udHJvbCc7XG5cbmplc3QubW9jaygnLi4vLi4vdWktY29udHJvbC91aS1jb250cm9sJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNrIGV4dGVuZHMgVUlDb250cm9sIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3NsaWRlcl9fdHJhY2snKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlDb250cm9sIHtcbiAgcHJvdGVjdGVkIGNvbnRyb2w6IEhUTUxEaXZFbGVtZW50O1xuICBwcm90ZWN0ZWQgbWFpbkNsYXNzOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBURVNUX09LID0gdHJ1ZTtcbiAgc3ViamVjdCA9IHtcbiAgICByZWdpc3RlcjogKCk6IGJvb2xlYW4gPT4gdHJ1ZSxcbiAgICB1bnN1YnNjcmliZTogKCk6IGJvb2xlYW4gPT4gdHJ1ZSxcbiAgICBub3RpZnk6ICgpOiBib29sZWFuID0+IHRydWUsXG4gIH07XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29udHJvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuY29udHJvbCA9IGNvbnRyb2w7XG4gICAgdGhpcy5tYWluQ2xhc3MgPSBuYW1lO1xuICAgIHRoaXMuY29udHJvbC5jbGFzc0xpc3QuYWRkKGAke25hbWV9YCk7XG4gIH1cblxuICBnZXRQb3NpdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG5cbiAgZ2V0Q29udHJvbCgpOiBIVE1MRGl2RWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbDtcbiAgfVxuXG4gIGdldFNpemUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuVEVTVF9PSztcbiAgfVxuXG4gIHN3aXRjaFRvSG9yaXpvbnRhbCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZShgJHt0aGlzLm1haW5DbGFzc31fdmVydGljYWxgKTtcbiAgICB0aGlzLmNvbnRyb2wuY2xhc3NMaXN0LmFkZChgJHt0aGlzLm1haW5DbGFzc31faG9yaXpvbnRhbGApO1xuICB9XG5cbiAgc3dpdGNoVG9WZXJ0aWNhbCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZShgJHt0aGlzLm1haW5DbGFzc31faG9yaXpvbnRhbGApO1xuICAgIHRoaXMuY29udHJvbC5jbGFzc0xpc3QuYWRkKGAke3RoaXMubWFpbkNsYXNzfV92ZXJ0aWNhbGApO1xuICB9XG5cbiAgcmVtb3ZlKCk6IHZvaWQge1xuICAgIHRoaXMuY29udHJvbC5yZW1vdmUoKTtcbiAgfVxuXG4gIGdldE9yaWVudGF0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBnZXRSZWN0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLlRFU1RfT0s7XG4gIH1cblxuICBnZXRTdHlsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5URVNUX09LO1xuICB9XG59XG4iLCIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cblxuaW1wb3J0IFBvcFVwIGZyb20gJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3BvcC11cC9wb3AtdXAnO1xuXG5sZXQgcG9wVXA6IFBvcFVwO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgcG9wVXAgPSBuZXcgUG9wVXAoKTtcbn0pO1xuXG5kZXNjcmliZSgnVXBkYXRlJywgKCkgPT4ge1xuICB0ZXN0KCdQb3B1cCB2YWx1ZSBzaG91bGQgYmUgNTAnLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0geyB2YWx1ZTogNTAsIHBvc2l0aW9uOiB7IGxlZnQ6IDMwLCB0b3A6IDUwIH0gfTtcbiAgICBwb3BVcC51cGRhdGUocGFyYW1zKTtcbiAgICBleHBlY3QocG9wVXAuZ2V0Q29udHJvbCgpLmlubmVySFRNTCkudG9CZSgnNTAnKTtcbiAgfSk7XG4gIHRlc3QoJ1BvcHVwIHZhbHVlIHNob3VsZCBiZSAxMjAnLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0geyB2YWx1ZTogMTIwLCBwb3NpdGlvbjogeyBsZWZ0OiAzMCwgdG9wOiA1MCB9IH07XG4gICAgcG9wVXAudXBkYXRlKHBhcmFtcyk7XG4gICAgZXhwZWN0KHBvcFVwLmdldENvbnRyb2woKS5pbm5lckhUTUwpLnRvQmUoJzEyMCcpO1xuICB9KTtcbiAgdGVzdCgnUG9wdXAgcG9zaXRpb24gc2hvdWxkIGJlIHsgbGVmdDogMzAsIHRvcDogNTAgfScsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7IHZhbHVlOiA1MCwgcG9zaXRpb246IHsgbGVmdDogMzAsIHRvcDogNTAgfSB9O1xuICAgIHBvcFVwLnVwZGF0ZShwYXJhbXMpO1xuICAgIGV4cGVjdChwb3BVcC5nZXRDb250cm9sKCkuc3R5bGUubGVmdCkudG9CZSgnMzBweCcpO1xuICAgIGV4cGVjdChwb3BVcC5nZXRDb250cm9sKCkuc3R5bGUudG9wKS50b0JlKCc1MHB4Jyk7XG4gIH0pO1xuICB0ZXN0KCdQb3B1cCBwb3NpdGlvbiBzaG91bGQgYmUgeyBsZWZ0OiA5MCwgdG9wOiAxNCB9JywgKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHsgdmFsdWU6IDUwLCBwb3NpdGlvbjogeyBsZWZ0OiA5MCwgdG9wOiAxNCB9IH07XG4gICAgcG9wVXAudXBkYXRlKHBhcmFtcyk7XG4gICAgZXhwZWN0KHBvcFVwLmdldENvbnRyb2woKS5zdHlsZS5sZWZ0KS50b0JlKCc5MHB4Jyk7XG4gICAgZXhwZWN0KHBvcFVwLmdldENvbnRyb2woKS5zdHlsZS50b3ApLnRvQmUoJzE0cHgnKTtcbiAgfSk7XG59KTtcbiIsIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuXG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvcHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWJhcic7XG5cbmxldCBwcm9ncmVzc0JhcjogUHJvZ3Jlc3NCYXI7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBwcm9ncmVzc0JhciA9IG5ldyBQcm9ncmVzc0JhcigpO1xufSk7XG5cbmRlc2NyaWJlKCdVcGRhdGUnLCAoKSA9PiB7XG4gIHRlc3QoJ3Byb2dyZXNzQmFyIGxlZnQgc2hvdWxkIGJlIDEwcHgnLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgcG9zaXRpb246IHsgbGVmdDogMTAsIHRvcDogNSB9LFxuICAgICAgc2l6ZTogeyB3aWR0aDogNTAsIGhlaWdodDogMzAgfSxcbiAgICB9O1xuICAgIHByb2dyZXNzQmFyPy51cGRhdGUocGFyYW1zKTtcbiAgICBleHBlY3QocHJvZ3Jlc3NCYXI/LmdldENvbnRyb2woKS5zdHlsZS5sZWZ0KS50b0JlKCcxMHB4Jyk7XG4gIH0pO1xuICB0ZXN0KCdwcm9ncmVzc0JhciB0b3Agc2hvdWxkIGJlIDVweCcsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBwb3NpdGlvbjogeyBsZWZ0OiAxMCwgdG9wOiA1IH0sXG4gICAgICBzaXplOiB7IHdpZHRoOiA1MCwgaGVpZ2h0OiAzMCB9LFxuICAgIH07XG4gICAgcHJvZ3Jlc3NCYXIudXBkYXRlKHBhcmFtcyk7XG4gICAgZXhwZWN0KHByb2dyZXNzQmFyLmdldENvbnRyb2woKS5zdHlsZS50b3ApLnRvQmUoJzVweCcpO1xuICB9KTtcbiAgdGVzdCgncHJvZ3Jlc3NCYXIgd2lkdGggc2hvdWxkIGJlIDUwcHgnLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgcG9zaXRpb246IHsgbGVmdDogMTAsIHRvcDogNSB9LFxuICAgICAgc2l6ZTogeyB3aWR0aDogNTAsIGhlaWdodDogMzAgfSxcbiAgICB9O1xuICAgIHByb2dyZXNzQmFyLnVwZGF0ZShwYXJhbXMpO1xuICAgIGV4cGVjdChwcm9ncmVzc0Jhci5nZXRDb250cm9sKCkuc3R5bGUud2lkdGgpLnRvQmUoJzUwcHgnKTtcbiAgfSk7XG4gIHRlc3QoJ3Byb2dyZXNzQmFyIGhlaWdodCBzaG91bGQgYmUgMzBweCcsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBwb3NpdGlvbjogeyBsZWZ0OiAxMCwgdG9wOiA1IH0sXG4gICAgICBzaXplOiB7IHdpZHRoOiA1MCwgaGVpZ2h0OiAzMCB9LFxuICAgIH07XG4gICAgcHJvZ3Jlc3NCYXIudXBkYXRlKHBhcmFtcyk7XG4gICAgZXhwZWN0KHByb2dyZXNzQmFyLmdldENvbnRyb2woKS5zdHlsZS5oZWlnaHQpLnRvQmUoJzMwcHgnKTtcbiAgfSk7XG59KTtcbiIsIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLWRhbmdsZSAqL1xuXG5pbXBvcnQgU2NhbGUgZnJvbSAnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvc2NhbGUvc2NhbGUnO1xuXG5sZXQgc2NhbGU6IFNjYWxlO1xuXG5jb25zdCBpbml0RXZ0ID0gKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICBldnQuaW5pdE1vdXNlRXZlbnQoXG4gICAgJ2NsaWNrJyxcbiAgICB0cnVlLFxuICAgIHRydWUsXG4gICAgd2luZG93LFxuICAgIDAsXG4gICAgNTAsXG4gICAgODAsXG4gICAgNTAsXG4gICAgODAsXG4gICAgZmFsc2UsXG4gICAgZmFsc2UsXG4gICAgZmFsc2UsXG4gICAgZmFsc2UsXG4gICAgMCxcbiAgICBudWxsXG4gICk7XG59O1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgc2NhbGUgPSBuZXcgU2NhbGUoKTtcbn0pO1xuXG5kZXNjcmliZSgnQ2xpY2sgb24gc2NhbGUnLCAoKSA9PiB7XG4gIHRlc3QoJ1NldFBvc2l0aW9uIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnQnKTtcbiAgICBjb25zdCBzcHkgPSBzcHlPbjxhbnk+KHNjYWxlLCAnc2V0UG9zaXRpb24nKTtcblxuICAgIGluaXRFdnQoZXZ0KTtcbiAgICBzY2FsZVsnY29udHJvbCddLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblxuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ05vdGlmeSBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgY29uc3Qgc3B5ID0gc3B5T248YW55PihzY2FsZS5zdWJqZWN0LCAnbm90aWZ5Jyk7XG5cbiAgICBpbml0RXZ0KGV2dCk7XG4gICAgc2NhbGVbJ2NvbnRyb2wnXS5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZSBwb3NpdGlvbiBzaG91bGQgYmUge2xlZnQ6IDUwLCB0b3A6IDgwfScsICgpID0+IHtcbiAgICBjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgIGluaXRFdnQoZXZ0KTtcbiAgICBzY2FsZVsnY29udHJvbCddLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblxuICAgIGV4cGVjdChzY2FsZS5nZXRQb3NpdGlvbigpLmxlZnQpLnRvQmUoNTApO1xuICAgIGV4cGVjdChzY2FsZS5nZXRQb3NpdGlvbigpLnRvcCkudG9CZSg4MCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdBZGQgcG9pbnRzJywgKCkgPT4ge1xuICB0ZXN0KCdUaGUgbnVtYmVyIG9mIGFkZGVkIHBvaW50cyBzaG91bGQgYmUgMycsICgpID0+IHtcbiAgICBjb25zdCBwb2ludHMgPSBbXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiB7IGxlZnQ6IDUwLCB0b3A6IDEwMCB9LFxuICAgICAgICBzaXplOiB7IHdpZHRoOiA0MDAsIGhlaWdodDogMjAgfSxcbiAgICAgICAgdmFsdWU6IDEwLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IHsgbGVmdDogNTAsIHRvcDogMTAwIH0sXG4gICAgICAgIHNpemU6IHsgd2lkdGg6IDQwMCwgaGVpZ2h0OiAyMCB9LFxuICAgICAgICB2YWx1ZTogMTAsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogeyBsZWZ0OiA1MCwgdG9wOiAxMDAgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogNDAwLCBoZWlnaHQ6IDIwIH0sXG4gICAgICAgIHZhbHVlOiAxMCxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBzY2FsZS5hZGRQb2ludHMocG9pbnRzKTtcblxuICAgIGV4cGVjdChzY2FsZVsnY29udHJvbCddLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zY2FsZV9fcG9pbnQnKS5sZW5ndGgpLnRvQmUoMyk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZSBwb2ludCBzaXplIHNob3VsZCBiZSB7bGVmdDogNTBweCwgdG9wOiAxMDBweH0nLCAoKSA9PiB7XG4gICAgY29uc3QgcG9pbnRzID0gW1xuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogeyBsZWZ0OiA1MCwgdG9wOiAxMDAgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogNDAwLCBoZWlnaHQ6IDIwIH0sXG4gICAgICAgIHZhbHVlOiAxMCxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBzY2FsZS5hZGRQb2ludHMocG9pbnRzKTtcbiAgICBjb25zdCBwb2ludDogSFRNTERpdkVsZW1lbnQgfCBudWxsID1cbiAgICAgIHNjYWxlWydjb250cm9sJ10ucXVlcnlTZWxlY3RvcignLnNjYWxlX19wb2ludCcpO1xuICAgIGV4cGVjdChwb2ludD8uc3R5bGUubGVmdCkudG9CZSgnNTBweCcpO1xuICAgIGV4cGVjdChwb2ludD8uc3R5bGUudG9wKS50b0JlKCcxMDBweCcpO1xuICB9KTtcbiAgdGVzdCgnU2NhbGUgd2lkdGggc2hvdWxkIGJlIDMwcHgnLCAoKSA9PiB7XG4gICAgc2NhbGUgPSBuZXcgU2NhbGUoJ3ZlcnRpY2FsJyk7XG4gICAgY29uc3QgcG9pbnRzID0gW1xuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogeyBsZWZ0OiA1MCwgdG9wOiAxMDAgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogMzAsIGhlaWdodDogMjAgfSxcbiAgICAgICAgdmFsdWU6IDEwLFxuICAgICAgfSxcbiAgICBdO1xuICAgIHNjYWxlLmFkZFBvaW50cyhwb2ludHMpO1xuICAgIGV4cGVjdChzY2FsZVsnY29udHJvbCddLnN0eWxlLndpZHRoKS50b0JlKCczMHB4Jyk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZSBzaG91bGQgY29udGFpbiBhbiBlbGVtZW50IHdpdGggdGhlIHNjYWxlX19wb2ludC1sYWJlbCBjbGFzcycsICgpID0+IHtcbiAgICBjb25zdCBwb2ludHMgPSBbXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiB7IGxlZnQ6IDUwLCB0b3A6IDEwMCB9LFxuICAgICAgICBzaXplOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAgICAgdmFsdWU6IDEwLFxuICAgICAgfSxcbiAgICBdO1xuICAgIHNjYWxlLmFkZFBvaW50cyhwb2ludHMpO1xuICAgIGV4cGVjdChzY2FsZVsnY29udHJvbCddLnF1ZXJ5U2VsZWN0b3IoJy5zY2FsZV9fcG9pbnQtbGFiZWwnKSkubm90LnRvQmUobnVsbCk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZSBzaG91bGQgY29udGFpbiBhbiBlbGVtZW50IHdpdGggdGhlIHNjYWxlX19wb2ludC1tYXJrZXIgY2xhc3MnLCAoKSA9PiB7XG4gICAgY29uc3QgcG9pbnRzID0gW1xuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogeyBsZWZ0OiA1MCwgdG9wOiAxMDAgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgICAgIHZhbHVlOiAxMCxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBzY2FsZS5hZGRQb2ludHMocG9pbnRzKTtcbiAgICBleHBlY3Qoc2NhbGVbJ2NvbnRyb2wnXS5xdWVyeVNlbGVjdG9yKCcuc2NhbGVfX3BvaW50LW1hcmtlcicpKS5ub3QudG9CZShcbiAgICAgIG51bGxcbiAgICApO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnR2V0IHBvaW50IHNpemUnLCAoKSA9PiB7XG4gIHRlc3QoJ1NjYWxlIHBvaW50IHNpemUgc2hvdWxkIGJlIHt3aWR0aDogMCwgaGVpZ2h0OiAwfScsICgpID0+IHtcbiAgICBleHBlY3Qoc2NhbGUuZ2V0UG9pbnRTaXplKDEwKS53aWR0aCkudG9CZSgwKTtcbiAgICBleHBlY3Qoc2NhbGUuZ2V0UG9pbnRTaXplKDEwKS5oZWlnaHQpLnRvQmUoMCk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZSBwb2ludCBzaXplIHNob3VsZCBiZSB7d2lkdGg6IDAsIGhlaWdodDogMH0nLCAoKSA9PiB7XG4gICAgc2NhbGUucmVtb3ZlKCk7XG4gICAgZXhwZWN0KHNjYWxlLmdldFBvaW50U2l6ZSgxMCkud2lkdGgpLnRvQmUoMCk7XG4gICAgZXhwZWN0KHNjYWxlLmdldFBvaW50U2l6ZSgxMCkuaGVpZ2h0KS50b0JlKDApO1xuICB9KTtcbn0pO1xuIiwiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuaW1wb3J0IFNpbXBsZVNsaWRlckNvbnRyb2xsZXIgZnJvbSAnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL2NvbnRyb2xsZXIvc2ltcGxlLXNsaWRlci1jb250cm9sbGVyJztcbmltcG9ydCB7IElTbGlkZXJTZXR0aW5ncyB9IGZyb20gJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci9pbnRlcmZhY2VzJztcbmltcG9ydCBTaW1wbGVTbGlkZXJNb2RlbCBmcm9tICcuLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvbW9kZWwvc2ltcGxlLXNsaWRlci1tb2RlbCc7XG5pbXBvcnQgU2ltcGxlU2xpZGVyVmlldyBmcm9tICcuLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9zaW1wbGUtc2xpZGVyLXZpZXcnO1xuXG5qZXN0Lm1vY2soJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci9tb2RlbC9zaW1wbGUtc2xpZGVyLW1vZGVsJyk7XG5qZXN0Lm1vY2soJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NpbXBsZS1zbGlkZXItdmlldycpO1xuXG5sZXQgY29udHJvbGxlcjogU2ltcGxlU2xpZGVyQ29udHJvbGxlcjtcbmxldCBtb2RlbDogU2ltcGxlU2xpZGVyTW9kZWw7XG5sZXQgdmlldzogU2ltcGxlU2xpZGVyVmlldztcbmxldCB3cmFwcGVyOiBIVE1MRGl2RWxlbWVudDtcbmxldCBzZXR0aW5nczogSVNsaWRlclNldHRpbmdzO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgc2V0dGluZ3MgPSB7XG4gICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcbiAgICB0eXBlOiAncmFuZ2UnLFxuICAgIHNjYWxlOiB0cnVlLFxuICAgIHBvcFVwczogdHJ1ZSxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxMCxcbiAgICBzdGVwOiAxLFxuICAgIHRodW1iT25lVmFsdWU6IDMsXG4gICAgdGh1bWJUd29WYWx1ZTogNyxcbiAgICBzbGlkZXJTaXplOiB7IHdpZHRoOiA1MDAsIGhlaWdodDogMTAgfSxcbiAgICB0aHVtYlNpemU6IHsgd2lkdGg6IDIwLCBoZWlnaHQ6IDIwIH0sXG4gIH07XG4gIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmlldyA9IG5ldyBTaW1wbGVTbGlkZXJWaWV3KHdyYXBwZXIpO1xuICBtb2RlbCA9IG5ldyBTaW1wbGVTbGlkZXJNb2RlbChzZXR0aW5ncyk7XG4gIGNvbnRyb2xsZXIgPSBuZXcgU2ltcGxlU2xpZGVyQ29udHJvbGxlcih7IG1vZGVsLCB2aWV3IH0pO1xufSk7XG5cbmRlc2NyaWJlKCdJbml0IG1ldGhvZCcsICgpID0+IHtcbiAgdGVzdCgnVGhlIHNldFNsaWRlclNpemUgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlck1vZGVsIGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKG1vZGVsLCAnc2V0U2xpZGVyU2l6ZScpO1xuICAgIGNvbnRyb2xsZXIgPSBuZXcgU2ltcGxlU2xpZGVyQ29udHJvbGxlcih7IG1vZGVsLCB2aWV3IH0pO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBzZXRUaHVtYlNpemUgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlck1vZGVsIGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKG1vZGVsLCAnc2V0VGh1bWJTaXplJyk7XG4gICAgY29udHJvbGxlciA9IG5ldyBTaW1wbGVTbGlkZXJDb250cm9sbGVyKHsgbW9kZWwsIHZpZXcgfSk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHN3aXRjaFRvSG9yaXpvbnRhbCBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAnc3dpdGNoVG9Ib3Jpem9udGFsJyk7XG4gICAgY29udHJvbGxlciA9IG5ldyBTaW1wbGVTbGlkZXJDb250cm9sbGVyKHsgbW9kZWwsIHZpZXcgfSk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHN3aXRjaFRvVmVydGljYWwgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ3N3aXRjaFRvVmVydGljYWwnKTtcbiAgICBzZXR0aW5ncy5vcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgbW9kZWwgPSBuZXcgU2ltcGxlU2xpZGVyTW9kZWwoc2V0dGluZ3MpO1xuICAgIGNvbnRyb2xsZXIgPSBuZXcgU2ltcGxlU2xpZGVyQ29udHJvbGxlcih7IG1vZGVsLCB2aWV3IH0pO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBzd2l0Y2hUb1NpbmdsZSBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAnc3dpdGNoVG9TaW5nbGUnKTtcbiAgICBzZXR0aW5ncy50eXBlID0gJ3NpbmdsZSc7XG4gICAgbW9kZWwgPSBuZXcgU2ltcGxlU2xpZGVyTW9kZWwoc2V0dGluZ3MpO1xuICAgIGNvbnRyb2xsZXIgPSBuZXcgU2ltcGxlU2xpZGVyQ29udHJvbGxlcih7IG1vZGVsLCB2aWV3IH0pO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBzd2l0Y2hUb1JhbmdlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdzd2l0Y2hUb1JhbmdlJyk7XG4gICAgY29udHJvbGxlciA9IG5ldyBTaW1wbGVTbGlkZXJDb250cm9sbGVyKHsgbW9kZWwsIHZpZXcgfSk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIGVuYWJsZVBvcFVwcyBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAnZW5hYmxlUG9wVXBzJyk7XG4gICAgY29udHJvbGxlciA9IG5ldyBTaW1wbGVTbGlkZXJDb250cm9sbGVyKHsgbW9kZWwsIHZpZXcgfSk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIGRpc2FibGVQb3BVcHMgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ2Rpc2FibGVQb3BVcHMnKTtcbiAgICBzZXR0aW5ncy5wb3BVcHMgPSBmYWxzZTtcbiAgICBtb2RlbCA9IG5ldyBTaW1wbGVTbGlkZXJNb2RlbChzZXR0aW5ncyk7XG4gICAgY29udHJvbGxlciA9IG5ldyBTaW1wbGVTbGlkZXJDb250cm9sbGVyKHsgbW9kZWwsIHZpZXcgfSk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVXBkYXRlIG1ldGhvZCcsICgpID0+IHtcbiAgdGVzdCgnVGhlIHVwZGF0ZVRodW1ic1N0YXRlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJNb2RlbCBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbihtb2RlbCwgJ3VwZGF0ZVRodW1ic1N0YXRlJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3RodW1iSXNEcmFnZ2VkJyk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHNldFRodW1iUG9zaXRpb25PbkNsaWNrUG9zaXRpb24gbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlck1vZGVsIGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKG1vZGVsLCAnc2V0VGh1bWJQb3NpdGlvbk9uQ2xpY2tQb3NpdGlvbicpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCdjbGlja1RvVHJhY2snKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgc2V0VGh1bWJQb3NpdGlvbk9uQ2xpY2tQb3NpdGlvbiBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyTW9kZWwgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24obW9kZWwsICdzZXRUaHVtYlBvc2l0aW9uT25DbGlja1Bvc2l0aW9uJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ2NsaWNrVG9TY2FsZScpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBpbml0IG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJDb250cm9sbGVyIGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBzcHlPbjxhbnk+KGNvbnRyb2xsZXIsICdpbml0Jyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3dpbmRvd1Jlc2l6ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdPdGhlciBtZXRob2RzIHNob3VsZCBub3QgYmUgY2FsbGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweTEgPSBqZXN0LnNweU9uKG1vZGVsLCAndXBkYXRlVGh1bWJzU3RhdGUnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnZW1wdHlFdmVudCcpO1xuICAgIGV4cGVjdChzcHkxKS50b0JlQ2FsbGVkVGltZXMoMCk7XG5cbiAgICBjb25zdCBzcHkyID0gamVzdC5zcHlPbihtb2RlbCwgJ3NldFRodW1iUG9zaXRpb25PbkNsaWNrUG9zaXRpb24nKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnZW1wdHlFdmVudCcpO1xuICAgIGV4cGVjdChzcHkyKS50b0JlQ2FsbGVkVGltZXMoMCk7XG5cbiAgICBjb25zdCBzcHkzID0gc3B5T248YW55Pihjb250cm9sbGVyLCAndXBkYXRlVGh1bWJzUG9zaXRpb25zJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ2VtcHR5RXZlbnQnKTtcbiAgICBleHBlY3Qoc3B5MykudG9CZUNhbGxlZFRpbWVzKDApO1xuXG4gICAgY29uc3Qgc3B5NCA9IHNweU9uPGFueT4oY29udHJvbGxlciwgJ3VwZGF0ZVZpZXcnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnZW1wdHlFdmVudCcpO1xuICAgIGV4cGVjdChzcHk0KS50b0JlQ2FsbGVkVGltZXMoMCk7XG5cbiAgICBjb25zdCBzcHk1ID0gc3B5T248YW55Pihjb250cm9sbGVyLCAndXBkYXRlU2xpZGVyT3JpZW50YXRpb24nKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnZW1wdHlFdmVudCcpO1xuICAgIGV4cGVjdChzcHk1KS50b0JlQ2FsbGVkVGltZXMoMCk7XG5cbiAgICBjb25zdCBzcHk2ID0gc3B5T248YW55Pihjb250cm9sbGVyLCAndXBkYXRlU2xpZGVyVHlwZScpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCdlbXB0eUV2ZW50Jyk7XG4gICAgZXhwZWN0KHNweTYpLnRvQmVDYWxsZWRUaW1lcygwKTtcblxuICAgIGNvbnN0IHNweTcgPSBzcHlPbjxhbnk+KGNvbnRyb2xsZXIsICd1cGRhdGVTY2FsZVN0YXRlJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ2VtcHR5RXZlbnQnKTtcbiAgICBleHBlY3Qoc3B5NykudG9CZUNhbGxlZFRpbWVzKDApO1xuXG4gICAgY29uc3Qgc3B5OCA9IHNweU9uPGFueT4oY29udHJvbGxlciwgJ3VwZGF0ZVBvcFVwc1N0YXRlJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ2VtcHR5RXZlbnQnKTtcbiAgICBleHBlY3Qoc3B5OCkudG9CZUNhbGxlZFRpbWVzKDApO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVXBkYXRlIHZpZXcgbWV0aG9kJywgKCkgPT4ge1xuICB0ZXN0KCdUaGUgdXBkYXRlVGh1bWJzU3RhdGUgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlck1vZGVsIGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKG1vZGVsLCAndXBkYXRlVGh1bWJzU3RhdGUnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnbWluSXNVcGRhdGVkJyk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIGVuYWJsZVNjYWxlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdlbmFibGVTY2FsZScpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCdtYXhJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgYWRkU2NhbGVQb2ludHMgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ2FkZFNjYWxlUG9pbnRzJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3N0ZXBJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgZGlzYWJsZVNjYWxlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdkaXNhYmxlU2NhbGUnKTtcbiAgICBzZXR0aW5ncy5zY2FsZSA9IGZhbHNlO1xuICAgIG1vZGVsID0gbmV3IFNpbXBsZVNsaWRlck1vZGVsKHNldHRpbmdzKTtcbiAgICBjb250cm9sbGVyID0gbmV3IFNpbXBsZVNsaWRlckNvbnRyb2xsZXIoeyBtb2RlbCwgdmlldyB9KTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdVcGRhdGUgdGh1bWJzIHBvcycsICgpID0+IHtcbiAgdGVzdCgnVGhlIHVwZGF0ZVRodW1icyBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAndXBkYXRlVGh1bWJzJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3RodW1ic1Bvc2l0aW9uc0lzVXBkYXRlZCcpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSB1cGRhdGVQb3BVcHMgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ3VwZGF0ZVBvcFVwcycpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCd0aHVtYnNQb3NpdGlvbnNJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgdXBkYXRlUHJvZ3Jlc3NCYXIgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ3VwZGF0ZVByb2dyZXNzQmFyJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3RodW1ic1Bvc2l0aW9uc0lzVXBkYXRlZCcpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1VwZGF0ZSBzbGlkZXIgb3JpZW50YXRpb24nLCAoKSA9PiB7XG4gIHRlc3QoJ1RoZSBzd2l0Y2hUb0hvcml6b250YWwgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ3N3aXRjaFRvSG9yaXpvbnRhbCcpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCdvcmllbnRhdGlvbklzVXBkYXRlZCcpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBzd2l0Y2hUb1ZlcnRpY2FsIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBub3QgYmUgY2FsbGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ3N3aXRjaFRvVmVydGljYWwnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnb3JpZW50YXRpb25Jc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMCk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgc3dpdGNoVG9Ib3Jpem9udGFsIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBub3QgYmUgY2FsbGVkJywgKCkgPT4ge1xuICAgIG1vZGVsWydvcmllbnRhdGlvbiddID0gJ3ZlcnRpY2FsJztcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdzd2l0Y2hUb0hvcml6b250YWwnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnb3JpZW50YXRpb25Jc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMCk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgc3dpdGNoVG9WZXJ0aWNhbCBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgbW9kZWxbJ29yaWVudGF0aW9uJ10gPSAndmVydGljYWwnO1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ3N3aXRjaFRvVmVydGljYWwnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnb3JpZW50YXRpb25Jc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdVcGRhdGUgc2xpZGVyIHR5cGUnLCAoKSA9PiB7XG4gIHRlc3QoJ1RoZSBzd2l0Y2hUb1JhbmdlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdzd2l0Y2hUb1JhbmdlJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3R5cGVJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgc3dpdGNoVG9TaW5nbGUgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIG5vdCBiZSBjYWxsZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAnc3dpdGNoVG9TaW5nbGUnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgndHlwZUlzVXBkYXRlZCcpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygwKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBzd2l0Y2hUb1JhbmdlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBub3QgYmUgY2FsbGVkJywgKCkgPT4ge1xuICAgIG1vZGVsWyd0eXBlJ10gPSAnc2luZ2xlJztcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdzd2l0Y2hUb1JhbmdlJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3R5cGVJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMCk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgc3dpdGNoVG9TaW5nbGUgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIG1vZGVsWyd0eXBlJ10gPSAnc2luZ2xlJztcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdzd2l0Y2hUb1NpbmdsZScpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCd0eXBlSXNVcGRhdGVkJyk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVXBkYXRlIHNjYWxlIHN0YXRlJywgKCkgPT4ge1xuICB0ZXN0KCdUaGUgZW5hYmxlU2NhbGUgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ2VuYWJsZVNjYWxlJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3NjYWxlU3RhdGVJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMik7XG4gIH0pO1xuICB0ZXN0KCdUaGUgZGlzYWJsZVNjYWxlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBub3QgYmUgY2FsbGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24odmlldywgJ2Rpc2FibGVTY2FsZScpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCdzY2FsZVN0YXRlSXNVcGRhdGVkJyk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDApO1xuICB9KTtcbiAgdGVzdCgnVGhlIGVuYWJsZVNjYWxlIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBub3QgYmUgY2FsbGVkJywgKCkgPT4ge1xuICAgIG1vZGVsWydzY2FsZSddID0gZmFsc2U7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAnZW5hYmxlU2NhbGUnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgnc2NhbGVTdGF0ZUlzVXBkYXRlZCcpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygwKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBkaXNhYmxlU2NhbGUgbWV0aG9kIGZyb20gdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIG1vZGVsWydzY2FsZSddID0gZmFsc2U7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAnZGlzYWJsZVNjYWxlJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3NjYWxlU3RhdGVJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdVcGRhdGUgcG9wIHVwcyBzYXRlJywgKCkgPT4ge1xuICB0ZXN0KCdUaGUgZW5hYmxlUG9wVXBzIG1ldGhvZCBmcm9tIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdlbmFibGVQb3BVcHMnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgncG9wVXBzU3RhdGVJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgZGlzYWJsZVBvcFVwcyBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgbm90IGJlIGNhbGxlZCcsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdkaXNhYmxlUG9wVXBzJyk7XG4gICAgY29udHJvbGxlci51cGRhdGUoJ3BvcFVwc1N0YXRlSXNVcGRhdGVkJyk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDApO1xuICB9KTtcbiAgdGVzdCgnVGhlIGVuYWJsZVBvcFVwcyBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgbm90IGJlIGNhbGxlZCcsICgpID0+IHtcbiAgICBtb2RlbFsncG9wVXBzJ10gPSBmYWxzZTtcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHZpZXcsICdlbmFibGVQb3BVcHMnKTtcbiAgICBjb250cm9sbGVyLnVwZGF0ZSgncG9wVXBzU3RhdGVJc1VwZGF0ZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMCk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgZGlzYWJsZVBvcFVwcyBtZXRob2QgZnJvbSB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgbW9kZWxbJ3BvcFVwcyddID0gZmFsc2U7XG4gICAgY29uc3Qgc3B5ID0gamVzdC5zcHlPbih2aWV3LCAnZGlzYWJsZVBvcFVwcycpO1xuICAgIGNvbnRyb2xsZXIudXBkYXRlKCdwb3BVcHNTdGF0ZUlzVXBkYXRlZCcpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG59KTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuLy8gLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG5cbmltcG9ydCB7IElTbGlkZXJTZXR0aW5ncyB9IGZyb20gJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci9pbnRlcmZhY2VzJztcbmltcG9ydCBTaW1wbGVTbGlkZXJNb2RlbCBmcm9tICcuLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvbW9kZWwvc2ltcGxlLXNsaWRlci1tb2RlbCc7XG5cbmxldCBzZXR0aW5nczogSVNsaWRlclNldHRpbmdzO1xubGV0IG1vZGVsOiBTaW1wbGVTbGlkZXJNb2RlbDtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIHNldHRpbmdzID0ge1xuICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcsXG4gICAgdHlwZTogJ3JhbmdlJyxcbiAgICBzY2FsZTogdHJ1ZSxcbiAgICBwb3BVcHM6IHRydWUsXG4gICAgbWluOiAwLFxuICAgIG1heDogMTAsXG4gICAgc3RlcDogMSxcbiAgICB0aHVtYk9uZVZhbHVlOiAzLFxuICAgIHRodW1iVHdvVmFsdWU6IDcsXG4gICAgc2xpZGVyU2l6ZTogeyB3aWR0aDogNTAwLCBoZWlnaHQ6IDEwIH0sXG4gICAgdGh1bWJTaXplOiB7IHdpZHRoOiAyMCwgaGVpZ2h0OiAyMCB9LFxuICB9O1xuXG4gIG1vZGVsID0gbmV3IFNpbXBsZVNsaWRlck1vZGVsKHNldHRpbmdzKTtcbiAgbW9kZWwucmVmcmVzaFNsaWRlclN0YXRlKHNldHRpbmdzKTtcbn0pO1xuXG5kZXNjcmliZSgnUmVmcmVzaCBzbGlkZXIgc3RhdGUnLCAoKSA9PiB7XG4gIHRlc3QoJ1NsaWRlclNpemUgc2hvdWxkIGJlIHt3aWR0aDogNTAwLCBoZWlnaHQ6IDEwfScsICgpID0+IHtcbiAgICBkZWxldGUgc2V0dGluZ3Muc2xpZGVyU2l6ZTtcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbFsnc2xpZGVyU2l6ZSddLndpZHRoKS50b0JlKDUwMCk7XG4gICAgZXhwZWN0KG1vZGVsWydzbGlkZXJTaXplJ10uaGVpZ2h0KS50b0JlKDEwKTtcbiAgfSk7XG4gIHRlc3QoJ1RodW1iU2l6ZSBzaG91bGQgYmUge3dpZHRoOiAyMCwgaGVpZ2h0OiAyMH0nLCAoKSA9PiB7XG4gICAgZGVsZXRlIHNldHRpbmdzLnRodW1iU2l6ZTtcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJTaXplJ10ud2lkdGgpLnRvQmUoMjApO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJTaXplJ10uaGVpZ2h0KS50b0JlKDIwKTtcbiAgfSk7XG4gIHRlc3QoJ09yaWVudGF0aW9uIHNob3VsZCBiZSB2ZXJ0aWNhbCcsICgpID0+IHtcbiAgICBzZXR0aW5ncy5vcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgbW9kZWwucmVmcmVzaFNsaWRlclN0YXRlKHNldHRpbmdzKTtcbiAgICBleHBlY3QobW9kZWxbJ29yaWVudGF0aW9uJ10pLnRvQmUoJ3ZlcnRpY2FsJyk7XG4gIH0pO1xuICB0ZXN0KCdUeXBlIHNob3VsZCBiZSBzaW5nbGUnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MudHlwZSA9ICdzaW5nbGUnO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWyd0eXBlJ10pLnRvQmUoJ3NpbmdsZScpO1xuICB9KTtcbiAgdGVzdCgnVGh1bWJUd29WYWx1ZSBzaG91bGQgYmUgbm90IGVxdWFsIHRodW1iVmFsdWVPbmUnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MudHlwZSA9ICdzaW5nbGUnO1xuICAgIHNldHRpbmdzLnRodW1iT25lVmFsdWUgPSA5O1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgc2V0dGluZ3MudHlwZSA9ICdyYW5nZSc7XG4gICAgc2V0dGluZ3MudGh1bWJPbmVWYWx1ZSA9IDEwO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYk9uZVZhbHVlJ10gIT09IG1vZGVsWyd0aHVtYlR3b1ZhbHVlJ10pLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZSBzaG91bGQgYmUgZmFsc2UnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3Muc2NhbGUgPSBmYWxzZTtcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbFsnc2NhbGUnXSkudG9CZShmYWxzZSk7XG4gIH0pO1xuICB0ZXN0KCdQb3BVcHMgc2hvdWxkIGJlIGZhbHNlJywgKCkgPT4ge1xuICAgIHNldHRpbmdzLnBvcFVwcyA9IGZhbHNlO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWydwb3BVcHMnXSkudG9CZShmYWxzZSk7XG4gIH0pO1xuICB0ZXN0KCdNaW4gc2hvdWxkIGJlIDcnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MubWluID0gNztcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbFsnbWluJ10pLnRvQmUoNyk7XG4gIH0pO1xuICB0ZXN0KCdNaW4gc2hvdWxkIGJlIDEwJywgKCkgPT4ge1xuICAgIHNldHRpbmdzLm1pbiA9IDUwO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWydtaW4nXSkudG9CZSgwKTtcbiAgfSk7XG4gIHRlc3QoJ01heCBzaG91bGQgYmUgNDAnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MubWF4ID0gNDA7XG4gICAgbW9kZWwucmVmcmVzaFNsaWRlclN0YXRlKHNldHRpbmdzKTtcbiAgICBleHBlY3QobW9kZWxbJ21heCddKS50b0JlKDQwKTtcbiAgfSk7XG4gIHRlc3QoJ01heCBzaG91bGQgYmUgMTAnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MubWF4ID0gLTUwO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWydtYXgnXSkudG9CZSgxMCk7XG4gIH0pO1xuICB0ZXN0KCdTdGVwIHNob3VsZCBiZSA4JywgKCkgPT4ge1xuICAgIHNldHRpbmdzLnN0ZXAgPSA4O1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWydzdGVwJ10pLnRvQmUoOCk7XG4gIH0pO1xuICB0ZXN0KCdTdGVwIHNob3VsZCBiZSAxJywgKCkgPT4ge1xuICAgIHNldHRpbmdzLnN0ZXAgPSAwO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWydzdGVwJ10pLnRvQmUoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYk9uZVZhbHVlIHNob3VsZCBiZSA2JywgKCkgPT4ge1xuICAgIHNldHRpbmdzLnRodW1iT25lVmFsdWUgPSA2O1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYk9uZVZhbHVlJ10pLnRvQmUoNik7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYlR3b1ZhbHVlIHNob3VsZCBiZSAxMCcsICgpID0+IHtcbiAgICBzZXR0aW5ncy50aHVtYlR3b1ZhbHVlID0gMTA7XG4gICAgbW9kZWwucmVmcmVzaFNsaWRlclN0YXRlKHNldHRpbmdzKTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iVHdvVmFsdWUnXSkudG9CZSgxMCk7XG4gIH0pO1xuICB0ZXN0KCdTbGlkZXJTaXplIHdpZGggc2hvdWxkIGJlIDMwMCBhbmQgaGVpZ2h0IDUwJywgKCkgPT4ge1xuICAgIHNldHRpbmdzLnNsaWRlclNpemUgPSB7IHdpZHRoOiAzMDAsIGhlaWdodDogNTAgfTtcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbFsnc2xpZGVyU2l6ZSddLndpZHRoKS50b0JlKDMwMCk7XG4gICAgZXhwZWN0KG1vZGVsWydzbGlkZXJTaXplJ10uaGVpZ2h0KS50b0JlKDUwKTtcbiAgfSk7XG4gIHRlc3QoJ1RodW1iU2l6ZSB3aWRoIHNob3VsZCBiZSA3NTAgYW5kIGhlaWdodCAzNScsICgpID0+IHtcbiAgICBzZXR0aW5ncy50aHVtYlNpemUgPSB7IHdpZHRoOiA3NTAsIGhlaWdodDogMzUgfTtcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJTaXplJ10ud2lkdGgpLnRvQmUoNzUwKTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iU2l6ZSddLmhlaWdodCkudG9CZSgzNSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdVcGRhdGUgdGh1bWJzIHN0YXRlJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgYmUgdGh1bWJPbmU6IDUgYW5kIHRodW1iVHdvOiA5JywgKCkgPT4ge1xuICAgIGNvbnN0IHBvc2l0aW9uID0ge1xuICAgICAgdGh1bWJPbmU6IHsgbGVmdDogMjUwLCB0b3A6IDAgfSxcbiAgICAgIHRodW1iVHdvOiB7IGxlZnQ6IDQ1MCwgdG9wOiAwIH0sXG4gICAgfTtcbiAgICBtb2RlbC51cGRhdGVUaHVtYnNTdGF0ZShwb3NpdGlvbik7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYk9uZVZhbHVlJ10pLnRvQmUoNSk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYlR3b1ZhbHVlJ10pLnRvQmUoOSk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUgdGh1bWJPbmU6IDUgYW5kIHRodW1iVHdvOiA5JywgKCkgPT4ge1xuICAgIGNvbnN0IHBvc2l0aW9uID0ge1xuICAgICAgdGh1bWJPbmU6IHsgbGVmdDogNDUwLCB0b3A6IDAgfSxcbiAgICAgIHRodW1iVHdvOiB7IGxlZnQ6IDI1MCwgdG9wOiAwIH0sXG4gICAgfTtcbiAgICBtb2RlbC51cGRhdGVUaHVtYnNTdGF0ZShwb3NpdGlvbik7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYk9uZVZhbHVlJ10pLnRvQmUoNSk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYlR3b1ZhbHVlJ10pLnRvQmUoOSk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUgdGh1bWJPbmU6IDAgYW5kIHRodW1iVHdvOiA3JywgKCkgPT4ge1xuICAgIHNldHRpbmdzLm9yaWVudGF0aW9uID0gJ3ZlcnRpY2FsJztcbiAgICBzZXR0aW5ncy5zbGlkZXJTaXplID0geyB3aWR0aDogMTAsIGhlaWdodDogNTAwIH07XG4gICAgbW9kZWwucmVmcmVzaFNsaWRlclN0YXRlKHNldHRpbmdzKTtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHtcbiAgICAgIHRodW1iT25lOiB7IGxlZnQ6IDI1MCwgdG9wOiAwIH0sXG4gICAgICB0aHVtYlR3bzogeyBsZWZ0OiA0NTAsIHRvcDogMCB9LFxuICAgIH07XG4gICAgbW9kZWwudXBkYXRlVGh1bWJzU3RhdGUocG9zaXRpb24pO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJPbmVWYWx1ZSddKS50b0JlKDApO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJUd29WYWx1ZSddKS50b0JlKDcpO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIHRodW1iT25lOiAwIGFuZCB0aHVtYlR3bzogMCcsICgpID0+IHtcbiAgICBzZXR0aW5ncy5vcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgc2V0dGluZ3Muc2xpZGVyU2l6ZSA9IHsgd2lkdGg6IDEwLCBoZWlnaHQ6IDUwMCB9O1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgY29uc3QgcG9zaXRpb24gPSB7XG4gICAgICB0aHVtYk9uZTogeyBsZWZ0OiAwLCB0b3A6IDEwMCB9LFxuICAgICAgdGh1bWJUd286IHsgbGVmdDogMCwgdG9wOiA0MDAgfSxcbiAgICB9O1xuICAgIG1vZGVsLnVwZGF0ZVRodW1ic1N0YXRlKHBvc2l0aW9uKTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iT25lVmFsdWUnXSkudG9CZSgyKTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iVHdvVmFsdWUnXSkudG9CZSg4KTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSB0aHVtYk9uZTogMCBhbmQgdGh1bWJUd286IDknLCAoKSA9PiB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB7XG4gICAgICB0aHVtYk9uZTogeyBsZWZ0OiAtNDUsIHRvcDogMCB9LFxuICAgICAgdGh1bWJUd286IHsgbGVmdDogNDUwLCB0b3A6IDAgfSxcbiAgICB9O1xuICAgIG1vZGVsLnVwZGF0ZVRodW1ic1N0YXRlKHBvc2l0aW9uKTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iT25lVmFsdWUnXSkudG9CZSgwKTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iVHdvVmFsdWUnXSkudG9CZSg5KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1NldCBzbGlkZXIgc2l6ZScsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIGJlIHt3aWR0aDogODAsIGhlaWdodDogMTV9JywgKCkgPT4ge1xuICAgIG1vZGVsLnNldFNsaWRlclNpemUoeyB3aWR0aDogODAsIGhlaWdodDogMTUgfSk7XG4gICAgZXhwZWN0KG1vZGVsWydzbGlkZXJTaXplJ10ud2lkdGgpLnRvQmUoODApO1xuICAgIGV4cGVjdChtb2RlbFsnc2xpZGVyU2l6ZSddLmhlaWdodCkudG9CZSgxNSk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUge3dpZHRoOiAwLCBoZWlnaHQ6IDE1fScsICgpID0+IHtcbiAgICBtb2RlbC5zZXRTbGlkZXJTaXplKHsgd2lkdGg6IC04MCwgaGVpZ2h0OiAxNSB9KTtcbiAgICBleHBlY3QobW9kZWxbJ3NsaWRlclNpemUnXS53aWR0aCkudG9CZSgwKTtcbiAgICBleHBlY3QobW9kZWxbJ3NsaWRlclNpemUnXS5oZWlnaHQpLnRvQmUoMTUpO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIHt3aWR0aDogODAsIGhlaWdodDogMH0nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0U2xpZGVyU2l6ZSh7IHdpZHRoOiA4MCwgaGVpZ2h0OiAwIH0pO1xuICAgIGV4cGVjdChtb2RlbFsnc2xpZGVyU2l6ZSddLndpZHRoKS50b0JlKDgwKTtcbiAgICBleHBlY3QobW9kZWxbJ3NsaWRlclNpemUnXS5oZWlnaHQpLnRvQmUoMCk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUge3dpZHRoOiA1MDAsIGhlaWdodDogMH0nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0U2xpZGVyU2l6ZSh7IHdpZHRoOiA1MDAsIGhlaWdodDogLTIwIH0pO1xuICAgIGV4cGVjdChtb2RlbFsnc2xpZGVyU2l6ZSddLndpZHRoKS50b0JlKDUwMCk7XG4gICAgZXhwZWN0KG1vZGVsWydzbGlkZXJTaXplJ10uaGVpZ2h0KS50b0JlKDApO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnU2V0IHRodW1iIHNpemUnLCAoKSA9PiB7XG4gIHRlc3QoJ1Nob3VsZCBiZSB7d2lkdGg6IDgwLCBoZWlnaHQ6IDE1fScsICgpID0+IHtcbiAgICBtb2RlbC5zZXRUaHVtYlNpemUoeyB3aWR0aDogODAsIGhlaWdodDogMTUgfSk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYlNpemUnXS53aWR0aCkudG9CZSg4MCk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYlNpemUnXS5oZWlnaHQpLnRvQmUoMTUpO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIHt3aWR0aDogMCwgaGVpZ2h0OiAxNX0nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0VGh1bWJTaXplKHsgd2lkdGg6IC04MCwgaGVpZ2h0OiAxNSB9KTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iU2l6ZSddLndpZHRoKS50b0JlKDApO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJTaXplJ10uaGVpZ2h0KS50b0JlKDE1KTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSB7d2lkdGg6IDgwLCBoZWlnaHQ6IDB9JywgKCkgPT4ge1xuICAgIG1vZGVsLnNldFRodW1iU2l6ZSh7IHdpZHRoOiA4MCwgaGVpZ2h0OiAwIH0pO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJTaXplJ10ud2lkdGgpLnRvQmUoODApO1xuICAgIGV4cGVjdChtb2RlbFsndGh1bWJTaXplJ10uaGVpZ2h0KS50b0JlKDApO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnU2V0IHRodW1iIHZhbHVlcycsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIGJlIHt0aHVtYk9uZTogMSwgdGh1bWJUd286IDh9JywgKCkgPT4ge1xuICAgIG1vZGVsLnNldFRodW1ic1ZhbHVlcyh7IHRodW1iT25lOiAxLCB0aHVtYlR3bzogOCB9KTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iT25lVmFsdWUnXSkudG9CZSgxKTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iVHdvVmFsdWUnXSkudG9CZSg4KTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSB7dGh1bWJPbmU6IDAsIHRodW1iVHdvOiAxMH0nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0VGh1bWJzVmFsdWVzKHsgdGh1bWJPbmU6IC01LCB0aHVtYlR3bzogMTUgfSk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYk9uZVZhbHVlJ10pLnRvQmUoMCk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYlR3b1ZhbHVlJ10pLnRvQmUoMTApO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIHt0aHVtYk9uZTogNywgdGh1bWJUd286IDl9JywgKCkgPT4ge1xuICAgIG1vZGVsLnNldFRodW1ic1ZhbHVlcyh7IHRodW1iT25lOiA5LCB0aHVtYlR3bzogNyB9KTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iT25lVmFsdWUnXSkudG9CZSg3KTtcbiAgICBleHBlY3QobW9kZWxbJ3RodW1iVHdvVmFsdWUnXSkudG9CZSg5KTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSB7dGh1bWJPbmU6IDEsIHRodW1iVHdvOiAzfScsICgpID0+IHtcbiAgICBtb2RlbC5zZXRUaHVtYnNWYWx1ZXMoeyB0aHVtYk9uZTogMywgdGh1bWJUd286IDEgfSk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYk9uZVZhbHVlJ10pLnRvQmUoMSk7XG4gICAgZXhwZWN0KG1vZGVsWyd0aHVtYlR3b1ZhbHVlJ10pLnRvQmUoMyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdHZXQgbWluJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgYmUgMCcsICgpID0+IHtcbiAgICBleHBlY3QobW9kZWwuZ2V0TWluKCkpLnRvQmUoMCk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUgMicsICgpID0+IHtcbiAgICBzZXR0aW5ncy5taW4gPSAyO1xuICAgIG1vZGVsID0gbmV3IFNpbXBsZVNsaWRlck1vZGVsKHNldHRpbmdzKTtcbiAgICBleHBlY3QobW9kZWwuZ2V0TWluKCkpLnRvQmUoMik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdHZXQgbWF4JywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgYmUgMTAnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1vZGVsLmdldE1heCgpKS50b0JlKDEwKTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSA1JywgKCkgPT4ge1xuICAgIHNldHRpbmdzLm1heCA9IDU7XG4gICAgbW9kZWwgPSBuZXcgU2ltcGxlU2xpZGVyTW9kZWwoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbC5nZXRNYXgoKSkudG9CZSg1KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBzdGVwJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgYmUgMScsICgpID0+IHtcbiAgICBleHBlY3QobW9kZWwuZ2V0U3RlcCgpKS50b0JlKDEpO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIDInLCAoKSA9PiB7XG4gICAgc2V0dGluZ3Muc3RlcCA9IDI7XG4gICAgbW9kZWwgPSBuZXcgU2ltcGxlU2xpZGVyTW9kZWwoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbC5nZXRTdGVwKCkpLnRvQmUoMik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdHZXQgc2NhbGUgc3RhdGUnLCAoKSA9PiB7XG4gIHRlc3QoJ1Nob3VsZCBiZSB0cnVlJywgKCkgPT4ge1xuICAgIGV4cGVjdChtb2RlbC5nZXRTY2FsZVN0YXRlKCkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUgZmFsc2UnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3Muc2NhbGUgPSBmYWxzZTtcbiAgICBtb2RlbCA9IG5ldyBTaW1wbGVTbGlkZXJNb2RlbChzZXR0aW5ncyk7XG4gICAgZXhwZWN0KG1vZGVsLmdldFNjYWxlU3RhdGUoKSkudG9CZShmYWxzZSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdHZXQgcG9wLXVwcyBzdGF0ZScsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIGJlIHRydWUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1vZGVsLmdldFBvcFVwc1N0YXRlKCkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUgZmFsc2UnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MucG9wVXBzID0gZmFsc2U7XG4gICAgbW9kZWwgPSBuZXcgU2ltcGxlU2xpZGVyTW9kZWwoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbC5nZXRQb3BVcHNTdGF0ZSgpKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCB0eXBlJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgYmUgcmFuZ2UnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1vZGVsLmdldFR5cGUoKSkudG9CZSgncmFuZ2UnKTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSBzaW5nbGUnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MudHlwZSA9ICdzaW5nbGUnO1xuICAgIG1vZGVsID0gbmV3IFNpbXBsZVNsaWRlck1vZGVsKHNldHRpbmdzKTtcbiAgICBleHBlY3QobW9kZWwuZ2V0VHlwZSgpKS50b0JlKCdzaW5nbGUnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBvcmllbnRhdGlvbicsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIGJlIGhvcml6b250YWwnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1vZGVsLmdldE9yaWVudGF0aW9uKCkpLnRvQmUoJ2hvcml6b250YWwnKTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSB2ZXJ0aWNhbCcsICgpID0+IHtcbiAgICBzZXR0aW5ncy5vcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgbW9kZWwgPSBuZXcgU2ltcGxlU2xpZGVyTW9kZWwoc2V0dGluZ3MpO1xuICAgIGV4cGVjdChtb2RlbC5nZXRPcmllbnRhdGlvbigpKS50b0JlKCd2ZXJ0aWNhbCcpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnR2V0IHByb2dyZXNzIGJhciBwYXJhbXMnLCAoKSA9PiB7XG4gIHRlc3QoJ1Nob3VsZCBiZSBwb3NpdGlvbjoge3tsZWZ0OiAxMDAsIHRvcDogMH0gYW5kIHNpemU6IHt3aWR0aDogMjEyLCBoZWlnaHQ6IDEwfX0nLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvZ3Jlc3NQYXJhbXMgPSBtb2RlbC5nZXRQcm9ncmVzc0JhclBhcmFtcygpO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5wb3NpdGlvbi5sZWZ0KS50b0JlQ2xvc2VUbygxNDQsIDApO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5wb3NpdGlvbi50b3ApLnRvQmVDbG9zZVRvKDAsIDApO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5zaXplLndpZHRoKS50b0JlQ2xvc2VUbygyMTIsIDApO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5zaXplLmhlaWdodCkudG9CZUNsb3NlVG8oMTAsIDApO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIHBvc2l0aW9uOiB7e2xlZnQ6IDAsIHRvcDogMTAwfSBhbmQgc2l6ZToge3dpZHRoOiAxMCwgaGVpZ2h0OiAyMTJ9fScsICgpID0+IHtcbiAgICBzZXR0aW5ncy5vcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgc2V0dGluZ3Muc2xpZGVyU2l6ZSA9IHsgd2lkdGg6IDEwLCBoZWlnaHQ6IDUwMCB9O1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgY29uc3QgcHJvZ3Jlc3NQYXJhbXMgPSBtb2RlbC5nZXRQcm9ncmVzc0JhclBhcmFtcygpO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5wb3NpdGlvbi5sZWZ0KS50b0JlQ2xvc2VUbygwLCAwKTtcbiAgICBleHBlY3QocHJvZ3Jlc3NQYXJhbXMucG9zaXRpb24udG9wKS50b0JlQ2xvc2VUbygxNDQsIDApO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5zaXplLndpZHRoKS50b0JlQ2xvc2VUbygxMCwgMCk7XG4gICAgZXhwZWN0KHByb2dyZXNzUGFyYW1zLnNpemUuaGVpZ2h0KS50b0JlQ2xvc2VUbygyMTIsIDApO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIHBvc2l0aW9uOiB7e2xlZnQ6IDAsIHRvcDogMH0gYW5kIHNpemU6IHt3aWR0aDogMTY0LCBoZWlnaHQ6IDEwfX0nLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MudHlwZSA9ICdzaW5nbGUnO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgY29uc3QgcHJvZ3Jlc3NQYXJhbXMgPSBtb2RlbC5nZXRQcm9ncmVzc0JhclBhcmFtcygpO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5wb3NpdGlvbi5sZWZ0KS50b0JlQ2xvc2VUbygwLCAwKTtcbiAgICBleHBlY3QocHJvZ3Jlc3NQYXJhbXMucG9zaXRpb24udG9wKS50b0JlQ2xvc2VUbygwLCAwKTtcbiAgICBleHBlY3QocHJvZ3Jlc3NQYXJhbXMuc2l6ZS53aWR0aCkudG9CZUNsb3NlVG8oMTY0LCAwKTtcbiAgICBleHBlY3QocHJvZ3Jlc3NQYXJhbXMuc2l6ZS5oZWlnaHQpLnRvQmVDbG9zZVRvKDEwLCAwKTtcbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSBwb3NpdGlvbjoge3tsZWZ0OiAwLCB0b3A6IDB9IGFuZCBzaXplOiB7d2lkdGg6IDEwLCBoZWlnaHQ6IDIzOX19JywgKCkgPT4ge1xuICAgIHNldHRpbmdzLm9yaWVudGF0aW9uID0gJ3ZlcnRpY2FsJztcbiAgICBzZXR0aW5ncy50eXBlID0gJ3NpbmdsZSc7XG4gICAgc2V0dGluZ3Muc2xpZGVyU2l6ZSA9IHsgd2lkdGg6IDEwLCBoZWlnaHQ6IDc1MCB9O1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgY29uc3QgcHJvZ3Jlc3NQYXJhbXMgPSBtb2RlbC5nZXRQcm9ncmVzc0JhclBhcmFtcygpO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5wb3NpdGlvbi5sZWZ0KS50b0JlQ2xvc2VUbygwLCAwKTtcbiAgICBleHBlY3QocHJvZ3Jlc3NQYXJhbXMucG9zaXRpb24udG9wKS50b0JlQ2xvc2VUbygwLCAwKTtcbiAgICBleHBlY3QocHJvZ3Jlc3NQYXJhbXMuc2l6ZS53aWR0aCkudG9CZUNsb3NlVG8oMTAsIDApO1xuICAgIGV4cGVjdChwcm9ncmVzc1BhcmFtcy5zaXplLmhlaWdodCkudG9CZUNsb3NlVG8oMjM5LCAwKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCB0aHVtYnMgcG9zaXRpb25zJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgYmUgdGh1bWJPbmU6IHtsZWZ0OiAxMjYsIHRvcDogMH0gYW5kIHRodW1iVHdvOiB7bGVmdDogMjk0LCB0b3A6IDB9JywgKCkgPT4ge1xuICAgIG1vZGVsWydzbGlkZXJTaXplJ10gPSB7IHdpZHRoOiA0NDAsIGhlaWdodDogMTAgfTtcbiAgICBtb2RlbFsndGh1bWJTaXplJ10gPSB7IHdpZHRoOiAyMCwgaGVpZ2h0OiAyMCB9O1xuICAgIGNvbnN0IHBvcyA9IG1vZGVsLmdldFRodW1ic1Bvc2l0aW9ucygpO1xuXG4gICAgZXhwZWN0KHBvcy50aHVtYk9uZS5sZWZ0KS50b0JlQ2xvc2VUbygxMjYpO1xuICAgIGV4cGVjdChwb3MudGh1bWJPbmUudG9wKS50b0JlKDApO1xuICAgIGV4cGVjdChwb3MudGh1bWJUd28pLm5vdC50b0JlKG51bGwpO1xuICAgIGlmIChwb3MudGh1bWJUd28gIT09IG51bGwpIHtcbiAgICAgIGV4cGVjdChwb3MudGh1bWJUd28ubGVmdCkudG9CZUNsb3NlVG8oMjk0KTtcbiAgICAgIGV4cGVjdChwb3MudGh1bWJUd28udG9wKS50b0JlKDApO1xuICAgIH1cbiAgfSk7XG4gIHRlc3QoJ1Nob3VsZCBiZSB0aHVtYk9uZToge2xlZnQ6IDAsIHRvcDogMH0gYW5kIHRodW1iVHdvOiB7bGVmdDogMCwgdG9wOiA0MjB9JywgKCkgPT4ge1xuICAgIG1vZGVsWydvcmllbnRhdGlvbiddID0gJ3ZlcnRpY2FsJztcbiAgICBtb2RlbFsnc2xpZGVyU2l6ZSddID0geyB3aWR0aDogNDQwLCBoZWlnaHQ6IDQ0MCB9O1xuICAgIG1vZGVsWyd0aHVtYlNpemUnXSA9IHsgd2lkdGg6IDIwLCBoZWlnaHQ6IDIwIH07XG4gICAgbW9kZWxbJ3RodW1iT25lVmFsdWUnXSA9IC01O1xuICAgIG1vZGVsWyd0aHVtYlR3b1ZhbHVlJ10gPSA3NztcbiAgICBjb25zdCBwb3MgPSBtb2RlbC5nZXRUaHVtYnNQb3NpdGlvbnMoKTtcblxuICAgIGV4cGVjdChwb3MudGh1bWJPbmUubGVmdCkudG9CZSgwKTtcbiAgICBleHBlY3QocG9zLnRodW1iT25lLnRvcCkudG9CZSgwKTtcbiAgICBleHBlY3QocG9zLnRodW1iVHdvKS5ub3QudG9CZShudWxsKTtcbiAgICBpZiAocG9zLnRodW1iVHdvICE9PSBudWxsKSB7XG4gICAgICBleHBlY3QocG9zLnRodW1iVHdvLmxlZnQpLnRvQmVDbG9zZVRvKDApO1xuICAgICAgZXhwZWN0KHBvcy50aHVtYlR3by50b3ApLnRvQmUoNDIwKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdHZXQgcG9wIHVwcyBwYXJhbXMnLCAoKSA9PiB7XG4gIHRlc3QoJ1Nob3VsZCBiZSBwb3NPbmU6IHtsZWZ0OiAxNTQsIHRvcDogMH0gYW5kIHBvc1R3bzoge2xlZnQ6IDM0NiwgdG9wOiAwfScsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBtb2RlbC5nZXRQb3BVcHNQYXJhbXMoKTtcbiAgICBleHBlY3QocGFyYW1zLnBvcFVwT25lLnBvc2l0aW9uLmxlZnQpLnRvQmVDbG9zZVRvKDE1NCwgMCk7XG4gICAgZXhwZWN0KHBhcmFtcy5wb3BVcE9uZS5wb3NpdGlvbi50b3ApLnRvQmVDbG9zZVRvKDAsIDApO1xuICAgIGV4cGVjdChwYXJhbXMucG9wVXBUd28ucG9zaXRpb24ubGVmdCkudG9CZUNsb3NlVG8oMzQ2LCAwKTtcbiAgICBleHBlY3QocGFyYW1zLnBvcFVwVHdvLnBvc2l0aW9uLnRvcCkudG9CZUNsb3NlVG8oMCwgMCk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUgcG9wVXBPbmU6IDMgYW5kIHBvcFVwVHdvOiA3fScsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBtb2RlbC5nZXRQb3BVcHNQYXJhbXMoKTtcbiAgICBleHBlY3QocGFyYW1zLnBvcFVwT25lLnZhbHVlKS50b0JlKDMpO1xuICAgIGV4cGVjdChwYXJhbXMucG9wVXBUd28udmFsdWUpLnRvQmUoNyk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUgcG9zT25lOiB7bGVmdDogMCwgdG9wOiAxNTR9IGFuZCBwb3NUd286IHtsZWZ0OiAwLCB0b3A6IDM0Nn0nLCAoKSA9PiB7XG4gICAgc2V0dGluZ3Mub3JpZW50YXRpb24gPSAndmVydGljYWwnO1xuICAgIHNldHRpbmdzLnNsaWRlclNpemUgPSB7IHdpZHRoOiAxMCwgaGVpZ2h0OiA1MDAgfTtcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbW9kZWwuZ2V0UG9wVXBzUGFyYW1zKCk7XG4gICAgZXhwZWN0KHBhcmFtcy5wb3BVcE9uZS5wb3NpdGlvbi5sZWZ0KS50b0JlQ2xvc2VUbygwLCAwKTtcbiAgICBleHBlY3QocGFyYW1zLnBvcFVwT25lLnBvc2l0aW9uLnRvcCkudG9CZUNsb3NlVG8oMTU0LCAwKTtcbiAgICBleHBlY3QocGFyYW1zLnBvcFVwVHdvLnBvc2l0aW9uLmxlZnQpLnRvQmVDbG9zZVRvKDAsIDApO1xuICAgIGV4cGVjdChwYXJhbXMucG9wVXBUd28ucG9zaXRpb24udG9wKS50b0JlQ2xvc2VUbygzNDYsIDApO1xuICB9KTtcbiAgdGVzdCgnU2hvdWxkIGJlIHBvcFVwT25lOiAzIGFuZCBwb3BVcFR3bzogN30nLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0gbW9kZWwuZ2V0UG9wVXBzUGFyYW1zKCk7XG4gICAgZXhwZWN0KHBhcmFtcy5wb3BVcE9uZS52YWx1ZSkudG9CZSgzKTtcbiAgICBleHBlY3QocGFyYW1zLnBvcFVwVHdvLnZhbHVlKS50b0JlKDcpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnR2V0IHRodW1iIHZhbHVlcycsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIGJlIHt0aHVtYk9uZTogMywgdGh1bWJUd286IDd9JywgKCkgPT4ge1xuICAgIGV4cGVjdChtb2RlbC5nZXRUaHVtYnNWYWx1ZXMoKS50aHVtYk9uZSkudG9CZSgzKTtcbiAgICBleHBlY3QobW9kZWwuZ2V0VGh1bWJzVmFsdWVzKCkudGh1bWJUd28pLnRvQmUoNyk7XG4gIH0pO1xuICB0ZXN0KCdTaG91bGQgYmUge3RodW1iT25lOiA1LCB0aHVtYlR3bzogOX0nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0VGh1bWJzVmFsdWVzKHsgdGh1bWJPbmU6IDUsIHRodW1iVHdvOiA5IH0pO1xuICAgIGV4cGVjdChtb2RlbC5nZXRUaHVtYnNWYWx1ZXMoKS50aHVtYk9uZSkudG9CZSg1KTtcbiAgICBleHBlY3QobW9kZWwuZ2V0VGh1bWJzVmFsdWVzKCkudGh1bWJUd28pLnRvQmUoOSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdHZXQgc2NhbGUgcG9pbnRzJywgKCkgPT4ge1xuICB0ZXN0KCdMZW5ndGggb2YgdGhlIHNjYWxlIHBvaW50cyBhcnJheSBzaG91bGQgYmUgMTEnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2NhbGVQb2ludHMgPSBtb2RlbC5nZXRTY2FsZVBvaW50cygpO1xuICAgIGV4cGVjdChzY2FsZVBvaW50cy5sZW5ndGgpLnRvQmUoMTEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHZhbHVlIG9mIHRoZSA1dGggZWxlbWVudCBvZiB0aGUgYXJyYXkgb2Ygc2NhbGUgcG9pbnRzIHNob3VsZCBiZSA1JywgKCkgPT4ge1xuICAgIGNvbnN0IHNjYWxlUG9pbnRzID0gbW9kZWwuZ2V0U2NhbGVQb2ludHMoKTtcbiAgICBleHBlY3Qoc2NhbGVQb2ludHNbNV0udmFsdWUpLnRvQmUoNSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgc2l6ZSBvZiB0aGUgNXRoIGVsZW1lbnQgb2YgdGhlIGFycmF5IG9mIHNjYWxlIHBvaW50cyBzaG91bGQgYmUge3dpZHRoOiAxMCwgaGVpZ2h0OiAxMH0nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0U2NhbGVQb2ludFNpemUoeyB3aWR0aDogMTAsIGhlaWdodDogMTAgfSk7XG4gICAgY29uc3Qgc2NhbGVQb2ludHMgPSBtb2RlbC5nZXRTY2FsZVBvaW50cygpO1xuICAgIGV4cGVjdChzY2FsZVBvaW50c1s1XS5zaXplLndpZHRoKS50b0JlKDEwKTtcbiAgICBleHBlY3Qoc2NhbGVQb2ludHNbNV0uc2l6ZS5oZWlnaHQpLnRvQmUoMTApO1xuICB9KTtcbiAgdGVzdCgnVGhlIHBvc2l0aW9uIG9mIHRoZSA1dGggZWxlbWVudCBvZiB0aGUgYXJyYXkgb2Ygc2NhbGUgcG9pbnRzIHNob3VsZCBiZSB7bGVmdDogMCwgdG9wOiAyMH0nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0U2NhbGVQb2ludFNpemUoeyB3aWR0aDogMTAsIGhlaWdodDogMTAgfSk7XG4gICAgY29uc3Qgc2NhbGVQb2ludHMgPSBtb2RlbC5nZXRTY2FsZVBvaW50cygpO1xuICAgIGV4cGVjdChzY2FsZVBvaW50c1s1XS5wb3NpdGlvbi5sZWZ0KS50b0JlKDI0NSk7XG4gICAgZXhwZWN0KHNjYWxlUG9pbnRzWzVdLnBvc2l0aW9uLnRvcCkudG9CZSgwKTtcbiAgfSk7XG4gIHRlc3QoJ0xlbmd0aCBvZiB0aGUgc2NhbGUgcG9pbnRzIGFycmF5IHNob3VsZCBiZSAxNCcsICgpID0+IHtcbiAgICBzZXR0aW5ncy5vcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgc2V0dGluZ3Muc2xpZGVyU2l6ZSA9IHsgd2lkdGg6IDEwLCBoZWlnaHQ6IDUwMCB9O1xuICAgIHNldHRpbmdzLm1heCA9IDEzO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgY29uc3Qgc2NhbGVQb2ludHMgPSBtb2RlbC5nZXRTY2FsZVBvaW50cygpO1xuICAgIGV4cGVjdChzY2FsZVBvaW50cy5sZW5ndGgpLnRvQmUoMTQpO1xuICB9KTtcbiAgdGVzdCgnTGVuZ3RoIG9mIHRoZSBzY2FsZSBwb2ludHMgYXJyYXkgc2hvdWxkIGJlIDQ1JywgKCkgPT4ge1xuICAgIG1vZGVsLnNldFNjYWxlUG9pbnRTaXplKHsgd2lkdGg6IDEwLCBoZWlnaHQ6IDEwIH0pO1xuICAgIHNldHRpbmdzLm1heCA9IDM1NDtcbiAgICBtb2RlbC5yZWZyZXNoU2xpZGVyU3RhdGUoc2V0dGluZ3MpO1xuICAgIGNvbnN0IHNjYWxlUG9pbnRzID0gbW9kZWwuZ2V0U2NhbGVQb2ludHMoKTtcbiAgICBleHBlY3Qoc2NhbGVQb2ludHMubGVuZ3RoKS50b0JlKDQ1KTtcbiAgfSk7XG4gIHRlc3QoJ0xlbmd0aCBvZiB0aGUgc2NhbGUgcG9pbnRzIGFycmF5IHNob3VsZCBiZSAyNScsICgpID0+IHtcbiAgICBzZXR0aW5ncy5tYXggPSAzNTQ7XG4gICAgc2V0dGluZ3Muc3RlcCA9IDE1O1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgY29uc3Qgc2NhbGVQb2ludHMgPSBtb2RlbC5nZXRTY2FsZVBvaW50cygpO1xuICAgIGV4cGVjdChzY2FsZVBvaW50cy5sZW5ndGgpLnRvQmUoMjUpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnU2V0IHRodW1iIHBvc2l0aW9uIG9uIGNsaWNrIHBvc2l0aW9uJywgKCkgPT4ge1xuICB0ZXN0KCdUaHVtYk9uZSBwb3NpdGlvbiB2YWx1ZSBzaG91bGQgYmUgMycsICgpID0+IHtcbiAgICBtb2RlbC5zZXRUaHVtYlBvc2l0aW9uT25DbGlja1Bvc2l0aW9uKHsgbGVmdDogMTAwLCB0b3A6IDAgfSk7XG4gICAgZXhwZWN0KG1vZGVsLmdldFRodW1ic1ZhbHVlcygpLnRodW1iT25lKS50b0JlKDIpO1xuICB9KTtcbiAgdGVzdCgnVGh1bWJUd28gc2hvdWxkIGJlIG5vdCBjaGFuZ2UgcG9zaXRpb24nLCAoKSA9PiB7XG4gICAgbW9kZWwuc2V0VGh1bWJQb3NpdGlvbk9uQ2xpY2tQb3NpdGlvbih7IGxlZnQ6IDEwMCwgdG9wOiAwIH0pO1xuICAgIGV4cGVjdChtb2RlbC5nZXRUaHVtYnNWYWx1ZXMoKS50aHVtYlR3bykudG9CZSg3KTtcbiAgfSk7XG4gIHRlc3QoJ1RodW1iT25lIHNob3VsZCBiZSBub3QgY2hhbmdlIHBvc2l0aW9uJywgKCkgPT4ge1xuICAgIG1vZGVsLnNldFRodW1iUG9zaXRpb25PbkNsaWNrUG9zaXRpb24oeyBsZWZ0OiAxMDAsIHRvcDogMCB9KTtcbiAgICBleHBlY3QobW9kZWwuZ2V0VGh1bWJzVmFsdWVzKCkudGh1bWJPbmUpLnRvQmUoMik7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYlR3byBwb3NpdGlvbiB2YWx1ZSBzaG91bGQgYmUgOCcsICgpID0+IHtcbiAgICBtb2RlbC5zZXRUaHVtYlBvc2l0aW9uT25DbGlja1Bvc2l0aW9uKHsgbGVmdDogNDAwLCB0b3A6IDAgfSk7XG4gICAgZXhwZWN0KG1vZGVsLmdldFRodW1ic1ZhbHVlcygpLnRodW1iVHdvKS50b0JlKDgpO1xuICB9KTtcbiAgdGVzdCgnVGh1bWJUd28gcG9zaXRpb24gdmFsdWUgc2hvdWxkIGJlIDgnLCAoKSA9PiB7XG4gICAgc2V0dGluZ3MudHlwZSA9ICdzaW5nbGUnO1xuICAgIG1vZGVsLnJlZnJlc2hTbGlkZXJTdGF0ZShzZXR0aW5ncyk7XG4gICAgbW9kZWwuc2V0VGh1bWJQb3NpdGlvbk9uQ2xpY2tQb3NpdGlvbih7IGxlZnQ6IDQwMCwgdG9wOiAwIH0pO1xuICAgIGV4cGVjdChtb2RlbC5nZXRUaHVtYnNWYWx1ZXMoKS50aHVtYk9uZSkudG9CZSg4KTtcbiAgfSk7XG59KTtcbiIsIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIGFycm93LWJvZHktc3R5bGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLWRhbmdsZSAqL1xuXG5pbXBvcnQgU2ltcGxlU2xpZGVyVmlldyBmcm9tICcuLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9zaW1wbGUtc2xpZGVyLXZpZXcnO1xuXG5qZXN0Lm1vY2soJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NsaWRlci9zbGlkZXInKTtcbmplc3QubW9jaygnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdHJhY2svdHJhY2snKTtcbmplc3QubW9jaygnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdGh1bWIvdGh1bWInKTtcbmplc3QubW9jaygnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvcG9wLXVwL3BvcC11cCcpO1xuamVzdC5tb2NrKCcuLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy9wcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyJyk7XG5qZXN0Lm1vY2soJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci92aWV3L3NjYWxlL3NjYWxlJyk7XG5cbmxldCB3cmFwcGVyOiBIVE1MRGl2RWxlbWVudDtcbmxldCB2aWV3OiBTaW1wbGVTbGlkZXJWaWV3O1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2aWV3ID0gbmV3IFNpbXBsZVNsaWRlclZpZXcod3JhcHBlcik7XG59KTtcblxuZGVzY3JpYmUoJ1dpbmRvdyByZXNpemUnLCAoKSA9PiB7XG4gIHRlc3QoJ05vdGlmeSBtZXRob2Qgb2YgdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IHNweU9uKHZpZXcuc3ViamVjdCwgJ25vdGlmeScpO1xuICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuRXZlbnQoJ3Jlc2l6ZScpO1xuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnQXNzZW1ibGUgc2xpZGVyJywgKCkgPT4ge1xuICB0ZXN0KCdXcmFwcGVyIHNob3VsZCBiZSBjb250YWluIGEgc2xpZGVyIGVsZW1lbnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIucXVlcnlTZWxlY3RvcignLnNsaWRlcicpKS5ub3QudG9CZU51bGwoKTtcbiAgfSk7XG4gIHRlc3QoJ1dyYXBwZXIgc2hvdWxkIGJlIGNvbnRhaW4gYSB0cmFjayBlbGVtZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdCh3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXJfX3RyYWNrJykpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcbiAgdGVzdCgnV3JhcHBlciBzaG91bGQgYmUgY29udGFpbiBhIHRodW1iIGVsZW1lbnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fdGh1bWInKSkubm90LnRvQmVOdWxsKCk7XG4gIH0pO1xuICB0ZXN0KCdXcmFwcGVyIHNob3VsZCBiZSBjb250YWluIGEgcG9wLXVwIGVsZW1lbnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdyYXBwZXIucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fcG9wLXVwJykpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcbiAgdGVzdCgnV3JhcHBlciBzaG91bGQgYmUgY29udGFpbiBhIHByb2dyZXNzLWJhciBlbGVtZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdCh3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXJfX3Byb2dyZXNzLWJhcicpKS5ub3QudG9CZU51bGwoKTtcbiAgfSk7XG4gIHRlc3QoJ1dyYXBwZXIgc2hvdWxkIGJlIGNvbnRhaW4gYSBzY2FsZSBlbGVtZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdCh3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXJfX3NjYWxlJykpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcbiAgdGVzdCgnV3JhcHBlciBzaG91bGQgYmUgY29udGFpbiBhIHNsaWRlciBlbGVtZW50JywgKCkgPT4ge1xuICAgIHZpZXdbJ3NsaWRlciddLnJlbW92ZSgpO1xuICAgIHZpZXdbJ3RodW1iVHdvJ10gPSBudWxsO1xuICAgIHZpZXdbJ3BvcFVwT25lJ10gPSBudWxsO1xuICAgIHZpZXdbJ3BvcFVwVHdvJ10gPSBudWxsO1xuICAgIHZpZXdbJ3NjYWxlJ10gPSBudWxsO1xuICAgIHZpZXdbJ2Fzc2VtYmxlU2xpZGVyJ10oKTtcbiAgICBleHBlY3Qod3JhcHBlci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyJykpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVXBkYXRlIG1ldGhvZCcsICgpID0+IHtcbiAgdGVzdCgnTm90aWZ5IG1ldGhvZCBvZiB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gc3B5T24odmlldy5zdWJqZWN0LCAnbm90aWZ5Jyk7XG4gICAgdmlldy51cGRhdGUoJ3RodW1iSXNEcmFnZ2VkJyk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHJlc2V0WkluZGV4IG1ldGhvZCBvZiB0aGUgdGh1bWJPbmUgb2JqZWN0IHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBzcHlPbih2aWV3Wyd0aHVtYk9uZSddLCAncmVzZXRaSW5kZXgnKTtcbiAgICB2aWV3LnVwZGF0ZSgndGh1bWJJc0NhdGNoZWQnKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgcmVzZXRaSW5kZXggbWV0aG9kIG9mIHRodW1iVHdvIG11c3QgYmUgY2FsbGVkIHR3aWNlJywgKCkgPT4ge1xuICAgIGlmICh2aWV3Wyd0aHVtYlR3byddICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBzcHkgPSBzcHlPbih2aWV3Wyd0aHVtYlR3byddLCAncmVzZXRaSW5kZXgnKTtcbiAgICAgIHZpZXcudXBkYXRlKCd0aHVtYklzQ2F0Y2hlZCcpO1xuICAgICAgdmlldy51cGRhdGUoJ3RodW1iSXNDYXRjaGVkJyk7XG4gICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMik7XG4gICAgfVxuICB9KTtcbiAgdGVzdCgnTm90aWZ5IG1ldGhvZCBvZiB0aGUgU2ltcGxlU2xpZGVyVmlldyBjbGFzcyBub3Qgc2hvdWxkIGJlIGNhbGxlZCcsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBzcHlPbih2aWV3LnN1YmplY3QsICdub3RpZnknKTtcbiAgICB2aWV3LnVwZGF0ZSgnZW1wdHlFdmVudCcpO1xuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygwKTtcbiAgfSk7XG4gIHRlc3QoJ05vdGlmeSBtZXRob2Qgb2YgdGhlIFNpbXBsZVNsaWRlclZpZXcgY2xhc3Mgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IHNweU9uKHZpZXcuc3ViamVjdCwgJ25vdGlmeScpO1xuICAgIHZpZXcudXBkYXRlKCdjbGlja1RvVHJhY2snKTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdOb3RpZnkgbWV0aG9kIG9mIHRoZSBTaW1wbGVTbGlkZXJWaWV3IGNsYXNzIHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBzcHlPbih2aWV3LnN1YmplY3QsICdub3RpZnknKTtcbiAgICB2aWV3LnVwZGF0ZSgnY2xpY2tUb1NjYWxlJyk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnU3dpdGNoIHRvIGhvcml6b250YWwnLCAoKSA9PiB7XG4gIHRlc3QoJ1RoZSBzbGlkZXIgbXVzdCBjb250YWluIGEgY2xhc3Mgc2xpZGVyX2hvcml6b250YWwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb0hvcml6b250YWwoKTtcbiAgICBleHBlY3QoXG4gICAgICB2aWV3WydzbGlkZXInXS5nZXRDb250cm9sKCkuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZXJfaG9yaXpvbnRhbCcpXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHRyYWNrIG11c3QgY29udGFpbiBhIGNsYXNzIHNsaWRlcl9fdHJhY2tfaG9yaXpvbnRhbCcsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIGV4cGVjdChcbiAgICAgIHZpZXdbJ3RyYWNrJ10uZ2V0Q29udHJvbCgpLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX190cmFja19ob3Jpem9udGFsJylcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgdGh1bWJPbmUgbXVzdCBjb250YWluIGEgY2xhc3Mgc2xpZGVyX190aHVtYl9ob3Jpem9udGFsJywgKCkgPT4ge1xuICAgIHZpZXcuc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gICAgZXhwZWN0KFxuICAgICAgdmlld1sndGh1bWJPbmUnXVxuICAgICAgICAuZ2V0Q29udHJvbCgpXG4gICAgICAgIC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9fdGh1bWJfaG9yaXpvbnRhbCcpXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHRodW1iVHdvIG11c3QgY29udGFpbiBhIGNsYXNzIHNsaWRlcl9fdGh1bWJfaG9yaXpvbnRhbCcsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIGV4cGVjdChcbiAgICAgIHZpZXdbJ3RodW1iVHdvJ11cbiAgICAgICAgPy5nZXRDb250cm9sKClcbiAgICAgICAgLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX190aHVtYl9ob3Jpem9udGFsJylcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgcG9wVXBPbmUgbXVzdCBjb250YWluIGEgY2xhc3Mgc2xpZGVyX19wb3AtdXBfaG9yaXpvbnRhbCcsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvSG9yaXpvbnRhbCgpO1xuICAgIGV4cGVjdChcbiAgICAgIHZpZXdbJ3BvcFVwT25lJ11cbiAgICAgICAgPy5nZXRDb250cm9sKClcbiAgICAgICAgLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX19wb3AtdXBfaG9yaXpvbnRhbCcpXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHBvcFVwVHdvIG11c3QgY29udGFpbiBhIGNsYXNzIHNsaWRlcl9fcG9wLXVwX2hvcml6b250YWwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb0hvcml6b250YWwoKTtcbiAgICBleHBlY3QoXG4gICAgICB2aWV3Wydwb3BVcFR3byddXG4gICAgICAgID8uZ2V0Q29udHJvbCgpXG4gICAgICAgIC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9fcG9wLXVwX2hvcml6b250YWwnKVxuICAgICkudG9CZSh0cnVlKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBwcm9ncmVzc0JhciBtdXN0IGNvbnRhaW4gYSBjbGFzcyBzbGlkZXJfX3Byb2dyZXNzLWJhcl9ob3Jpem9udGFsJywgKCkgPT4ge1xuICAgIHZpZXcuc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gICAgZXhwZWN0KFxuICAgICAgdmlld1sncHJvZ3Jlc3NCYXInXVxuICAgICAgICAuZ2V0Q29udHJvbCgpXG4gICAgICAgIC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9fcHJvZ3Jlc3MtYmFyX2hvcml6b250YWwnKVxuICAgICkudG9CZSh0cnVlKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBzY2FsZSBtdXN0IGNvbnRhaW4gYSBjbGFzcyBzbGlkZXJfX3NjYWxlX2hvcml6b250YWwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb0hvcml6b250YWwoKTtcbiAgICBleHBlY3QoXG4gICAgICB2aWV3WydzY2FsZSddPy5nZXRDb250cm9sKCkuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZXJfX3NjYWxlX2hvcml6b250YWwnKVxuICAgICkudG9CZSh0cnVlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1N3aXRjaCB0byB2ZXJ0aWNhbCcsICgpID0+IHtcbiAgdGVzdCgnVGhlIHNsaWRlciBtdXN0IGNvbnRhaW4gYSBjbGFzcyBzbGlkZXJfdmVydGljYWwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb1ZlcnRpY2FsKCk7XG4gICAgZXhwZWN0KFxuICAgICAgdmlld1snc2xpZGVyJ10uZ2V0Q29udHJvbCgpLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX3ZlcnRpY2FsJylcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgdHJhY2sgbXVzdCBjb250YWluIGEgY2xhc3Mgc2xpZGVyX190cmFja19ob3Jpem9udGFsJywgKCkgPT4ge1xuICAgIHZpZXcuc3dpdGNoVG9WZXJ0aWNhbCgpO1xuICAgIGV4cGVjdChcbiAgICAgIHZpZXdbJ3RyYWNrJ10uZ2V0Q29udHJvbCgpLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX190cmFja192ZXJ0aWNhbCcpXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHRodW1iT25lIG11c3QgY29udGFpbiBhIGNsYXNzIHNsaWRlcl9fdGh1bWJfdmVydGljYWwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb1ZlcnRpY2FsKCk7XG4gICAgZXhwZWN0KFxuICAgICAgdmlld1sndGh1bWJPbmUnXS5nZXRDb250cm9sKCkuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZXJfX3RodW1iX3ZlcnRpY2FsJylcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgdGh1bWJUd28gbXVzdCBjb250YWluIGEgY2xhc3Mgc2xpZGVyX190aHVtYl92ZXJ0aWNhbCcsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvVmVydGljYWwoKTtcbiAgICBleHBlY3QoXG4gICAgICB2aWV3Wyd0aHVtYlR3byddXG4gICAgICAgID8uZ2V0Q29udHJvbCgpXG4gICAgICAgIC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9fdGh1bWJfdmVydGljYWwnKVxuICAgICkudG9CZSh0cnVlKTtcbiAgfSk7XG4gIHRlc3QoJ1RoZSBwb3BVcE9uZSBtdXN0IGNvbnRhaW4gYSBjbGFzcyBzbGlkZXJfX3BvcC11cF92ZXJ0aWNhbCcsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvVmVydGljYWwoKTtcbiAgICBleHBlY3QoXG4gICAgICB2aWV3Wydwb3BVcE9uZSddXG4gICAgICAgID8uZ2V0Q29udHJvbCgpXG4gICAgICAgIC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9fcG9wLXVwX3ZlcnRpY2FsJylcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgcG9wVXBUd28gbXVzdCBjb250YWluIGEgY2xhc3Mgc2xpZGVyX19wb3AtdXBfdmVydGljYWwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb1ZlcnRpY2FsKCk7XG4gICAgZXhwZWN0KFxuICAgICAgdmlld1sncG9wVXBUd28nXVxuICAgICAgICA/LmdldENvbnRyb2woKVxuICAgICAgICAuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZXJfX3BvcC11cF92ZXJ0aWNhbCcpXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHByb2dyZXNzQmFyIG11c3QgY29udGFpbiBhIGNsYXNzIHNsaWRlcl9fcHJvZ3Jlc3MtYmFyX3ZlcnRpY2FsJywgKCkgPT4ge1xuICAgIHZpZXcuc3dpdGNoVG9WZXJ0aWNhbCgpO1xuICAgIGV4cGVjdChcbiAgICAgIHZpZXdbJ3Byb2dyZXNzQmFyJ11cbiAgICAgICAgLmdldENvbnRyb2woKVxuICAgICAgICAuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZXJfX3Byb2dyZXNzLWJhcl92ZXJ0aWNhbCcpXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHNjYWxlIG11c3QgY29udGFpbiBhIGNsYXNzIHNsaWRlcl9fc2NhbGVfdmVydGljYWwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb1ZlcnRpY2FsKCk7XG4gICAgZXhwZWN0KFxuICAgICAgdmlld1snc2NhbGUnXT8uZ2V0Q29udHJvbCgpLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX19zY2FsZV92ZXJ0aWNhbCcpXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnU3dpdGNoIHRvIHNpbmdsZScsICgpID0+IHtcbiAgdGVzdCgnVGh1bWJUd28gc2hvdWxkIGJlIG51bGwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb1NpbmdsZSgpO1xuICAgIGV4cGVjdCh2aWV3Wyd0aHVtYlR3byddKS50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnU3dpdGNoIHRvIHJhbmdlJywgKCkgPT4ge1xuICB0ZXN0KCdUaHVtYlR3byBzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvUmFuZ2UoKTtcbiAgICBleHBlY3Qodmlld1sndGh1bWJUd28nXSkubm90LnRvQmVOdWxsKCk7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYlR3byBzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvU2luZ2xlKCk7XG4gICAgdmlldy5zd2l0Y2hUb1JhbmdlKCk7XG4gICAgZXhwZWN0KHZpZXdbJ3RodW1iVHdvJ10pLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcbiAgdGVzdCgnVGh1bWJUd28gc2hvdWxkIGJlIGRlZmluZWQgYW5hIHBvcFVwVHdvIHNob3VsZCBiZSBudWxsJywgKCkgPT4ge1xuICAgIHZpZXcuc3dpdGNoVG9TaW5nbGUoKTtcbiAgICB2aWV3Wydwb3BVcE9uZSddID0gbnVsbDtcbiAgICB2aWV3LnN3aXRjaFRvUmFuZ2UoKTtcbiAgICBleHBlY3Qodmlld1sndGh1bWJUd28nXSkubm90LnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHZpZXdbJ3BvcFVwVHdvJ10pLnRvQmVOdWxsKCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdEaXNhYmxlIHBvcCB1cHMnLCAoKSA9PiB7XG4gIHRlc3QoJ1BvcFVwT25lIHNob3VsZCBiZSBudWxsJywgKCkgPT4ge1xuICAgIHZpZXcuZGlzYWJsZVBvcFVwcygpO1xuICAgIGV4cGVjdCh2aWV3Wydwb3BVcE9uZSddKS50b0JlTnVsbCgpO1xuICB9KTtcbiAgdGVzdCgnUG9wVXBUd28gc2hvdWxkIGJlIG51bGwnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb1JhbmdlKCk7XG4gICAgdmlldy5kaXNhYmxlUG9wVXBzKCk7XG4gICAgZXhwZWN0KHZpZXdbJ3BvcFVwVHdvJ10pLnRvQmVOdWxsKCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdFbmFibGUgcG9wIHVwcycsICgpID0+IHtcbiAgdGVzdCgnUG9wVXBPbmUgc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgdmlldy5kaXNhYmxlUG9wVXBzKCk7XG4gICAgdmlldy5lbmFibGVQb3BVcHMoKTtcbiAgICBleHBlY3Qodmlld1sncG9wVXBPbmUnXSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG4gIHRlc3QoJ1BvcFVwVHdvIHNob3VsZCBiZSBudWxsJywgKCkgPT4ge1xuICAgIHZpZXcuc3dpdGNoVG9TaW5nbGUoKTtcbiAgICB2aWV3LmVuYWJsZVBvcFVwcygpO1xuICAgIGV4cGVjdCh2aWV3Wydwb3BVcFR3byddKS50b0JlTnVsbCgpO1xuICB9KTtcbiAgdGVzdCgnUG9wVXBUd28gc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgdmlldy5zd2l0Y2hUb1NpbmdsZSgpO1xuICAgIHZpZXcuc3dpdGNoVG9SYW5nZSgpO1xuICAgIHZpZXcuZGlzYWJsZVBvcFVwcygpO1xuICAgIHZpZXcuZW5hYmxlUG9wVXBzKCk7XG4gICAgZXhwZWN0KHZpZXdbJ3BvcFVwVHdvJ10pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdEaXNhYmxlIHNjYWxlJywgKCkgPT4ge1xuICB0ZXN0KCdTY2FsZSBzaG91bGQgYmUgbnVsbCcsICgpID0+IHtcbiAgICB2aWV3LmRpc2FibGVTY2FsZSgpO1xuICAgIGV4cGVjdCh2aWV3WydzY2FsZSddKS50b0JlTnVsbCgpO1xuICB9KTtcbiAgdGVzdCgnU2NhbGUgc2hvdWxkIGJlIG51bGwnLCAoKSA9PiB7XG4gICAgdmlldy5lbmFibGVTY2FsZSgpO1xuICAgIHZpZXcuZGlzYWJsZVNjYWxlKCk7XG4gICAgZXhwZWN0KHZpZXdbJ3NjYWxlJ10pLnRvQmVOdWxsKCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdFbmFibGUgc2NhbGUnLCAoKSA9PiB7XG4gIHRlc3QoJ1NjYWxlIHNob3VsZCBiZSBkZWZpbmVkJywgKCkgPT4ge1xuICAgIHZpZXcuZW5hYmxlU2NhbGUoKTtcbiAgICB2aWV3LmVuYWJsZVNjYWxlKCk7XG4gICAgZXhwZWN0KHZpZXdbJ3NjYWxlJ10pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZSBzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICB2aWV3LmRpc2FibGVTY2FsZSgpO1xuICAgIHZpZXcuZW5hYmxlU2NhbGUoKTtcbiAgICBleHBlY3Qodmlld1snc2NhbGUnXSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCB0aHVtYiBzaXplJywgKCkgPT4ge1xuICB0ZXN0KCdTaG91bGQgYmUgdHJ1ZScsICgpID0+IHtcbiAgICBleHBlY3Qodmlldy5nZXRUaHVtYlNpemUoKSkudG9CZSh0cnVlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBzbGlkZXIgc2l6ZScsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIGJlIHRydWUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHZpZXcuZ2V0U2xpZGVyU2l6ZSgpKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnR2V0IHRodW1icyBwb3NpdGlvbnMnLCAoKSA9PiB7XG4gIHRlc3QoJ1RodW1iT25lIHNob3VsZCBiZSB0cnVlJywgKCkgPT4ge1xuICAgIGV4cGVjdCh2aWV3LmdldFRodW1ic1Bvc2l0aW9ucygpLnRodW1iT25lKS50b0JlKHRydWUpO1xuICB9KTtcbiAgdGVzdCgnVGh1bWJUd28gc2hvdWxkIGJlIHRydWUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHZpZXcuZ2V0VGh1bWJzUG9zaXRpb25zKCkudGh1bWJUd28pLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYlR3byBzaG91bGQgYmUgdHJ1ZScsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvU2luZ2xlKCk7XG4gICAgZXhwZWN0KHZpZXcuZ2V0VGh1bWJzUG9zaXRpb25zKCkudGh1bWJPbmUpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYlR3byBzaG91bGQgYmUgdHJ1ZScsICgpID0+IHtcbiAgICB2aWV3LnN3aXRjaFRvU2luZ2xlKCk7XG4gICAgZXhwZWN0KHZpZXcuZ2V0VGh1bWJzUG9zaXRpb25zKCkudGh1bWJUd28pLnRvQmUobnVsbCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdVcGRhdGUgdGh1bWJzJywgKCkgPT4ge1xuICB0ZXN0KCdUaGUgbW92ZVRvIG1ldGhvZCBvZiB0aGUgdGh1bWJPbmUgb2JqZWN0IHNob3VsZCBiZSBjYWxsZWQgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBzcHlPbih2aWV3Wyd0aHVtYk9uZSddLCAnbW92ZVRvJyk7XG4gICAgdmlldy51cGRhdGVUaHVtYnMoe1xuICAgICAgdGh1bWJPbmU6IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICB0aHVtYlR3bzogeyBsZWZ0OiAwLCB0b3A6IDAgfSxcbiAgICB9KTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgbW92ZVRvIG1ldGhvZCBvZiB0aGUgdGh1bWJUd28gb2JqZWN0IG11c3QgYmUgY2FsbGVkIHplcm8gdGltZXMnLCAoKSA9PiB7XG4gICAgaWYgKHZpZXdbJ3RodW1iVHdvJ10gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHNweSA9IHNweU9uKHZpZXdbJ3RodW1iVHdvJ10sICdtb3ZlVG8nKTtcbiAgICAgIHZpZXcudXBkYXRlVGh1bWJzKHtcbiAgICAgICAgdGh1bWJPbmU6IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICAgIHRodW1iVHdvOiBudWxsLFxuICAgICAgfSk7XG4gICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMCk7XG4gICAgfVxuICB9KTtcbiAgdGVzdCgnVGhlIG1vdmVUbyBtZXRob2Qgb2YgdGh1bWJUd28gc2hvdWxkIGJlIGNhbGxlZCB0d2ljZScsICgpID0+IHtcbiAgICBpZiAodmlld1sndGh1bWJUd28nXSAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgc3B5ID0gc3B5T24odmlld1sndGh1bWJUd28nXSwgJ21vdmVUbycpO1xuICAgICAgdmlldy51cGRhdGVUaHVtYnMoe1xuICAgICAgICB0aHVtYk9uZTogeyBsZWZ0OiAwLCB0b3A6IDAgfSxcbiAgICAgICAgdGh1bWJUd286IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICB9KTtcbiAgICAgIHZpZXcudXBkYXRlVGh1bWJzKHtcbiAgICAgICAgdGh1bWJPbmU6IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICAgIHRodW1iVHdvOiB7IGxlZnQ6IDAsIHRvcDogMCB9LFxuICAgICAgfSk7XG4gICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMik7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVXBkYXRlIHByb2dyZXNzIGJhcicsICgpID0+IHtcbiAgdGVzdCgnVGhlIHVwZGF0ZSBtZXRob2Qgb2YgdGhlIHByb2dyZXNzQmFyIG9iamVjdCBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gc3B5T24odmlld1sncHJvZ3Jlc3NCYXInXSwgJ3VwZGF0ZScpO1xuICAgIHZpZXcudXBkYXRlUHJvZ3Jlc3NCYXIoe1xuICAgICAgcG9zaXRpb246IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICBzaXplOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICB9KTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgdXBkYXRlIG1ldGhvZCBvZiB0aGUgcHJvZ3Jlc3NCYXIgb2JqZWN0IHNob3VsZCBiZSBjYWxsZWQgdHdpY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gc3B5T24odmlld1sncHJvZ3Jlc3NCYXInXSwgJ3VwZGF0ZScpO1xuICAgIHZpZXcudXBkYXRlUHJvZ3Jlc3NCYXIoe1xuICAgICAgcG9zaXRpb246IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICBzaXplOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICB9KTtcbiAgICB2aWV3LnVwZGF0ZVByb2dyZXNzQmFyKHtcbiAgICAgIHBvc2l0aW9uOiB7IGxlZnQ6IDAsIHRvcDogMCB9LFxuICAgICAgc2l6ZTogeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgfSk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDIpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVXBkYXRlIHBvcCB1cHMnLCAoKSA9PiB7XG4gIHRlc3QoJ1RoZSB1cGRhdGUgbWV0aG9kIG9mIHRoZSBwb3BVcE9uZSBvYmplY3Qgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGxldCBzcHk7XG4gICAgaWYgKHZpZXdbJ3BvcFVwT25lJ10gIT09IG51bGwpIHtcbiAgICAgIHNweSA9IHNweU9uKHZpZXdbJ3BvcFVwT25lJ10sICd1cGRhdGUnKTtcbiAgICB9XG4gICAgdmlldy51cGRhdGVQb3BVcHMoe1xuICAgICAgcG9wVXBPbmU6IHsgdmFsdWU6IDAsIHBvc2l0aW9uOiB7IGxlZnQ6IDAsIHRvcDogMCB9IH0sXG4gICAgICBwb3BVcFR3bzogeyB2YWx1ZTogMCwgcG9zaXRpb246IHsgbGVmdDogMCwgdG9wOiAwIH0gfSxcbiAgICB9KTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdUaGUgdXBkYXRlIG1ldGhvZCBvZiB0aGUgcG9wVXBUd28gb2JqZWN0IHNob3VsZCBiZSBjYWxsZWQgdHdpY2UnLCAoKSA9PiB7XG4gICAgbGV0IHNweTtcbiAgICBpZiAodmlld1sncG9wVXBUd28nXSAhPT0gbnVsbCkge1xuICAgICAgc3B5ID0gc3B5T24odmlld1sncG9wVXBUd28nXSwgJ3VwZGF0ZScpO1xuICAgIH1cbiAgICB2aWV3LnVwZGF0ZVBvcFVwcyh7XG4gICAgICBwb3BVcE9uZTogeyB2YWx1ZTogMCwgcG9zaXRpb246IHsgbGVmdDogMCwgdG9wOiAwIH0gfSxcbiAgICAgIHBvcFVwVHdvOiB7IHZhbHVlOiAwLCBwb3NpdGlvbjogeyBsZWZ0OiAwLCB0b3A6IDAgfSB9LFxuICAgIH0pO1xuICAgIHZpZXcudXBkYXRlUG9wVXBzKHtcbiAgICAgIHBvcFVwT25lOiB7IHZhbHVlOiAwLCBwb3NpdGlvbjogeyBsZWZ0OiAwLCB0b3A6IDAgfSB9LFxuICAgICAgcG9wVXBUd286IHsgdmFsdWU6IDAsIHBvc2l0aW9uOiB7IGxlZnQ6IDAsIHRvcDogMCB9IH0sXG4gICAgfSk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDIpO1xuICB9KTtcbiAgdGVzdCgnVGhlIHVwZGF0ZSBtZXRob2Qgb2YgdGhlIHBvcFVwT25lIG9iamVjdCBzaG91bGQgYmUgY2FsbGVkIHplcm8gdGltZXMnLCAoKSA9PiB7XG4gICAgbGV0IHNweTE7XG4gICAgbGV0IHNweTI7XG4gICAgdmlldy5kaXNhYmxlUG9wVXBzKCk7XG4gICAgaWYgKHZpZXdbJ3BvcFVwT25lJ10gIT09IG51bGwpIHtcbiAgICAgIHNweTEgPSBzcHlPbih2aWV3Wydwb3BVcE9uZSddLCAndXBkYXRlJyk7XG4gICAgfVxuICAgIGlmICh2aWV3Wydwb3BVcFR3byddICE9PSBudWxsKSB7XG4gICAgICBzcHkyID0gc3B5T24odmlld1sncG9wVXBUd28nXSwgJ3VwZGF0ZScpO1xuICAgIH1cbiAgICB2aWV3LnVwZGF0ZVBvcFVwcyh7XG4gICAgICBwb3BVcE9uZTogeyB2YWx1ZTogMCwgcG9zaXRpb246IHsgbGVmdDogMCwgdG9wOiAwIH0gfSxcbiAgICAgIHBvcFVwVHdvOiB7IHZhbHVlOiAwLCBwb3NpdGlvbjogeyBsZWZ0OiAwLCB0b3A6IDAgfSB9LFxuICAgIH0pO1xuICAgIGV4cGVjdChzcHkxKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgZXhwZWN0KHNweTIpLnRvQmVVbmRlZmluZWQoKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBzY2FsZSBwb2ludCBzaXplJywgKCkgPT4ge1xuICB0ZXN0KCdTY2FsZVBvaW50U2l6ZSBzaG91bGQgYmUge3dpZHRoOiAwLCBoZWlnaHQ6IDB9JywgKCkgPT4ge1xuICAgIHZpZXcuZGlzYWJsZVNjYWxlKCk7XG4gICAgZXhwZWN0KHZpZXcuZ2V0U2NhbGVQb2ludFNpemUoMTApLndpZHRoKS50b0JlKDApO1xuICAgIGV4cGVjdCh2aWV3LmdldFNjYWxlUG9pbnRTaXplKDEwKS5oZWlnaHQpLnRvQmUoMCk7XG4gIH0pO1xuICB0ZXN0KCdTY2FsZVBvaW50U2l6ZSBzaG91bGQgYmUgdHJ1ZScsICgpID0+IHtcbiAgICBleHBlY3Qodmlldy5nZXRTY2FsZVBvaW50U2l6ZSgxMCkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdBZGQgc2NhbGUgcG9pbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ1RoZSBsZW5ndGggb2YgdGhlIHNjYWxlIHBvaW50cyBhcnJheSBtdXN0IGJlIDMnLCAoKSA9PiB7XG4gICAgdmlldy5hZGRTY2FsZVBvaW50cyhbXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiB7IGxlZnQ6IDAsIHRvcDogMCB9LFxuICAgICAgICBzaXplOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogeyBsZWZ0OiAwLCB0b3A6IDAgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgfSxcbiAgICBdKTtcbiAgICBleHBlY3QoXG4gICAgICB2aWV3WydzY2FsZSddPy5nZXRDb250cm9sKCkucXVlcnlTZWxlY3RvckFsbCgnLnNjYWxlLXBvaW50JykubGVuZ3RoXG4gICAgKS50b0JlKDIpO1xuICB9KTtcbiAgdGVzdCgnVGhlIGxlbmd0aCBvZiB0aGUgc2NhbGUgcG9pbnRzIGFycmF5IG11c3QgYmUgMycsICgpID0+IHtcbiAgICB2aWV3LmFkZFNjYWxlUG9pbnRzKFtcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICAgIHNpemU6IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9LFxuICAgICAgICB2YWx1ZTogMCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiB7IGxlZnQ6IDAsIHRvcDogMCB9LFxuICAgICAgICBzaXplOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogeyBsZWZ0OiAwLCB0b3A6IDAgfSxcbiAgICAgICAgc2l6ZTogeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgfSxcbiAgICBdKTtcbiAgICBleHBlY3QoXG4gICAgICB2aWV3WydzY2FsZSddPy5nZXRDb250cm9sKCkucXVlcnlTZWxlY3RvckFsbCgnLnNjYWxlLXBvaW50JykubGVuZ3RoXG4gICAgKS50b0JlKDMpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnR2V0IHRyYWNrIGNsaWNrIHBvc2l0aW9uJywgKCkgPT4ge1xuICB0ZXN0KCdGdW5jdGlvbiBzaG91bGQgYmUgcmV0dXJuIHRydWUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHZpZXcuZ2V0VHJhY2tDbGlja1Bvc2l0aW9uKCkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdHZXQgc2NhbGUgY2xpY2sgcG9zaXRpb24nLCAoKSA9PiB7XG4gIHRlc3QoJ0Z1bmN0aW9uIHNob3VsZCBiZSByZXR1cm4gdHJ1ZScsICgpID0+IHtcbiAgICBleHBlY3Qodmlldy5nZXRTY2FsZUNsaWNrUG9zaXRpb24oKSkudG9CZSh0cnVlKTtcbiAgfSk7XG4gIHRlc3QoJ0Z1bmN0aW9uIHNob3VsZCBiZSByZXR1cm4ge2xlZnQ6IDAsIHRvcDogMH0nLCAoKSA9PiB7XG4gICAgdmlldy5kaXNhYmxlU2NhbGUoKTtcbiAgICBleHBlY3Qodmlldy5nZXRTY2FsZUNsaWNrUG9zaXRpb24oKS5sZWZ0KS50b0JlKDApO1xuICAgIGV4cGVjdCh2aWV3LmdldFNjYWxlQ2xpY2tQb3NpdGlvbigpLnRvcCkudG9CZSgwKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBtYXJnaW5zJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB2aWV3WydzbGlkZXInXS5nZXRSZWN0ID0gamVzdC5mbigoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogMTIwLFxuICAgICAgICBoZWlnaHQ6IDEyMCxcbiAgICAgICAgdG9wOiAyNSxcbiAgICAgICAgbGVmdDogNDksXG4gICAgICAgIGJvdHRvbTogNjAsXG4gICAgICAgIHJpZ2h0OiA1LFxuICAgICAgICB4OiAzNSxcbiAgICAgICAgeTogNDgsXG4gICAgICAgIHRvSlNPTjogKCkgPT4gbnVsbCxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBpZiAodmlld1snc2NhbGUnXSAhPT0gbnVsbCkge1xuICAgICAgdmlld1snc2NhbGUnXS5nZXRSZWN0ID0gamVzdC5mbigoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IDEyMCxcbiAgICAgICAgICBoZWlnaHQ6IDEyMCxcbiAgICAgICAgICB0b3A6IDExLFxuICAgICAgICAgIGxlZnQ6IDQ5LFxuICAgICAgICAgIGJvdHRvbTogODcsXG4gICAgICAgICAgcmlnaHQ6IDQ1LFxuICAgICAgICAgIHg6IDM1LFxuICAgICAgICAgIHk6IDQ4LFxuICAgICAgICAgIHRvSlNPTjogKCkgPT4gbnVsbCxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh2aWV3Wydwb3BVcE9uZSddICE9PSBudWxsKSB7XG4gICAgICB2aWV3Wydwb3BVcE9uZSddLmdldFJlY3QgPSBqZXN0LmZuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogMTIwLFxuICAgICAgICAgIGhlaWdodDogMTIwLFxuICAgICAgICAgIHRvcDogMTMsXG4gICAgICAgICAgbGVmdDogMjEsXG4gICAgICAgICAgYm90dG9tOiA4NyxcbiAgICAgICAgICByaWdodDogNSxcbiAgICAgICAgICB4OiAzNSxcbiAgICAgICAgICB5OiA0OCxcbiAgICAgICAgICB0b0pTT046ICgpID0+IG51bGwsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHRlc3QoJ1NsaWRlciBtYXJnaW4tYm90dG9tIHNob3VsZCBiZSAyNycsICgpID0+IHtcbiAgICB2aWV3WydzbGlkZXInXS5nZXRPcmllbnRhdGlvbiA9IGplc3QuZm4oKCkgPT4gJ2hvcml6b250YWwnKTtcbiAgICBleHBlY3Qodmlld1snZ2V0TWFyZ2lucyddKCkuYm90dG9tKS50b0JlKDI3KTtcbiAgfSk7XG4gIHRlc3QoJ1NsaWRlciBtYXJnaW4tYm90dG9tIHNob3VsZCBiZSAwJywgKCkgPT4ge1xuICAgIHZpZXdbJ3NsaWRlciddLmdldE9yaWVudGF0aW9uID0gamVzdC5mbigoKSA9PiAnaG9yaXpvbnRhbCcpO1xuICAgIHZpZXcuZGlzYWJsZVNjYWxlKCk7XG4gICAgZXhwZWN0KHZpZXdbJ2dldE1hcmdpbnMnXSgpLmJvdHRvbSkudG9CZSgwKTtcbiAgfSk7XG4gIHRlc3QoJ1NsaWRlciBtYXJnaW4tdG9wIHNob3VsZCBiZSAxMicsICgpID0+IHtcbiAgICB2aWV3WydzbGlkZXInXS5nZXRPcmllbnRhdGlvbiA9IGplc3QuZm4oKCkgPT4gJ2hvcml6b250YWwnKTtcbiAgICBleHBlY3Qodmlld1snZ2V0TWFyZ2lucyddKCkudG9wKS50b0JlKDEyKTtcbiAgfSk7XG4gIHRlc3QoJ1NsaWRlciBtYXJnaW4tdG9wIHNob3VsZCBiZSAwJywgKCkgPT4ge1xuICAgIHZpZXdbJ3NsaWRlciddLmdldE9yaWVudGF0aW9uID0gamVzdC5mbigoKSA9PiAnaG9yaXpvbnRhbCcpO1xuICAgIHZpZXcuZGlzYWJsZVBvcFVwcygpO1xuICAgIGV4cGVjdCh2aWV3WydnZXRNYXJnaW5zJ10oKS50b3ApLnRvQmUoMCk7XG4gIH0pO1xuICB0ZXN0KCdTbGlkZXIgbWFyZ2luLWxlZnQgc2hvdWxkIGJlIDI4JywgKCkgPT4ge1xuICAgIHZpZXdbJ3NsaWRlciddLmdldE9yaWVudGF0aW9uID0gamVzdC5mbigoKSA9PiAndmVydGljYWwnKTtcbiAgICBleHBlY3Qodmlld1snZ2V0TWFyZ2lucyddKCkubGVmdCkudG9CZSgyOCk7XG4gIH0pO1xuICB0ZXN0KCdTbGlkZXIgbWFyZ2luLWxlZnQgc2hvdWxkIGJlIDAnLCAoKSA9PiB7XG4gICAgdmlld1snc2xpZGVyJ10uZ2V0T3JpZW50YXRpb24gPSBqZXN0LmZuKCgpID0+ICd2ZXJ0aWNhbCcpO1xuICAgIHZpZXcuZGlzYWJsZVBvcFVwcygpO1xuICAgIGV4cGVjdCh2aWV3WydnZXRNYXJnaW5zJ10oKS5sZWZ0KS50b0JlKDApO1xuICB9KTtcbiAgdGVzdCgnU2xpZGVyIG1hcmdpbi1yaWdodCBzaG91bGQgYmUgNDAnLCAoKSA9PiB7XG4gICAgdmlld1snc2xpZGVyJ10uZ2V0T3JpZW50YXRpb24gPSBqZXN0LmZuKCgpID0+ICd2ZXJ0aWNhbCcpO1xuICAgIGV4cGVjdCh2aWV3WydnZXRNYXJnaW5zJ10oKS5yaWdodCkudG9CZSg0MCk7XG4gIH0pO1xuICB0ZXN0KCdTbGlkZXIgbWFyZ2luLXJpZ2h0IHNob3VsZCBiZSAwJywgKCkgPT4ge1xuICAgIHZpZXdbJ3NsaWRlciddLmdldE9yaWVudGF0aW9uID0gamVzdC5mbigoKSA9PiAndmVydGljYWwnKTtcbiAgICB2aWV3LmRpc2FibGVTY2FsZSgpO1xuICAgIGV4cGVjdCh2aWV3WydnZXRNYXJnaW5zJ10oKS5yaWdodCkudG9CZSgwKTtcbiAgfSk7XG59KTtcbiIsIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG5cbmltcG9ydCBTbGlkZXIgZnJvbSAnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvc2xpZGVyL3NsaWRlcic7XG5cbmxldCBzbGlkZXI6IFNsaWRlcjtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIHNsaWRlciA9IG5ldyBTbGlkZXIoKTtcbn0pO1xuXG5kZXNjcmliZSgnQXBwZW5kJywgKCkgPT4ge1xuICB0ZXN0KCdTbGlkZXIgc2hvdWxkIGNvbnRhaW4gZWxlbWVudCB3aXRoIGNsYXNzIG5ldy1lbGVtJywgKCkgPT4ge1xuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ25ldy1lbGVtJyk7XG4gICAgc2xpZGVyLmFwcGVuZChlbGVtKTtcbiAgICBleHBlY3Qoc2xpZGVyLmdldENvbnRyb2woKS5xdWVyeVNlbGVjdG9yKCcubmV3LWVsZW0nKSkubm90LnRvQmVOdWxsKCk7XG4gIH0pO1xuICB0ZXN0KCdTbGlkZXIgc2hvdWxkIGNvbnRhaW4gZWxlbWVudCB3aXRoIGNsYXNzIHNlY29uZC1lbGVtJywgKCkgPT4ge1xuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ3NlY29uZC1lbGVtJyk7XG4gICAgc2xpZGVyLmFwcGVuZChlbGVtKTtcbiAgICBleHBlY3Qoc2xpZGVyLmdldENvbnRyb2woKS5xdWVyeVNlbGVjdG9yKCcuc2Vjb25kLWVsZW0nKSkubm90LnRvQmVOdWxsKCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdTZXQgbWFyZ2lucycsICgpID0+IHtcbiAgdGVzdCgnU2xpZGVyIG1hcmdpbnMgc2hvdWxkIGJlIHtsZWZ0OiAyNSwgdG9wOiA3NywgcmlnaHQ6IDEzLCBib3R0b206IDJ9JywgKCkgPT4ge1xuICAgIHNsaWRlci5zZXRNYXJnaW5zKHtcbiAgICAgIGxlZnQ6IDI1LFxuICAgICAgdG9wOiA3NyxcbiAgICAgIHJpZ2h0OiAxMyxcbiAgICAgIGJvdHRvbTogMixcbiAgICB9KTtcblxuICAgIGV4cGVjdChzbGlkZXJbJ2NvbnRyb2wnXS5zdHlsZS5tYXJnaW5MZWZ0KS50b0JlKCcyNXB4Jyk7XG4gICAgZXhwZWN0KHNsaWRlclsnY29udHJvbCddLnN0eWxlLm1hcmdpblRvcCkudG9CZSgnNzdweCcpO1xuICAgIGV4cGVjdChzbGlkZXJbJ2NvbnRyb2wnXS5zdHlsZS5tYXJnaW5SaWdodCkudG9CZSgnMTNweCcpO1xuICAgIGV4cGVjdChzbGlkZXJbJ2NvbnRyb2wnXS5zdHlsZS5tYXJnaW5Cb3R0b20pLnRvQmUoJzJweCcpO1xuICB9KTtcbiAgdGVzdCgnU2xpZGVyIG1hcmdpbnMgc2hvdWxkIGJlIHtsZWZ0OiA4NCwgdG9wOiA5NywgcmlnaHQ6IDY3LCBib3R0b206IDczfScsICgpID0+IHtcbiAgICBzbGlkZXIuc2V0TWFyZ2lucyh7XG4gICAgICBsZWZ0OiA4NCxcbiAgICAgIHRvcDogOTcsXG4gICAgICByaWdodDogNjcsXG4gICAgICBib3R0b206IDczLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHNsaWRlclsnY29udHJvbCddLnN0eWxlLm1hcmdpbkxlZnQpLnRvQmUoJzg0cHgnKTtcbiAgICBleHBlY3Qoc2xpZGVyWydjb250cm9sJ10uc3R5bGUubWFyZ2luVG9wKS50b0JlKCc5N3B4Jyk7XG4gICAgZXhwZWN0KHNsaWRlclsnY29udHJvbCddLnN0eWxlLm1hcmdpblJpZ2h0KS50b0JlKCc2N3B4Jyk7XG4gICAgZXhwZWN0KHNsaWRlclsnY29udHJvbCddLnN0eWxlLm1hcmdpbkJvdHRvbSkudG9CZSgnNzNweCcpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnUmVzZXQgbWFyZ2lucycsICgpID0+IHtcbiAgdGVzdCgnU2xpZGVyIG1hcmdpbnMgc2hvdWxkIGJlIHtsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDB9JywgKCkgPT4ge1xuICAgIHNsaWRlci5zZXRNYXJnaW5zKHtcbiAgICAgIGxlZnQ6IDI1LFxuICAgICAgdG9wOiA3NyxcbiAgICAgIHJpZ2h0OiAxMyxcbiAgICAgIGJvdHRvbTogMixcbiAgICB9KTtcblxuICAgIHNsaWRlci5yZXNldE1hcmdpbnMoKTtcblxuICAgIGV4cGVjdChzbGlkZXJbJ2NvbnRyb2wnXS5zdHlsZS5tYXJnaW5MZWZ0KS50b0JlKCcwcHgnKTtcbiAgICBleHBlY3Qoc2xpZGVyWydjb250cm9sJ10uc3R5bGUubWFyZ2luVG9wKS50b0JlKCcwcHgnKTtcbiAgICBleHBlY3Qoc2xpZGVyWydjb250cm9sJ10uc3R5bGUubWFyZ2luUmlnaHQpLnRvQmUoJzBweCcpO1xuICAgIGV4cGVjdChzbGlkZXJbJ2NvbnRyb2wnXS5zdHlsZS5tYXJnaW5Cb3R0b20pLnRvQmUoJzBweCcpO1xuICB9KTtcbiAgdGVzdCgnU2xpZGVyIG1hcmdpbnMgc2hvdWxkIGJlIHtsZWZ0OiAwcHgsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMH0nLCAoKSA9PiB7XG4gICAgc2xpZGVyLnNldE1hcmdpbnMoe1xuICAgICAgbGVmdDogODQsXG4gICAgICB0b3A6IDk3LFxuICAgICAgcmlnaHQ6IDY3LFxuICAgICAgYm90dG9tOiA3MyxcbiAgICB9KTtcblxuICAgIHNsaWRlci5yZXNldE1hcmdpbnMoKTtcblxuICAgIGV4cGVjdChzbGlkZXJbJ2NvbnRyb2wnXS5zdHlsZS5tYXJnaW5MZWZ0KS50b0JlKCcwcHgnKTtcbiAgICBleHBlY3Qoc2xpZGVyWydjb250cm9sJ10uc3R5bGUubWFyZ2luVG9wKS50b0JlKCcwcHgnKTtcbiAgICBleHBlY3Qoc2xpZGVyWydjb250cm9sJ10uc3R5bGUubWFyZ2luUmlnaHQpLnRvQmUoJzBweCcpO1xuICAgIGV4cGVjdChzbGlkZXJbJ2NvbnRyb2wnXS5zdHlsZS5tYXJnaW5Cb3R0b20pLnRvQmUoJzBweCcpO1xuICB9KTtcbn0pO1xuIiwiLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG5cbmltcG9ydCBTdWJqZWN0IGZyb20gJy4uL3BsdWdpbnMvc2ltcGxlLXNsaWRlci9zdWJqZWN0L3N1YmplY3QnO1xuXG5sZXQgc3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBzdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbn0pO1xuXG5kZXNjcmliZSgnUmVnaXN0ZXInLCAoKSA9PiB7XG4gIHRlc3QoJ09ic2VydmVycyBtdXN0IGJlIGFkZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG5ld09ic2VydmVyT25lID0ge1xuICAgICAgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICAvKiBzb21lIG9wZXJhdGlvbnMgKi9cbiAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdCBuZXdPYnNlcnZlclR3byA9IHtcbiAgICAgIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgLyogc29tZSBvcGVyYXRpb25zICovXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgbmV3T2JzZXJ2ZXJUaHJlZSA9IHtcbiAgICAgIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgLyogc29tZSBvcGVyYXRpb25zICovXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBzdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYk1vdmUnLCBuZXdPYnNlcnZlck9uZSk7XG4gICAgZXhwZWN0KHN1YmplY3RbJ29ic2VydmVycyddLnRodW1iTW92ZS5sZW5ndGgpLnRvQmUoMSk7XG5cbiAgICBzdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYk1vdmUnLCBuZXdPYnNlcnZlclR3byk7XG4gICAgZXhwZWN0KHN1YmplY3RbJ29ic2VydmVycyddLnRodW1iTW92ZS5sZW5ndGgpLnRvQmUoMik7XG5cbiAgICBzdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYk1vdmUnLCBuZXdPYnNlcnZlclRocmVlKTtcbiAgICBleHBlY3Qoc3ViamVjdFsnb2JzZXJ2ZXJzJ10udGh1bWJNb3ZlLmxlbmd0aCkudG9CZSgzKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1JlbW92ZScsICgpID0+IHtcbiAgdGVzdCgnT2JzZXJ2ZXJzIG11c3QgYmUgcmVtb3ZlZCcsICgpID0+IHtcbiAgICBjb25zdCBuZXdPYnNlcnZlck9uZSA9IHtcbiAgICAgIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgLyogc29tZSBvcGVyYXRpb25zICovXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgbmV3T2JzZXJ2ZXJUd28gPSB7XG4gICAgICB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIC8qIHNvbWUgb3BlcmF0aW9ucyAqL1xuICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IG5ld09ic2VydmVyVGhyZWUgPSB7XG4gICAgICB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIC8qIHNvbWUgb3BlcmF0aW9ucyAqL1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgc3ViamVjdC5yZWdpc3RlcigndGh1bWJNb3ZlJywgbmV3T2JzZXJ2ZXJPbmUpO1xuICAgIHN1YmplY3QucmVnaXN0ZXIoJ3RodW1iTW92ZScsIG5ld09ic2VydmVyVHdvKTtcbiAgICBzdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYk1vdmUnLCBuZXdPYnNlcnZlclRocmVlKTtcblxuICAgIGV4cGVjdChzdWJqZWN0WydvYnNlcnZlcnMnXS50aHVtYk1vdmUubGVuZ3RoKS50b0JlKDMpO1xuXG4gICAgc3ViamVjdC51bnN1YnNjcmliZSgndGh1bWJNb3ZlJywgbmV3T2JzZXJ2ZXJPbmUpO1xuICAgIGV4cGVjdChzdWJqZWN0WydvYnNlcnZlcnMnXS50aHVtYk1vdmUubGVuZ3RoKS50b0JlKDIpO1xuXG4gICAgc3ViamVjdC51bnN1YnNjcmliZSgndGh1bWJNb3ZlJywgbmV3T2JzZXJ2ZXJUd28pO1xuICAgIGV4cGVjdChzdWJqZWN0WydvYnNlcnZlcnMnXS50aHVtYk1vdmUubGVuZ3RoKS50b0JlKDEpO1xuXG4gICAgc3ViamVjdC51bnN1YnNjcmliZSgndGh1bWJNb3ZlJywgbmV3T2JzZXJ2ZXJUaHJlZSk7XG4gICAgZXhwZWN0KHN1YmplY3RbJ29ic2VydmVycyddLnRodW1iTW92ZS5sZW5ndGgpLnRvQmUoMCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdOb3RpZnknLCAoKSA9PiB7XG4gIHRlc3QoJ09ic2VydmVycyBtdXN0IGJlIG5vdGlmaWVkJywgKCkgPT4ge1xuICAgIGxldCBudW1iZXJPZk5vdGlmaWVkT2JzZXJ2ZXJzID0gMDtcblxuICAgIGNvbnN0IG5ld09ic2VydmVyT25lID0ge1xuICAgICAgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICBudW1iZXJPZk5vdGlmaWVkT2JzZXJ2ZXJzICs9IDE7XG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgbmV3T2JzZXJ2ZXJUd28gPSB7XG4gICAgICB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIG51bWJlck9mTm90aWZpZWRPYnNlcnZlcnMgKz0gMTtcbiAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdCBuZXdPYnNlcnZlclRocmVlID0ge1xuICAgICAgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICBudW1iZXJPZk5vdGlmaWVkT2JzZXJ2ZXJzICs9IDE7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBzdWJqZWN0LnJlZ2lzdGVyKCd0aHVtYk1vdmUnLCBuZXdPYnNlcnZlck9uZSk7XG4gICAgc3ViamVjdC5ub3RpZnkoJ3RodW1iTW92ZScpO1xuICAgIGV4cGVjdChudW1iZXJPZk5vdGlmaWVkT2JzZXJ2ZXJzKS50b0JlKDEpO1xuXG4gICAgbnVtYmVyT2ZOb3RpZmllZE9ic2VydmVycyA9IDA7XG4gICAgc3ViamVjdC5yZWdpc3RlcigndGh1bWJNb3ZlJywgbmV3T2JzZXJ2ZXJUd28pO1xuICAgIHN1YmplY3Qubm90aWZ5KCd0aHVtYk1vdmUnKTtcbiAgICBleHBlY3QobnVtYmVyT2ZOb3RpZmllZE9ic2VydmVycykudG9CZSgyKTtcblxuICAgIG51bWJlck9mTm90aWZpZWRPYnNlcnZlcnMgPSAwO1xuICAgIHN1YmplY3QucmVnaXN0ZXIoJ3RodW1iTW92ZScsIG5ld09ic2VydmVyVGhyZWUpO1xuICAgIHN1YmplY3Qubm90aWZ5KCd0aHVtYk1vdmUnKTtcbiAgICBleHBlY3QobnVtYmVyT2ZOb3RpZmllZE9ic2VydmVycykudG9CZSgzKTtcblxuICAgIG51bWJlck9mTm90aWZpZWRPYnNlcnZlcnMgPSAwO1xuICAgIHN1YmplY3QudW5zdWJzY3JpYmUoJ3RodW1iTW92ZScsIG5ld09ic2VydmVyVGhyZWUpO1xuICAgIHN1YmplY3Qubm90aWZ5KCd0aHVtYk1vdmUnKTtcbiAgICBleHBlY3QobnVtYmVyT2ZOb3RpZmllZE9ic2VydmVycykudG9CZSgyKTtcblxuICAgIG51bWJlck9mTm90aWZpZWRPYnNlcnZlcnMgPSAwO1xuICAgIHN1YmplY3QucmVnaXN0ZXIoJ2NsaWNrVG9TY2FsZScsIG5ld09ic2VydmVyT25lKTtcbiAgICBzdWJqZWN0Lm5vdGlmeSgndGh1bWJNb3ZlJyk7XG4gICAgZXhwZWN0KG51bWJlck9mTm90aWZpZWRPYnNlcnZlcnMpLnRvQmUoMik7XG4gICAgbnVtYmVyT2ZOb3RpZmllZE9ic2VydmVycyA9IDA7XG4gICAgc3ViamVjdC5ub3RpZnkoJ2NsaWNrVG9TY2FsZScpO1xuICB9KTtcbn0pO1xuIiwiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuXG5pbXBvcnQgVGh1bWIgZnJvbSAnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdGh1bWIvdGh1bWInO1xuXG5sZXQgdGh1bWI6IFRodW1iO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgdGh1bWIgPSBuZXcgVGh1bWIoKTtcbn0pO1xuXG5kZXNjcmliZSgnU2V0IHotaW5kZXgnLCAoKSA9PiB7XG4gIHRlc3QoJ1RodW1iIHotaW5leCBzaG91bGQgYmUgNScsICgpID0+IHtcbiAgICB0aHVtYi5zZXRaSW5kZXgoNSk7XG4gICAgZXhwZWN0KHRodW1iLmdldENvbnRyb2woKS5zdHlsZS56SW5kZXgpLnRvQmUoJzUnKTtcbiAgfSk7XG4gIHRlc3QoJ1RodW1iIHotaW5leCBzaG91bGQgYmUgOCcsICgpID0+IHtcbiAgICB0aHVtYi5zZXRaSW5kZXgoOCk7XG4gICAgZXhwZWN0KHRodW1iLmdldENvbnRyb2woKS5zdHlsZS56SW5kZXgpLnRvQmUoJzgnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1Jlc2V0IHotaW5kZXgnLCAoKSA9PiB7XG4gIHRlc3QoJ1RodW1iIHotaW5leCBzaG91bGQgYmUgXCJcIicsICgpID0+IHtcbiAgICB0aHVtYi5zZXRaSW5kZXgoNCk7XG4gICAgdGh1bWIucmVzZXRaSW5kZXgoKTtcbiAgICBleHBlY3QodGh1bWIuZ2V0Q29udHJvbCgpLnN0eWxlLnpJbmRleCkudG9CZSgnJyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdNb3ZlIHRvJywgKCkgPT4ge1xuICB0ZXN0KCdUaHVtYiBsYXN0IHBvc2l0aW9uIHNob3VsZCBiZSB7bGVmdDogNDAsIHRvcDogMTF9JywgKCkgPT4ge1xuICAgIHRodW1iLm1vdmVUbyh7IGxlZnQ6IDQwLCB0b3A6IDExIH0pO1xuICAgIGV4cGVjdCh0aHVtYi5nZXRQb3NpdGlvbigpLmxlZnQpLnRvQmUoNDApO1xuICAgIGV4cGVjdCh0aHVtYi5nZXRQb3NpdGlvbigpLnRvcCkudG9CZSgxMSk7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYiBlbGVtZW50IGxlZnQgc2hvdWxkIGJlIDgwcHgnLCAoKSA9PiB7XG4gICAgdGh1bWIubW92ZVRvKHsgbGVmdDogODAsIHRvcDogMTEgfSk7XG4gICAgZXhwZWN0KHRodW1iLmdldENvbnRyb2woKS5zdHlsZS5sZWZ0KS50b0JlKCc4MHB4Jyk7XG4gIH0pO1xuICB0ZXN0KCdUaHVtYiBlbGVtZW50IHRvcCBzaG91bGQgYmUgNTRweCcsICgpID0+IHtcbiAgICB0aHVtYi5tb3ZlVG8oeyBsZWZ0OiA4MCwgdG9wOiA1NCB9KTtcbiAgICBleHBlY3QodGh1bWIuZ2V0Q29udHJvbCgpLnN0eWxlLnRvcCkudG9CZSgnNTRweCcpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVGh1bWIgZHJhZ3N0YXJ0IGV2ZW50JywgKCkgPT4ge1xuICB0ZXN0KCdFdmVudCBzaG91bGQgcmV0dXJuIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuRXZlbnQoJ2RyYWdzdGFydCcpO1xuICAgIGV4cGVjdCh0aHVtYi5nZXRDb250cm9sKCkuZGlzcGF0Y2hFdmVudChldnQpKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1NldCB0aHVtYiBzaGlmdCcsICgpID0+IHtcbiAgdGVzdCgnVGh1bWIgc2hpZnQgc2hvdWxkIGJlIHtzaGlmdFg6IDIsIHNoaWZ0WTogNX0nLCAoKSA9PiB7XG4gICAgdGh1bWJbJ3NldFRodW1iU2hpZnQnXSh7IGxlZnQ6IDg1LCB0b3A6IDQ3IH0sIHsgbGVmdDogODMsIHRvcDogNDIgfSk7XG4gICAgZXhwZWN0KHRodW1iWydzaGlmdCddLnNoaWZ0WCkudG9CZSgyKTtcbiAgICBleHBlY3QodGh1bWJbJ3NoaWZ0J10uc2hpZnRZKS50b0JlKDUpO1xuICB9KTtcbiAgdGVzdCgnVGh1bWIgc2hpZnQgc2hvdWxkIGJlIHtzaGlmdFg6IDUsIHNoaWZ0WTogM30nLCAoKSA9PiB7XG4gICAgdGh1bWJbJ3NldFRodW1iU2hpZnQnXSh7IGxlZnQ6IDEwMCwgdG9wOiA4MCB9LCB7IGxlZnQ6IDk1LCB0b3A6IDc3IH0pO1xuICAgIGV4cGVjdCh0aHVtYlsnc2hpZnQnXS5zaGlmdFgpLnRvQmUoNSk7XG4gICAgZXhwZWN0KHRodW1iWydzaGlmdCddLnNoaWZ0WSkudG9CZSgzKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0luY3JlYXNlIHotaW5kZXgnLCAoKSA9PiB7XG4gIHRlc3QoJ3otaW5kZXggc2hvdWxkIGJlIDMnLCAoKSA9PiB7XG4gICAgdGh1bWIuZ2V0Q29udHJvbCgpLnN0eWxlLnpJbmRleCA9ICcyJztcbiAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkV2ZW50KCdwb2ludGVyZG93bicpO1xuICAgIHRodW1iLmdldENvbnRyb2woKS5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgZXhwZWN0KHRodW1iLmdldENvbnRyb2woKS5zdHlsZS56SW5kZXgpLnRvQmUoJzMnKTtcbiAgfSk7XG4gIHRlc3QoJ3otaW5kZXggc2hvdWxkIGJlIDEwJywgKCkgPT4ge1xuICAgIHRodW1iLmdldENvbnRyb2woKS5zdHlsZS56SW5kZXggPSAnOSc7XG4gICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5FdmVudCgncG9pbnRlcmRvd24nKTtcbiAgICB0aHVtYi5nZXRDb250cm9sKCkuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIGV4cGVjdCh0aHVtYi5nZXRDb250cm9sKCkuc3R5bGUuekluZGV4KS50b0JlKCcxMCcpO1xuICB9KTtcbiAgdGVzdCgnei1pbmRleCBzaG91bGQgYmUgMScsICgpID0+IHtcbiAgICB0aHVtYi5nZXRDb250cm9sKCkuc3R5bGUuekluZGV4ID0gJyc7XG4gICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5FdmVudCgncG9pbnRlcmRvd24nKTtcbiAgICB0aHVtYi5nZXRDb250cm9sKCkuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIGV4cGVjdCh0aHVtYi5nZXRDb250cm9sKCkuc3R5bGUuekluZGV4KS50b0JlKCcxJyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdEcmFnJywgKCkgPT4ge1xuICB0ZXN0KCdTZXRQb3NpdGlvbiBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IHNweU9uPGFueT4odGh1bWIsICdzZXRQb3NpdGlvbicpO1xuICAgIGNvbnN0IG1vdmVFdnQgPSBuZXcgd2luZG93Lk1vdXNlRXZlbnQoJ3BvaW50ZXJtb3ZlJykgYXMgUG9pbnRlckV2ZW50O1xuICAgIHRodW1iWydkcmFnJ10obW92ZUV2dCk7XG4gICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbiAgdGVzdCgnTm90aWZ5IG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3B5ID0gc3B5T248YW55Pih0aHVtYi5zdWJqZWN0LCAnbm90aWZ5Jyk7XG4gICAgY29uc3QgbW92ZUV2dCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCgncG9pbnRlcm1vdmUnKSBhcyBQb2ludGVyRXZlbnQ7XG4gICAgdGh1bWJbJ2RyYWcnXShtb3ZlRXZ0KTtcbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdTZXQgcG9zaXRpb24nLCAoKSA9PiB7XG4gIHRlc3QoJ1RodW1iIHBvc2l0aW9uIHNob3VsZCBiZSB7bGVmdDogNDAsIHRvcDogMTd9JywgKCkgPT4ge1xuICAgIHRodW1iWydzaGlmdCddID0geyBzaGlmdFg6IDUsIHNoaWZ0WTogMyB9O1xuICAgIHRodW1iWydzZXRQb3NpdGlvbiddKHsgbGVmdDogNDUsIHRvcDogMjAgfSk7XG4gICAgZXhwZWN0KHRodW1iLmdldFBvc2l0aW9uKCkubGVmdCkudG9CZSg0MCk7XG4gICAgZXhwZWN0KHRodW1iLmdldFBvc2l0aW9uKCkudG9wKS50b0JlKDE3KTtcbiAgfSk7XG4gIHRlc3QoJ1RodW1iIHBvc2l0aW9uIHNob3VsZCBiZSB7bGVmdDogNDUsIHRvcDogMjB9JywgKCkgPT4ge1xuICAgIHRodW1iWydzaGlmdCddID0geyBzaGlmdFg6IDgsIHNoaWZ0WTogOSB9O1xuICAgIHRodW1iWydzZXRQb3NpdGlvbiddKHsgbGVmdDogMTQ2LCB0b3A6IDE0NiB9KTtcbiAgICBleHBlY3QodGh1bWIuZ2V0UG9zaXRpb24oKS5sZWZ0KS50b0JlKDEzOCk7XG4gICAgZXhwZWN0KHRodW1iLmdldFBvc2l0aW9uKCkudG9wKS50b0JlKDEzNyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdFbmFibGUgc2VsZWN0aW9uJywgKCkgPT4ge1xuICB0ZXN0KCdEb2N1bWVudCBvbnNlbGVjdHN0YXJ0IGV2ZW50IHNob3VsZCBiZSBudWxsJywgKCkgPT4ge1xuICAgIHRodW1iWydlbmREcmFnJ10oKTtcbiAgICBleHBlY3QoZG9jdW1lbnQub25zZWxlY3RzdGFydCkudG9CZShudWxsKTtcbiAgfSk7XG4gIHRlc3QoJ0RvY3VtZW50IHBvaW50ZXJkb3duIGV2ZW50IHNob3VsZCBiZSBudWxsJywgKCkgPT4ge1xuICAgIHRodW1iWydlbmREcmFnJ10oKTtcbiAgICBleHBlY3QoZG9jdW1lbnQub25wb2ludGVyZG93bikudG9CZShudWxsKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0Rpc2FibGUgc2VsZWN0aW9uJywgKCkgPT4ge1xuICB0ZXN0KCdEb2N1bWVudCBwb2ludGVyZG93biBldmVudCBub3Qgc2hvdWxkIGJlIG51bGwnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5FdmVudCgncG9pbnRlcmRvd24nKTtcbiAgICB0aHVtYi5nZXRDb250cm9sKCkuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIGV4cGVjdChkb2N1bWVudC5vbnNlbGVjdHN0YXJ0KS5ub3QudG9CZShudWxsKTtcbiAgfSk7XG4gIHRlc3QoJ0RvY3VtZW50IHNlbGVjdHN0YXJ0IGV2ZW50IHNob3VsZCByZXR1cm4gZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5FdmVudCgncG9pbnRlcmRvd24nKTtcbiAgICB0aHVtYi5nZXRDb250cm9sKCkuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gICAgaWYgKGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGRvY0V2dCA9IG5ldyB3aW5kb3cuRXZlbnQoJ3NlbGVjdHN0YXJ0Jyk7XG4gICAgICBleHBlY3QoZG9jdW1lbnQub25zZWxlY3RzdGFydChkb2NFdnQpKS50b0JlKGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuICB0ZXN0KCdEb2N1bWVudCBwb2ludGVyZG93biBldmVudCBzaG91bGQgcmV0dXJuIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuRXZlbnQoJ3BvaW50ZXJkb3duJyk7XG4gICAgdGh1bWIuZ2V0Q29udHJvbCgpLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblxuICAgIGlmIChkb2N1bWVudC5vbnBvaW50ZXJkb3duICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBkb2NFdnQgPSBuZXcgd2luZG93LkV2ZW50KCdwb2ludGVyZG93bicpIGFzIFBvaW50ZXJFdmVudDtcbiAgICAgIGV4cGVjdChkb2N1bWVudC5vbnBvaW50ZXJkb3duKGRvY0V2dCkpLnRvQmUoZmFsc2UpO1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLWRhbmdsZSAqL1xuXG5pbXBvcnQgVHJhY2sgZnJvbSAnLi4vcGx1Z2lucy9zaW1wbGUtc2xpZGVyL3ZpZXcvdHJhY2svdHJhY2snO1xuXG5sZXQgdHJhY2s6IFRyYWNrO1xuXG5jb25zdCBpbml0RXZ0ID0gKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICBldnQuaW5pdE1vdXNlRXZlbnQoXG4gICAgJ2NsaWNrJyxcbiAgICB0cnVlLFxuICAgIHRydWUsXG4gICAgd2luZG93LFxuICAgIDAsXG4gICAgNTAsXG4gICAgODAsXG4gICAgNTAsXG4gICAgODAsXG4gICAgZmFsc2UsXG4gICAgZmFsc2UsXG4gICAgZmFsc2UsXG4gICAgZmFsc2UsXG4gICAgMCxcbiAgICBudWxsXG4gICk7XG59O1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgdHJhY2sgPSBuZXcgVHJhY2soKTtcbn0pO1xuXG5kZXNjcmliZSgnQ2xpY2sgb24gdHJhY2snLCAoKSA9PiB7XG4gIHRlc3QoJ1NldFBvc2l0aW9uIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIG9uY2UnLCAoKSA9PiB7XG4gICAgY29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnQnKTtcbiAgICBjb25zdCBzcHkgPSBzcHlPbjxhbnk+KHRyYWNrLCAnc2V0UG9zaXRpb24nKTtcblxuICAgIGluaXRFdnQoZXZ0KTtcbiAgICB0cmFja1snY29udHJvbCddLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblxuICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgfSk7XG4gIHRlc3QoJ05vdGlmeSBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgY29uc3Qgc3B5ID0gc3B5T248YW55Pih0cmFjay5zdWJqZWN0LCAnbm90aWZ5Jyk7XG5cbiAgICBpbml0RXZ0KGV2dCk7XG4gICAgdHJhY2tbJ2NvbnRyb2wnXS5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cbiAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuICB0ZXN0KCdQb3NpdGlvbiBzaG91bGQgYmUge2xlZnQ6IDUwLCB0b3A6IDgwfScsICgpID0+IHtcbiAgICBjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgIGluaXRFdnQoZXZ0KTtcbiAgICB0cmFja1snY29udHJvbCddLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblxuICAgIGV4cGVjdCh0cmFjay5nZXRQb3NpdGlvbigpLmxlZnQpLnRvQmUoNTApO1xuICAgIGV4cGVjdCh0cmFjay5nZXRQb3NpdGlvbigpLnRvcCkudG9CZSg4MCk7XG4gIH0pO1xufSk7XG4iLCIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgY29tbWEtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLW5hbWVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBvYmplY3Qtc2hvcnRoYW5kICovXG4vKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIGFycm93LWJvZHktc3R5bGUgKi9cblxuaW1wb3J0IFVJQ29udHJvbCBmcm9tICcuLi9wbHVnaW5zL3NpbXBsZS1zbGlkZXIvdmlldy91aS1jb250cm9sL3VpLWNvbnRyb2wnO1xuXG5sZXQgY29udHJvbDogVUlDb250cm9sO1xuXG4vLyDQoNCw0YHRiNC40YDQtdC90LjQtSBIVE1MINGN0LvQtdC80LXQvdGC0L7QsiDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C80Lgg0LPQtdGC0YLQtdGA0LDQvNC4INC00LvRjyDRgtC10YHRgtC40YDQvtCy0LDQvdC40Y9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgb2Zmc2V0TGVmdDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcykubWFyZ2luTGVmdCkgfHwgMDtcbiAgICB9LFxuICB9LFxuICBvZmZzZXRUb3A6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLm1hcmdpblRvcCkgfHwgMDtcbiAgICB9LFxuICB9LFxuICBvZmZzZXRIZWlnaHQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLmhlaWdodCkgfHwgMDtcbiAgICB9LFxuICB9LFxuICBvZmZzZXRXaWR0aDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcykud2lkdGgpIHx8IDA7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgY29udHJvbCA9IG5ldyBVSUNvbnRyb2woJ3NvbWUtZWxlbWVudCcpO1xufSk7XG5cbmRlc2NyaWJlKCdDb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgdGVzdCgnVUktQ29udHJvbCBzaG91bGQgaGF2ZSBhIGNsYXNzIHNvbWUtZWxlbWVudCcsICgpID0+IHtcbiAgICBleHBlY3QoY29udHJvbFsnY29udHJvbCddLmNsYXNzTGlzdC5jb250YWlucygnc29tZS1lbGVtZW50JykpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdVSS1Db250cm9sIHNob3VsZCBoYXZlIGEgY2xhc3Mgc29tZS1lbGVtZW50X2hvcml6b250YWwnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgY29udHJvbFsnY29udHJvbCddLmNsYXNzTGlzdC5jb250YWlucygnc29tZS1lbGVtZW50X2hvcml6b250YWwnKSxcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdVSS1Db250cm9sIHNob3VsZCBoYXZlIGEgY2xhc3Mgc29tZS1lbGVtZW50X3ZlcnRpY2FsJywgKCkgPT4ge1xuICAgIGNvbnRyb2wgPSBuZXcgVUlDb250cm9sKCdzb21lLWVsZW1lbnQnLCAndmVydGljYWwnKTtcbiAgICBleHBlY3QoY29udHJvbFsnY29udHJvbCddLmNsYXNzTGlzdC5jb250YWlucygnc29tZS1lbGVtZW50X3ZlcnRpY2FsJykpLnRvQmUoXG4gICAgICB0cnVlLFxuICAgICk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdTZXQgcG9zaXRpb24gYW5kIGdldCBwb3NpdGlvbicsICgpID0+IHtcbiAgdGVzdCgnVUktQ29udHJvbCBwb3NpdGlvbiBzaG91bGQgYmUge2xlZnQ6IDgwLCB0b3A6IDIwfScsICgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50UGFycmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnRQYXJyZW50LnN0eWxlLmxlZnQgPSAnMTAwcHgnO1xuICAgIGVsZW1lbnRQYXJyZW50LnN0eWxlLnRvcCA9ICc0MHB4JztcbiAgICBlbGVtZW50UGFycmVudC5hcHBlbmQoY29udHJvbC5nZXRDb250cm9sKCkpO1xuICAgIGNvbnRyb2xbJ3NldFBvc2l0aW9uJ10oeyBsZWZ0OiA4MCwgdG9wOiAyMCB9KTtcbiAgICBleHBlY3QoY29udHJvbC5nZXRQb3NpdGlvbigpLmxlZnQpLnRvQmUoODApO1xuICAgIGV4cGVjdChjb250cm9sLmdldFBvc2l0aW9uKCkudG9wKS50b0JlKDIwKTtcbiAgfSk7XG4gIHRlc3QoJ1VJLUNvbnRyb2wgcG9zaXRpb24gc2hvdWxkIGJlIHtsZWZ0OiAyMCwgdG9wOiAxMH0nLCAoKSA9PiB7XG4gICAgY29udHJvbFsnc2V0UG9zaXRpb24nXSh7IGxlZnQ6IDIwLCB0b3A6IDEwIH0pO1xuICAgIGV4cGVjdChjb250cm9sLmdldFBvc2l0aW9uKCkubGVmdCkudG9CZSgyMCk7XG4gICAgZXhwZWN0KGNvbnRyb2wuZ2V0UG9zaXRpb24oKS50b3ApLnRvQmUoMTApO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnR2V0IGVsZW1lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ1VJLUNvbnRyb2wgc2hvdWxkIGJlIGV4aXN0JywgKCkgPT4ge1xuICAgIGV4cGVjdChjb250cm9sLmdldENvbnRyb2woKSkubm90LnRvQmVOdWxsKCk7XG4gIH0pO1xuICB0ZXN0KCdVSS1Db250cm9sIHNob3VsZCBiZSBleGlzdCcsICgpID0+IHtcbiAgICBjb250cm9sID0gbmV3IFVJQ29udHJvbCgnc29tZS1lbGVtZW50JywgJ3ZlcnRpY2FsJyk7XG4gICAgZXhwZWN0KGNvbnRyb2wuZ2V0Q29udHJvbCgpKS5ub3QudG9CZU51bGwoKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBzaXplJywgKCkgPT4ge1xuICB0ZXN0KCdVSUNvbnRyb2wgc2l6ZSBzaG91bGQgYmUge3dpZHRoOiA0MDAsIGhlaWdodDogNTB9JywgKCkgPT4ge1xuICAgIGNvbnRyb2xbJ2NvbnRyb2wnXS5zdHlsZS53aWR0aCA9ICc0MDBweCc7XG4gICAgY29udHJvbFsnY29udHJvbCddLnN0eWxlLmhlaWdodCA9ICc1MHB4JztcbiAgICBleHBlY3QoY29udHJvbC5nZXRTaXplKCkud2lkdGgpLnRvQmUoNDAwKTtcbiAgICBleHBlY3QoY29udHJvbC5nZXRTaXplKCkuaGVpZ2h0KS50b0JlKDUwKTtcbiAgfSk7XG4gIHRlc3QoJ1VJLUNvbnRyb2wgc2l6ZSBzaG91bGQgYmUge3dpZHRoOiAyNTAsIGhlaWdodDogNDB9JywgKCkgPT4ge1xuICAgIGNvbnRyb2xbJ2NvbnRyb2wnXS5zdHlsZS53aWR0aCA9ICcyNTBweCc7XG4gICAgY29udHJvbFsnY29udHJvbCddLnN0eWxlLmhlaWdodCA9ICc0MHB4JztcbiAgICBleHBlY3QoY29udHJvbC5nZXRTaXplKCkud2lkdGgpLnRvQmUoMjUwKTtcbiAgICBleHBlY3QoY29udHJvbC5nZXRTaXplKCkuaGVpZ2h0KS50b0JlKDQwKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1N3aXRjaCB0byBob3Jpem9udGFsJywgKCkgPT4ge1xuICB0ZXN0KCdVSS1Db250cm9sIHNob3VsZCBiZSBub3QgY29udGFpbiBjbGFzcyBzb21lLWVsZW1lbnRfdmVydGljYWwnLCAoKSA9PiB7XG4gICAgY29udHJvbCA9IG5ldyBVSUNvbnRyb2woJ3NvbWUtZWxlbWVudCcsICd2ZXJ0aWNhbCcpO1xuICAgIGNvbnRyb2wuc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gICAgZXhwZWN0KGNvbnRyb2xbJ2NvbnRyb2wnXS5jbGFzc0xpc3QuY29udGFpbnMoJ3NvbWUtZWxlbWVudF92ZXJ0aWNhbCcpKS50b0JlKFxuICAgICAgZmFsc2UsXG4gICAgKTtcbiAgfSk7XG4gIHRlc3QoJ1VJLUNvbnRyb2wgc2hvdWxkIGJlIGNvbnRhaW4gY2xhc3Mgc29tZS1lbGVtZW50X2hvcml6b250YWwnLCAoKSA9PiB7XG4gICAgY29udHJvbCA9IG5ldyBVSUNvbnRyb2woJ3NvbWUtZWxlbWVudCcsICd2ZXJ0aWNhbCcpO1xuICAgIGNvbnRyb2wuc3dpdGNoVG9Ib3Jpem9udGFsKCk7XG4gICAgZXhwZWN0KFxuICAgICAgY29udHJvbFsnY29udHJvbCddLmNsYXNzTGlzdC5jb250YWlucygnc29tZS1lbGVtZW50X2hvcml6b250YWwnKSxcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdTd2l0Y2ggdG8gdmVydGljYWwnLCAoKSA9PiB7XG4gIHRlc3QoJ1VJLUNvbnRyb2wgc2hvdWxkIGJlIG5vdCBjb250YWluIGNsYXNzIHNvbWUtZWxlbWVudF9ob3Jpem9udGFsJywgKCkgPT4ge1xuICAgIGNvbnRyb2wuc3dpdGNoVG9WZXJ0aWNhbCgpO1xuICAgIGV4cGVjdChcbiAgICAgIGNvbnRyb2xbJ2NvbnRyb2wnXS5jbGFzc0xpc3QuY29udGFpbnMoJ3NvbWUtZWxlbWVudF9ob3Jpem9udGFsJyksXG4gICAgKS50b0JlKGZhbHNlKTtcbiAgfSk7XG4gIHRlc3QoJ1VJLUNvbnRyb2wgc2hvdWxkIGJlIGNvbnRhaW4gY2xhc3Mgc29tZS1lbGVtZW50X3ZlcnRpY2FsJywgKCkgPT4ge1xuICAgIGNvbnRyb2wuc3dpdGNoVG9WZXJ0aWNhbCgpO1xuICAgIGV4cGVjdChjb250cm9sWydjb250cm9sJ10uY2xhc3NMaXN0LmNvbnRhaW5zKCdzb21lLWVsZW1lbnRfdmVydGljYWwnKSkudG9CZShcbiAgICAgIHRydWUsXG4gICAgKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1JlbW92ZScsICgpID0+IHtcbiAgdGVzdCgnVUktQ29udHJvbCBzaG91bGQgYmUgbm90IGV4aXN0IGluIHRoZSBET00nLCAoKSA9PiB7XG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgICBib2R5Py5hcHBlbmQoY29udHJvbC5nZXRDb250cm9sKCkpO1xuICAgIGNvbnRyb2wucmVtb3ZlKCk7XG4gICAgZXhwZWN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb21lLWVsZW1lbnQnKSkudG9CZShudWxsKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBvcmllbnRhdGlvbicsICgpID0+IHtcbiAgdGVzdCgnVUktQ29udHJvbCBvcmllbnRhdGlvbiBzaG91bGQgYmUgaG9yaXpvbnRhbCcsICgpID0+IHtcbiAgICBleHBlY3QoY29udHJvbC5nZXRPcmllbnRhdGlvbigpKS50b0JlKCdob3Jpem9udGFsJyk7XG4gIH0pO1xuICB0ZXN0KCdVSS1Db250cm9sIG9yaWVudGF0aW9uIHNob3VsZCBiZSB2ZXJ0aWNhbCcsICgpID0+IHtcbiAgICBjb250cm9sID0gbmV3IFVJQ29udHJvbCgnc29tZS1lbGVtZW50JywgJ3ZlcnRpY2FsJyk7XG4gICAgZXhwZWN0KGNvbnRyb2wuZ2V0T3JpZW50YXRpb24oKSkudG9CZSgndmVydGljYWwnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCByZWN0JywgKCkgPT4ge1xuICB0ZXN0KCdVSS1Db250cm9sIHJlY3Qgc2hvdWxkIGJlIHt0b3A6IDQwLCBsZWZ0OiA0NSwgYm90dG9tOiA1MCwgcmlnaHQ6IDU1fScsICgpID0+IHtcbiAgICBjb250cm9sWydjb250cm9sJ10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID0gamVzdC5mbigoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogMTIwLFxuICAgICAgICBoZWlnaHQ6IDEyMCxcbiAgICAgICAgdG9wOiA0MCxcbiAgICAgICAgbGVmdDogNDUsXG4gICAgICAgIGJvdHRvbTogNTAsXG4gICAgICAgIHJpZ2h0OiA1NSxcbiAgICAgICAgeDogMzUsXG4gICAgICAgIHk6IDQ4LFxuICAgICAgICB0b0pTT046ICgpID0+IG51bGwsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGV4cGVjdChjb250cm9sLmdldFJlY3QoKS50b3ApLnRvQmUoNDApO1xuICAgIGV4cGVjdChjb250cm9sLmdldFJlY3QoKS5sZWZ0KS50b0JlKDQ1KTtcbiAgICBleHBlY3QoY29udHJvbC5nZXRSZWN0KCkuYm90dG9tKS50b0JlKDUwKTtcbiAgICBleHBlY3QoY29udHJvbC5nZXRSZWN0KCkucmlnaHQpLnRvQmUoNTUpO1xuICB9KTtcbiAgdGVzdCgnVUktQ29udHJvbCByZWN0IHNob3VsZCBiZSB7dG9wOiAxMSwgbGVmdDogNDksIGJvdHRvbTogNjAsIHJpZ2h0OiA1fScsICgpID0+IHtcbiAgICBjb250cm9sWydjb250cm9sJ10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID0gamVzdC5mbigoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogMTIwLFxuICAgICAgICBoZWlnaHQ6IDEyMCxcbiAgICAgICAgdG9wOiAxMSxcbiAgICAgICAgbGVmdDogNDksXG4gICAgICAgIGJvdHRvbTogNjAsXG4gICAgICAgIHJpZ2h0OiA1LFxuICAgICAgICB4OiAzNSxcbiAgICAgICAgeTogNDgsXG4gICAgICAgIHRvSlNPTjogKCkgPT4gbnVsbCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgZXhwZWN0KGNvbnRyb2wuZ2V0UmVjdCgpLnRvcCkudG9CZSgxMSk7XG4gICAgZXhwZWN0KGNvbnRyb2wuZ2V0UmVjdCgpLmxlZnQpLnRvQmUoNDkpO1xuICAgIGV4cGVjdChjb250cm9sLmdldFJlY3QoKS5ib3R0b20pLnRvQmUoNjApO1xuICAgIGV4cGVjdChjb250cm9sLmdldFJlY3QoKS5yaWdodCkudG9CZSg1KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0dldCBzdHlsZScsICgpID0+IHtcbiAgdGVzdCgnVUktQ29udHJvbCB3aWR0aCBzdHlsZSBzaG91bGQgYmUgMTM4cHgnLCAoKSA9PiB7XG4gICAgY29udHJvbFsnY29udHJvbCddLnN0eWxlLndpZHRoID0gJzEzOHB4JztcbiAgICBleHBlY3QoY29udHJvbC5nZXRTdHlsZSgnd2lkdGgnKSkudG9CZSgnMTM4cHgnKTtcbiAgfSk7XG4gIHRlc3QoJ1VJLUNvbnRyb2wgd2lkdGggc3R5bGUgc2hvdWxkIGJlIFwiXCInLCAoKSA9PiB7XG4gICAgZXhwZWN0KGNvbnRyb2wuZ2V0U3R5bGUoJ3NvbWVTdHlsZScpKS50b0JlKCcnKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=