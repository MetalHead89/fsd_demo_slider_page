!function(e){function t(t){for(var i,n,a=t[0],r=t[1],h=t[2],u=0,p=[];u<a.length;u++)n=a[u],Object.prototype.hasOwnProperty.call(o,n)&&o[n]&&p.push(o[n][0]),o[n]=0;for(i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i]);for(c&&c(t);p.length;)p.shift()();return l.push.apply(l,h||[]),s()}function s(){for(var e,t=0;t<l.length;t++){for(var s=l[t],i=!0,a=1;a<s.length;a++){var r=s[a];0!==o[r]&&(i=!1)}i&&(l.splice(t--,1),e=n(n.s=s[0]))}return e}var i={},o={0:0},l=[];function n(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=i,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="";var a=window.webpackJsonp=window.webpackJsonp||[],r=a.push.bind(a);a.push=t,a=a.slice();for(var h=0;h<a.length;h++)t(a[h]);var c=r;l.push([13,1]),s()}([function(e,t,s){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},l=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),n=[];function a(e){for(var t=-1,s=0;s<n.length;s++)if(n[s].identifier===e){t=s;break}return t}function r(e,t){for(var s={},i=[],o=0;o<e.length;o++){var l=e[o],r=t.base?l[0]+t.base:l[0],h=s[r]||0,c="".concat(r," ").concat(h);s[r]=h+1;var u=a(c),p={css:l[1],media:l[2],sourceMap:l[3]};-1!==u?(n[u].references++,n[u].updater(p)):n.push({identifier:c,updater:g(p,t),references:1}),i.push(c)}return i}function h(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=s.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var n=l(e.insert||"head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,s,i){var o=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var l=document.createTextNode(o),n=e.childNodes;n[t]&&e.removeChild(n[t]),n.length?e.insertBefore(l,n[t]):e.appendChild(l)}}function d(e,t,s){var i=s.css,o=s.media,l=s.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),l&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var m=null,b=0;function g(e,t){var s,i,o;if(t.singleton){var l=b++;s=m||(m=h(t)),i=p.bind(null,s,l,!1),o=p.bind(null,s,l,!0)}else s=h(t),i=d.bind(null,s,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var s=r(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<s.length;i++){var o=a(s[i]);n[o].references--}for(var l=r(e,t),h=0;h<s.length;h++){var c=a(s[h]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}s=l}}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));t.default=class{constructor(e,t){const s=document.createElement("div");this.element=s,this.subject=new o.default,this.lastPosition={left:0,top:0};let i=e+"_horizontal";t&&(i=`${e}_${t}`),this.element.classList.add(""+e,i)}setPosition(e){const t={left:e.left,top:e.top},s=this.element.parentElement;if(null!==s){const e=s.getBoundingClientRect();t.left-=e.left,t.top-=e.top}this.lastPosition=t}getPosition(){return this.lastPosition}getElement(){return this.element}getSize(){return{width:this.element.offsetWidth,height:this.element.offsetHeight}}switchToHorizontal(){const e=this.element.classList[0];this.element.classList.remove(e+"_vertical"),this.element.classList.add(e+"_horizontal")}switchToVertical(){const e=this.element.classList[0];this.element.classList.remove(e+"_horizontal"),this.element.classList.add(e+"_vertical")}remove(){this.element.remove()}getOrientation(){const e=this.element.classList[0];return this.element.classList[1].replace(e+"_","")}getRect(){return this.element.getBoundingClientRect()}getStyle(e){var t;return null===(t=document.defaultView)||void 0===t?void 0:t.getComputedStyle(this.element,null).getPropertyValue(e)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.observers={}}register(e,t){Object.prototype.hasOwnProperty.call(this.observers,e)||(this.observers[e]=[]),this.observers[e].push(t)}unsubscribe(e,t){this.observers[e]=this.observers[e].filter(e=>e!==t)}notify(e){Object.prototype.hasOwnProperty.call(this.observers,e)&&this.observers[e].forEach(t=>t.update(e))}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l{constructor(e){this.orientation="horizontal",this.type="range",this.scale=!0,this.popUps=!0,this.min=0,this.max=10,this.step=1,this.thumbOneValue=3,this.thumbTwoValue=7,this.sliderSize={width:500,height:10},this.thumbSize={width:20,height:10},this.subject=new o.default,this.refreshSliderState(e)}refreshSliderState(e){void 0!==e.sliderSize&&(this.sliderSize=e.sliderSize),void 0!==e.thumbSize&&(this.thumbSize=e.thumbSize),this.orientation!==e.orientation&&(this.orientation=e.orientation,this.subject.notify("orientationIsUpdated")),this.type!==e.type&&(this.type=e.type,this.typeIsRangeAndSecondThumbValueLessThanFirst()&&(this.thumbTwoValue=this.thumbOneValue),this.subject.notify("typeIsUpdated")),this.min!==e.min&&this.updateMinValue(e.min),this.max!==e.max&&this.updateMaxValue(e.max),this.step!==e.step&&this.updateStep(e.step),this.scale!==e.scale&&(this.scale=e.scale,this.subject.notify("scaleStateIsUpdated")),this.popUps!==e.popUps&&(this.popUps=e.popUps,this.subject.notify("popUpsStateIsUpdated")),this.thumbOneValue===e.thumbOneValue&&this.thumbTwoValue===e.thumbTwoValue||this.setThumbsValues({thumbOne:e.thumbOneValue,thumbTwo:e.thumbTwoValue})}typeIsRangeAndSecondThumbValueLessThanFirst(){return"range"===this.type&&this.thumbTwoValue<this.thumbOneValue}updateThumbsState(e){const t=this.valueWithStep(this.posByOrientation(e.thumbOne));let s=null;null!==e.thumbTwo&&(s=this.valueWithStep(this.posByOrientation(e.thumbTwo))),l.valueTwoIsNullOrMoreOrEqualThenValueOne(t,s)&&(this.thumbOneValue=t,null!==s&&(this.thumbTwoValue=s)),this.subject.notify("thumbsPosIsUpdated")}static valueTwoIsNullOrMoreOrEqualThenValueOne(e,t){return null===t||e<=t}setSliderSize(e){this.sliderSize=l.getCorrectSize(e,0)}setThumbSize(e){this.thumbSize=l.getCorrectSize(e,0)}setThumbsValues(e){const t=this.thumbValueToPos(e.thumbOne);let s=null;"range"===this.type&&(s=this.thumbValueToPos(e.thumbTwo)),this.updateThumbsState({thumbOne:t,thumbTwo:s})}getMin(){return this.min}getMax(){return this.max}getStep(){return this.step}getScaleState(){return this.scale}getPopUpsState(){return this.popUps}getType(){return this.type}getOrientation(){return this.orientation}getProgressBarParams(){const e=this.thumbValueToPos(this.thumbOneValue),t=this.thumbValueToPos(this.thumbTwoValue),s=Object.assign({},this.sliderSize),i={left:0,top:0};let o=0,l=0;return"single"===this.type?l=this.posByOrientation(e)+this.sizeByOrientation(this.thumbSize):(o=this.posByOrientation(e),l=this.posByOrientation(t)-this.posByOrientation(e)+this.sizeByOrientation(this.thumbSize)),"horizontal"===this.orientation?(i.left=o,s.width=l):(i.top=o,s.height=l),{position:i,size:s}}getThumbsPos(){return{thumbOne:this.thumbValueToPos(this.thumbOneValue),thumbTwo:this.thumbValueToPos(this.thumbTwoValue)}}getPopUpsParams(){return{popUpOne:{value:this.thumbOneValue,position:this.getPopUpPosition(this.thumbValueToPos(this.thumbOneValue))},popUpTwo:{value:this.thumbTwoValue,position:this.getPopUpPosition(this.thumbValueToPos(this.thumbTwoValue))}}}getThumbsValues(){return{thumbOne:this.thumbOneValue,thumbTwo:this.thumbTwoValue}}getScalePoints(e){const t=[],s=this.getStepsCount(),i=this.getStepSize();let o=0,l=this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(e)/2;const n=s+1;for(let s=0;s<=Math.round(n-1);s+=1){const n=this.thumbPosToValue(l-this.sizeByOrientation(this.thumbSize)/2+this.sizeByOrientation(e)/2);if(l=this.getNextScalePointPos(l,e),this.isPointFits(s,l,o,e)){const s={left:0,top:0};"horizontal"===this.orientation?s.left=l:s.top=l,t.push({position:s,size:e,value:n}),o=l}l+=i}return t}isPointFits(e,t,s,i){return 0===e||t-s>this.sizeByOrientation(i)}setThumbPosOnClickPos(e){const t={left:e.left-this.thumbSize.width/2,top:e.top-this.thumbSize.height/2};let s=this.thumbOneValue,i=this.thumbTwoValue;this.thumbTwoIsNearToClick(t)?i=this.thumbPosToValue(this.posByOrientation(t)):s=this.thumbPosToValue(this.posByOrientation(t)),this.setThumbsValues({thumbOne:s,thumbTwo:i})}thumbTwoIsNearToClick(e){return"range"===this.type&&Math.abs(this.posByOrientation(e)-this.posByOrientation(this.thumbValueToPos(this.thumbTwoValue)))<Math.abs(this.posByOrientation(e)-this.posByOrientation(this.thumbValueToPos(this.thumbOneValue)))}static getCorrectSize(e,t){return{width:e.width>=t?e.width:t,height:e.height>=t?e.height:t}}getPopUpPosition(e){let t=0,s=0;return"horizontal"===this.orientation?t=e.left+this.thumbSize.width/2:s=e.top+this.thumbSize.height/2,{left:t,top:s}}updateMinValue(e){let t=e;t>=this.max&&(t=this.max-1),this.min=t,this.subject.notify("minIsUpdated")}updateMaxValue(e){let t=e;t<=this.min&&(t=this.min+1),this.max=t,this.subject.notify("maxIsUpdated")}updateStep(e){let t=e;t<=0&&(t=1),this.step=t,this.subject.notify("stepIsUpdated")}valueWithStep(e){if(this.thumbPosToValue(e)>=this.max)return this.thumbPosToValue(e);const t=this.getStepSize(),s=Math.round(e/t)*t;return this.thumbPosToValue(s)}getStepsCount(){return(this.max-this.min)/this.step}getStepSize(){const e=this.getStepsCount();return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/e}thumbPosToValue(e){const t=this.getPxPerValue();let s=Math.round(this.min+(this.max-this.min)/this.max*(e/t));return s=s<this.min?this.min:s,s=s>this.max?this.max:s,s}thumbValueToPos(e){const t={left:0,top:0},s=this.getPxPerValue();let i=e;i<this.min?i=this.min:i>this.max&&(i=this.max);const o=(i-this.min)/(this.max-this.min)*s*this.max;return"horizontal"===this.orientation?t.left=o:t.top=o,t}getPxPerValue(){return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/this.max}sizeByOrientation(e){return"horizontal"===this.orientation?e.width:e.height}posByOrientation(e){return"horizontal"===this.orientation?e.left:e.top}getNextScalePointPos(e,t){let s=e;const i=this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(t)/2;return s>i&&(s=i),s}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(7)),l=i(s(8)),n=i(s(9)),a=i(s(10)),r=i(s(11)),h=i(s(12)),c=i(s(2));t.default=class{constructor(e){this.subject=new c.default,this.sliderWrapper=e,this.container=new o.default,this.track=new l.default,this.thumbOne=new n.default,this.thumbTwo=new n.default,this.popUpOne=new a.default,this.popUpTwo=new a.default,this.progressBar=new r.default,this.scale=new h.default,this.subscribeToEvents(),this.assembleSlider(),this.addWindowResizeEventListener()}addWindowResizeEventListener(){window.addEventListener("resize",this.windowResize.bind(this))}windowResize(){this.subject.notify("windowResized")}subscribeToEvents(){var e,t,s;this.thumbOne.subject.register("thumbIsDragged",this),null===(e=this.thumbTwo)||void 0===e||e.subject.register("thumbIsDragged",this),this.thumbOne.subject.register("thumbIsCatched",this),null===(t=this.thumbTwo)||void 0===t||t.subject.register("thumbIsCatched",this),this.track.subject.register("clickToTrack",this),null===(s=this.scale)||void 0===s||s.subject.register("clickToScale",this)}assembleSlider(){this.container.append(this.track.getElement()),this.container.append(this.thumbOne.getElement()),null!==this.thumbTwo&&this.container.append(this.thumbTwo.getElement()),null!==this.popUpOne&&this.container.append(this.popUpOne.getElement()),null!==this.popUpTwo&&this.container.append(this.popUpTwo.getElement()),this.container.append(this.progressBar.getElement()),null!==this.scale&&this.container.append(this.scale.getElement()),this.sliderWrapper.append(this.container.getElement())}update(e){var t;switch(e){case"thumbIsDragged":this.subject.notify("thumbIsDragged");break;case"thumbIsCatched":this.thumbOne.resetZIndex(),null===(t=this.thumbTwo)||void 0===t||t.resetZIndex();break;case"clickToTrack":this.subject.notify("clickToTrack");break;case"clickToScale":this.subject.notify("clickToScale")}}switchToHorizontal(){var e,t,s,i;this.container.resetMargins(),this.container.switchToHorizontal(),this.track.switchToHorizontal(),this.thumbOne.switchToHorizontal(),null===(e=this.thumbTwo)||void 0===e||e.switchToHorizontal(),null===(t=this.popUpOne)||void 0===t||t.switchToHorizontal(),null===(s=this.popUpTwo)||void 0===s||s.switchToHorizontal(),this.progressBar.switchToHorizontal(),null===(i=this.scale)||void 0===i||i.switchToHorizontal()}switchToVertical(){var e,t,s,i;this.container.resetMargins(),this.container.switchToVertical(),this.track.switchToVertical(),this.thumbOne.switchToVertical(),null===(e=this.thumbTwo)||void 0===e||e.switchToVertical(),null===(t=this.popUpOne)||void 0===t||t.switchToVertical(),null===(s=this.popUpTwo)||void 0===s||s.switchToVertical(),this.progressBar.switchToVertical(),null===(i=this.scale)||void 0===i||i.switchToVertical()}switchToSingle(){var e,t,s,i;null===(e=this.thumbTwo)||void 0===e||e.subject.unsubscribe("thumbIsCatched",this),null===(t=this.thumbTwo)||void 0===t||t.subject.unsubscribe("thumbIsCatched",this),null===(s=this.thumbTwo)||void 0===s||s.remove(),this.thumbTwo=null,null===(i=this.popUpTwo)||void 0===i||i.remove(),this.popUpTwo=null}switchToRange(){null===this.thumbTwo&&(this.thumbTwo=new n.default(this.container.getOrientation()),this.container.append(this.thumbTwo.getElement()),null!==this.popUpOne&&(this.popUpTwo=new a.default(this.container.getOrientation()),this.container.append(this.popUpTwo.getElement())),this.thumbTwo.subject.register("thumbIsDragged",this),this.thumbTwo.subject.register("thumbIsCatched",this))}disablePopUps(){var e,t;null===(e=this.popUpOne)||void 0===e||e.remove(),this.popUpOne=null,null===(t=this.popUpTwo)||void 0===t||t.remove(),this.popUpTwo=null,this.container.setMargins(this.getMargins())}enablePopUps(){null===this.popUpOne&&(this.popUpOne=new a.default(this.container.getOrientation()),this.container.append(this.popUpOne.getElement())),this.popUpTwoIsNullAndThumbTwoIsNotNull()&&(this.popUpTwo=new a.default(this.container.getOrientation()),this.container.append(this.popUpTwo.getElement())),this.container.setMargins(this.getMargins())}popUpTwoIsNullAndThumbTwoIsNotNull(){return null===this.popUpTwo&&null!==this.thumbTwo}disableScale(){var e,t;null===(e=this.scale)||void 0===e||e.subject.unsubscribe("clickToScale",this),null===(t=this.scale)||void 0===t||t.remove(),this.scale=null,this.container.setMargins(this.getMargins())}enableScale(){var e;null!==this.scale&&(null===(e=this.scale)||void 0===e||e.remove()),this.scale=new h.default(this.container.getOrientation()),this.container.append(this.scale.getElement()),this.scale.subject.register("clickToScale",this),this.container.setMargins(this.getMargins())}getThumbSize(){return this.thumbOne.getSize()}getSliderSize(){return this.container.getSize()}getThumbsPos(){const e=this.thumbOne.getPosition();let t=null;return null!==this.thumbTwo&&(t=this.thumbTwo.getPosition()),{thumbOne:e,thumbTwo:t}}updateThumbs(e){var t;this.thumbOne.moveTo(e.thumbOne),null!==e.thumbTwo&&(null===(t=this.thumbTwo)||void 0===t||t.moveTo(e.thumbTwo))}updateProgressBar(e){this.progressBar.update(e)}updatePopUps(e){null!==this.popUpOne&&this.popUpOne.update(e.popUpOne),null!==this.popUpTwo&&this.popUpTwo.update(e.popUpTwo)}getScalePointSize(e){return null!==this.scale?this.scale.getPointSize(e):{width:0,height:0}}addScalePoints(e){var t;null===(t=this.scale)||void 0===t||t.addPoints(e),this.container.setMargins(this.getMargins())}getTrackClickPosition(){return this.track.getPosition()}getScaleClickPosition(){return null===this.scale?{left:0,top:0}:this.scale.getPosition()}getMargins(){const e={left:0,top:0,right:0,bottom:0},t=this.container.getRect(),s=null!==this.popUpOne?this.popUpOne.getRect():null,i=null!==this.scale?this.scale.getRect():null;return"horizontal"===this.container.getOrientation()?(null!==s&&(e.top+=t.top-s.top),null!==i&&(e.bottom+=i.bottom-t.bottom)):(null!==s&&(e.left+=t.left-s.left),null!==i&&(e.right+=i.right-t.right)),e}}},,function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.model=e.model,this.view=e.view,this.modelSubject=this.model.subject,this.viewSubject=this.view.subject,this.subscribeToEvents(),this.init()}init(){"horizontal"===this.model.getOrientation()?this.view.switchToHorizontal():this.view.switchToVertical(),this.model.setSliderSize(this.view.getSliderSize()),this.model.setThumbSize(this.view.getThumbSize()),"single"===this.model.getType()?this.view.switchToSingle():this.view.switchToRange(),this.model.getPopUpsState()?this.view.enablePopUps():this.view.disablePopUps(),this.updateView()}subscribeToEvents(){this.viewSubject.register("thumbIsDragged",this),this.modelSubject.register("thumbsPosIsUpdated",this),this.modelSubject.register("minIsUpdated",this),this.modelSubject.register("maxIsUpdated",this),this.modelSubject.register("stepIsUpdated",this),this.modelSubject.register("typeIsUpdated",this),this.modelSubject.register("orientationIsUpdated",this),this.modelSubject.register("scaleStateIsUpdated",this),this.modelSubject.register("popUpsStateIsUpdated",this),this.view.subject.register("clickToTrack",this),this.view.subject.register("clickToScale",this),this.view.subject.register("windowResized",this)}update(e){switch(e){case"thumbIsDragged":this.model.updateThumbsState(this.view.getThumbsPos());break;case"thumbsPosIsUpdated":this.updateThumbsPos();break;case"minIsUpdated":case"maxIsUpdated":case"stepIsUpdated":this.updateView();break;case"orientationIsUpdated":this.updateSliderOrientation();break;case"typeIsUpdated":this.updateSliderType();break;case"scaleStateIsUpdated":this.updateScaleState();break;case"popUpsStateIsUpdated":this.updatePopUpsSate();break;case"clickToTrack":this.model.setThumbPosOnClickPos(this.view.getTrackClickPosition());break;case"clickToScale":this.model.setThumbPosOnClickPos(this.view.getScaleClickPosition());break;case"windowResized":this.init()}}updateView(){if(this.model.updateThumbsState(this.model.getThumbsPos()),this.model.getScaleState()){this.view.enableScale();const e=this.model.getMax(),t=this.model.getScalePoints(this.view.getScalePointSize(e));this.view.addScalePoints(t)}else this.view.disableScale()}updateThumbsPos(){this.view.updateThumbs(this.model.getThumbsPos()),this.view.updatePopUps(this.model.getPopUpsParams()),this.view.updateProgressBar(this.model.getProgressBarParams())}updateSliderOrientation(){"horizontal"===this.model.getOrientation()?this.view.switchToHorizontal():this.view.switchToVertical(),this.model.setSliderSize(this.view.getSliderSize()),this.updateView()}updateSliderType(){"single"===this.model.getType()?this.view.switchToSingle():this.view.switchToRange(),this.model.updateThumbsState(this.model.getThumbsPos())}updateScaleState(){this.model.getScaleState()?(this.view.enableScale(),this.updateView()):this.view.disableScale()}updatePopUpsSate(){this.model.getPopUpsState()?(this.view.enablePopUps(),this.model.updateThumbsState(this.model.getThumbsPos())):this.view.disablePopUps()}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("slider")}append(e){this.element.append(e)}setMargins(e){this.element.style.marginLeft=e.left+"px",this.element.style.marginTop=e.top+"px",this.element.style.marginRight=e.right+"px",this.element.style.marginBottom=e.bottom+"px"}resetMargins(){this.element.style.margin="0"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("slider__track"),this.init()}init(){this.element.addEventListener("click",this.clickToTrack.bind(this))}clickToTrack(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("clickToTrack")}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("slider__thumb",e),this.shift={shiftX:0,shiftY:0},this.onMouseMoveHandler=this.drag.bind(this),this.onMouseUpHandler=this.endDrag.bind(this),this.addMousedownEventListener(),this.disableDragAndDrop()}setZIndex(e){this.element.style.zIndex=e.toString()}disableDragAndDrop(){this.element.ondragstart=()=>!1}addMousedownEventListener(){this.element.addEventListener("pointerdown",this.clickToThumb.bind(this))}clickToThumb(e){l.disableSelection();const t=this.element.getBoundingClientRect();this.setThumbShift({left:e.clientX,top:e.clientY},{left:t.left,top:t.top}),document.addEventListener("pointermove",this.onMouseMoveHandler),document.addEventListener("pointerup",this.onMouseUpHandler),this.subject.notify("thumbIsCatched"),this.increaseZIndex()}setThumbShift(e,t){this.shift.shiftX=e.left-t.left,this.shift.shiftY=e.top-t.top}increaseZIndex(){const e=this.getStyle("z-index");this.element.style.zIndex=(parseInt(e||"0",10)+1).toString()}resetZIndex(){this.element.style.zIndex=""}drag(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("thumbIsDragged")}setPosition(e){super.setPosition(e),this.lastPosition.left-=this.shift.shiftX,this.lastPosition.top-=this.shift.shiftY}endDrag(){l.enableSelection(),document.removeEventListener("pointermove",this.onMouseMoveHandler),document.removeEventListener("pointerup",this.onMouseUpHandler)}moveTo(e){this.lastPosition=e,this.element.style.left=e.left+"px",this.element.style.top=e.top+"px"}static disableSelection(){document.onselectstart=()=>!1,document.onpointerdown=()=>!1}static enableSelection(){document.onselectstart=null,document.onpointerdown=null}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("slider__pop-up",e)}update(e){this.updateValue(e.value),this.updatePosition(e.position)}updateValue(e){this.element.innerHTML=""+e}updatePosition(e){this.element.style.left=e.left+"px",this.element.style.top=e.top+"px"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("slider__progress-bar")}update(e){this.element.style.left=e.position.left+"px",this.element.style.top=e.position.top+"px",this.element.style.width=e.size.width+"px",this.element.style.height=e.size.height+"px"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("slider__scale",e),this.init()}init(){this.element.addEventListener("click",this.clickToScale.bind(this))}clickToScale(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("clickToScale")}getPointSize(e){this.addPoint({position:{left:0,top:0},size:{width:0,height:0},value:e});const t={width:0,height:0},s=this.element.querySelector(".slider__scale-point");return t.width=(null==s?void 0:s.offsetWidth)||0,t.height=(null==s?void 0:s.offsetHeight)||0,null==s||s.remove(),t}addPoints(e){for(let t=0;t<e.length;t+=1)this.addPoint(e[t])}addPoint(e){const t=this.getOrientation(),s=document.createElement("div");s.classList.add("slider__scale-point","slider__scale-point_"+t),e.size.width>0&&(s.style.width=e.size.width+"px"),"horizontal"===t?this.element.style.height=e.size.height+"px":this.element.style.width=e.size.width+"px";const i=document.createElement("div");i.classList.add("slider__scale-point-marker");const o=document.createElement("div");o.classList.add("slider__scale-point-label","slider__scale-point-label_"+t),o.innerText=e.value.toString(),s.style.left=e.position.left+"px",s.style.top=e.position.top+"px",s.append(i),s.append(o),this.element.append(s)}}t.default=l},function(e,t,s){"use strict";s(21);const i=s(54);i.keys().forEach(e=>{i(e)})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(15)),l=i(s(57)),n=i(s(16)),a=i(s(17)),r=i(s(18)),h=i(s(2));class c extends h.default{constructor(e){super(),this.container=new o.default,this.sliderWrapper=e,this.thumbOneValue=new l.default("First thumb value"),this.thumbTwoValue=new l.default("Second thumb value"),this.min=new l.default("min value"),this.max=new l.default("max value"),this.step=new l.default("step"),this.typeRadio=new a.default("type",{label:"single",value:"single"},{label:"range",value:"range"}),this.orientationRadio=new a.default("orientation",{label:"horizontal",value:"horizontal"},{label:"vertical",value:"vertical"}),this.scaleCheckbox=new r.default({label:"scale",name:"scale",value:"scale"}),this.popUpsCheckbox=new r.default({label:"pop ups",name:"popUps",value:"popUps"}),this.subscribeToEvents(),this.createPanel()}createPanel(){this.container.append(n.default({wrapperClass:"control-panel__text-fields-group",elements:[this.thumbOneValue.getControl(),this.thumbTwoValue.getControl()]})),this.container.append(n.default({wrapperClass:"control-panel__text-fields-group",elements:[this.min.getControl(),this.max.getControl(),this.step.getControl()]}));const e=n.default({header:"type",wrapperClass:"",elements:[this.typeRadio.getControl()]}),t=n.default({header:"orientation",wrapperClass:"",elements:[this.orientationRadio.getControl()]}),s=n.default({wrapperClass:"",elements:[e,t]}),i=n.default({header:"on/off elements",wrapperClass:"",elements:[this.scaleCheckbox.getControl(),this.popUpsCheckbox.getControl()]});this.container.append(n.default({wrapperClass:"control-panel__checkboxes-and-radios-wrapper",elements:[s,i]})),this.sliderWrapper.append(this.container.getElement())}subscribeToEvents(){this.thumbOneValue.register("controlPanelDataUpdated",this),this.thumbTwoValue.register("controlPanelDataUpdated",this),this.min.register("controlPanelDataUpdated",this),this.max.register("controlPanelDataUpdated",this),this.step.register("controlPanelDataUpdated",this),this.typeRadio.register("controlPanelDataUpdated",this),this.orientationRadio.register("controlPanelDataUpdated",this),this.scaleCheckbox.register("controlPanelDataUpdated",this),this.popUpsCheckbox.register("controlPanelDataUpdated",this)}update(e){"controlPanelDataUpdated"===e&&(this.notify("controlPanelDataUpdated"),this.switchOrientation())}switchOrientation(){"horizontal"===this.getOrientation()?(this.container.switchToHorizontal(),this.sliderWrapper.classList.remove("slider-wrapper_vertical"),this.sliderWrapper.classList.add("slider-wrapper_horizontal")):(this.container.switchToVertical(),this.sliderWrapper.classList.remove("slider-wrapper_horizontal"),this.sliderWrapper.classList.add("slider-wrapper_vertical"))}setThumbsValues(e){this.thumbOneValue.setValue(e.thumbOne),this.thumbTwoValue.setValue(e.thumbTwo)}setMinValue(e){this.min.setValue(e)}setMaxValue(e){this.max.setValue(e)}setStep(e){this.step.setValue(e)}setScaleState(e){this.scaleCheckbox.setState(e)}setPopUpsState(e){this.popUpsCheckbox.setState(e)}setTypeRadio(e){this.typeRadio.switchTo(e)}setOrientationRadio(e){this.orientationRadio.switchTo(e)}getOrientation(){return this.orientationRadio.getValue()}getType(){return this.typeRadio.getValue()}getScaleState(){return this.scaleCheckbox.getState()}getPopUpsState(){return this.popUpsCheckbox.getState()}getMin(){return this.min.getValue()}getMax(){return this.max.getValue()}getStep(){return this.step.getValue()}getThumbOneValue(){return this.thumbOneValue.getValue()}getThumbTwoValue(){return this.thumbTwoValue.getValue()}getThumbsValues(){return{thumbOne:this.thumbOneValue.getValue(),thumbTwo:this.thumbTwoValue.getValue()}}}t.default=c},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.element=document.createElement("div"),this.element.classList.add("control-panel")}getElement(){return this.element}append(e){this.element.append(e)}switchToHorizontal(){this.element.classList.remove("control-panel_vertical"),this.element.classList.add("control-panel_horizontal")}switchToVertical(){this.element.classList.remove("control-panel_horizontal"),this.element.classList.add("control-panel_vertical")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=document.createElement("div");if(t.className=e.wrapperClass,void 0!==e.header){const s=document.createElement("label");s.classList.add("control-panel__radio-group-title"),s.innerText=e.header,t.append(s)}for(let s=0;s<e.elements.length;s+=1)t.append(e.elements[s]);return t}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e,...t){super();const s=l.generateName(e);this.control=document.createElement("div"),this.control.classList.add("control-panel__radio-group"),this.radios=[],this.init(s,t)}getControl(){return this.control}getValue(){for(let e=0;e<this.radios.length;e+=1)if(this.radios[e].checked)return this.radios[e].value;return""}init(e,t){for(let s=0;s<t.length;s+=1){const i=document.createElement("div");i.classList.add("control-panel__radio-wrapper");const o=document.createElement("label");o.classList.add("control-panel__radio-label"),o.innerText=t[s].label;const n=document.createElement("input");n.type="radio",n.name=e,n.value=t[s].value,l.radioIsFirstOrChecked(s,t[s].checked)&&(n.checked=!0),n.classList.add("control-panel__radio-button"),n.addEventListener("change",this.onChange.bind(this)),this.radios.push(n),o.append(n),i.append(o),this.control.append(i)}}static radioIsFirstOrChecked(e,t){return 0===e||t}onChange(){for(let e=0;e<this.radios.length;e+=1){const t=this.radios[e].parentElement;this.radios[e].checked?null==t||t.classList.add("control-panel__radio-label_checked"):null==t||t.classList.remove("control-panel__radio-label_checked")}this.notify("controlPanelDataUpdated")}switchTo(e){for(let t=0;t<this.radios.length;t+=1)if(this.radios[t].value===e){this.radios[t].checked=!0,this.onChange();break}}static generateName(e){let t=1,s="";for(;""===s;){const i=`${e}${t}`;null===document.querySelector(`[name="${i}"]`)&&(s=i),t+=1}return s}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.control=document.createElement("div"),this.label=document.createElement("label"),this.checkbox=document.createElement("input"),this.init(e)}init(e){this.control.classList.add("control-panel__checkbox-wrapper"),this.label.classList.add("control-panel__checkbox-label"),this.label.innerText=e.label,this.checkbox.type="checkbox",this.checkbox.name=e.name,this.checkbox.value=e.value,this.checkbox.classList.add("control-panel__checkbox"),this.checkbox.addEventListener("change",this.onChange.bind(this)),this.label.append(this.checkbox),this.control.append(this.label)}getControl(){return this.control}onChange(){this.checkbox.checked?this.label.classList.add("control-panel__checkbox-label_checked"):this.label.classList.remove("control-panel__checkbox-label_checked"),this.notify("controlPanelDataUpdated")}setState(e){this.checkbox.checked=e,this.onChange()}getState(){return this.checkbox.checked}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.slider=e,this.subject=e.simpleSlider("getModelSubject"),this.subject.register("thumbsPosIsUpdated",this)}update(e){"thumbsPosIsUpdated"===e&&this.notify("thumbsPosIsUpdated")}getThumbsValues(){return this.slider.simpleSlider("getThumbsValues")}getMin(){return this.slider.simpleSlider("getMin")}getMax(){return this.slider.simpleSlider("getMax")}getStep(){return this.slider.simpleSlider("getStep")}getScaleState(){return this.slider.simpleSlider("getScaleState")}getPopUpsState(){return this.slider.simpleSlider("getPopUpsState")}getType(){return this.slider.simpleSlider("getType")}getOrientation(){return this.slider.simpleSlider("getOrientation")}refreshSliderState(e){this.slider.simpleSlider("refreshSliderState",e)}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.view=e,this.model=t,this.init(),this.subscribeToEvents()}subscribeToEvents(){this.model.register("thumbsPosIsUpdated",this),this.view.register("controlPanelDataUpdated",this)}init(){this.view.setThumbsValues(this.model.getThumbsValues()),this.view.setMinValue(this.model.getMin()),this.view.setMaxValue(this.model.getMax()),this.view.setStep(this.model.getStep()),this.view.setScaleState(this.model.getScaleState()),this.view.setPopUpsState(this.model.getPopUpsState()),this.view.setTypeRadio(this.model.getType()),this.view.setOrientationRadio(this.model.getOrientation())}update(e){if("thumbsPosIsUpdated"===e&&this.view.setThumbsValues(this.model.getThumbsValues()),"controlPanelDataUpdated"===e){const e={orientation:this.view.getOrientation(),type:this.view.getType(),scale:this.view.getScaleState(),popUps:this.view.getPopUpsState(),min:this.view.getMin(),max:this.view.getMax(),step:this.view.getStep(),thumbOneValue:this.view.getThumbOneValue(),thumbTwoValue:this.view.getThumbTwoValue()};this.model.refreshSliderState(e)}}}},function(e,t,s){var i={"./demo/scss/normalize.scss":22,"./demo/scss/style.scss":24,"./fonts/fonts.scss":26,"./plugins/control-panel/control-panel.scss":28,"./plugins/control-panel/view/checkbox/_animations.scss":30,"./plugins/control-panel/view/checkbox/checkbox.scss":32,"./plugins/control-panel/view/container/container.scss":34,"./plugins/control-panel/view/radio-button/_animations.scss":36,"./plugins/control-panel/view/radio-button/radio-button.scss":38,"./plugins/control-panel/view/text-field/text-field.scss":40,"./plugins/simple-slider/view/container/container.scss":42,"./plugins/simple-slider/view/pop-up/pop-up.scss":44,"./plugins/simple-slider/view/progress-bar/progress-bar.scss":46,"./plugins/simple-slider/view/scale/scale.scss":48,"./plugins/simple-slider/view/thumb/thumb.scss":50,"./plugins/simple-slider/view/track/track.scss":52};function o(e){var t=l(e);return s(t)}function l(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=l,e.exports=o,o.id=21},function(e,t,s){var i=s(0),o=s(23);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(25);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(27);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(29);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(31);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(33);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(35);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(37);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(39);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(41);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(43);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(45);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(47);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(49);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(51);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(53);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i={"./demo/demo.ts":55,"./index.ts":13,"./plugins/control-panel/control-panel.ts":56,"./plugins/control-panel/controller/control-panel-controller.ts":20,"./plugins/control-panel/interfaces.ts":58,"./plugins/control-panel/model/control-panel-model.ts":19,"./plugins/control-panel/view/checkbox/checkbox.ts":18,"./plugins/control-panel/view/container/container.ts":15,"./plugins/control-panel/view/control-panel-view.ts":14,"./plugins/control-panel/view/group-elements.ts":16,"./plugins/control-panel/view/radio-button/radio-button.ts":17,"./plugins/simple-slider/controller/simple-slider-controller.ts":6,"./plugins/simple-slider/interfaces.ts":59,"./plugins/simple-slider/model/__mocks__/simple-slider-model.ts":60,"./plugins/simple-slider/model/simple-slider-model.ts":3,"./plugins/simple-slider/simple-slider.ts":61,"./plugins/simple-slider/subject/subject.ts":2,"./plugins/simple-slider/view/__mocks__/simple-slider-view.ts":62,"./plugins/simple-slider/view/container/__mocks__/container.ts":63,"./plugins/simple-slider/view/container/container.ts":7,"./plugins/simple-slider/view/element/__mocks__/element.ts":64,"./plugins/simple-slider/view/element/element.ts":1,"./plugins/simple-slider/view/pop-up/__mocks__/pop-up.ts":65,"./plugins/simple-slider/view/pop-up/pop-up.ts":10,"./plugins/simple-slider/view/progress-bar/__mocks__/progress-bar.ts":66,"./plugins/simple-slider/view/progress-bar/progress-bar.ts":11,"./plugins/simple-slider/view/scale/__mocks__/scale.ts":67,"./plugins/simple-slider/view/scale/scale.ts":12,"./plugins/simple-slider/view/simple-slider-view.ts":4,"./plugins/simple-slider/view/thumb/__mocks__/thumb.ts":68,"./plugins/simple-slider/view/thumb/thumb.ts":9,"./plugins/simple-slider/view/track/__mocks__/track.ts":69,"./plugins/simple-slider/view/track/track.ts":8,"./tests/container.test.ts":70,"./tests/element.test.ts":71,"./tests/pop-up.test.ts":72,"./tests/progress-bar.test.ts":73,"./tests/scale.test.ts":74,"./tests/simple-slider-controller.test.ts":75,"./tests/simple-slider-model.test.ts":76,"./tests/simple-slider-view.test.ts":77,"./tests/subject.test.ts":78,"./tests/thumb.test.ts":79,"./tests/track.test.ts":80};function o(e){var t=l(e);return s(t)}function l(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=l,e.exports=o,o.id=54},function(e,t,s){"use strict";(function(e){const t=document.querySelector(".add-new-slider-btn");let s=document.querySelector(".help-image");const i=document.querySelector(".button-wrapper");function o(e){e.remove(),0===document.querySelectorAll(".slider-wrapper").length&&(null==t||t.classList.add("add-new-slider-btn_margin-top"))}null==t||t.addEventListener("click",(function(){if(null!==i){null==s||s.remove(),s=null,null==t||t.classList.remove("add-new-slider-btn_margin-top");const l=document.createElement("div");l.classList.add("slider-wrapper"),i.before(l);const n=document.createElement("span");n.classList.add("material-icons","remove-slider-button__icon"),n.innerText="clear";const a=document.createElement("button");a.classList.add("remove-slider-button"),a.append(n),a.addEventListener("click",o.bind(a,l)),l.append(a),e(l).simpleSlider().controlPanel()}}))}).call(this,s(5))},function(e,t,s){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(14)),l=i(s(19)),n=i(s(20));(e=>{const t={init(){return this.each((function(){const t=new o.default(this),s=new l.default(e(this));new n.default(t,s)}))}};e.fn.controlPanel=function(s,i){let o;return"string"==typeof s&&t[s]?o=t[s].call(this,i):"object"!=typeof s&&s?(e.error(`Метод с именем ${s} не существует для jQuery.controlPanel`),o=this):o=t.init.call(this,i),o}})(e)}).call(this,s(5))},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.control=document.createElement("div"),this.field=document.createElement("input"),this.label=document.createElement("label"),this.init(e)}getControl(){return this.control}getValue(){return parseInt(this.field.value,10)}setValue(e){this.field.value=""+e}init(e){this.control.classList.add("slider-panel__text-field-control"),this.field.type="number",this.field.classList.add("control-panel__text-field"),this.field.addEventListener("blur",this.reportChanges.bind(this)),this.field.onkeypress=l.removeNonDigitChar,this.label.classList.add("slider-panel__text-field-label"),this.label.innerText=e,this.label.append(this.field),this.control.append(this.label)}reportChanges(){this.notify("controlPanelDataUpdated")}static removeNonDigitChar(e){return/[-\d]/.test(e.key)}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0},this.orientation=e.orientation,this.type=e.type,this.scale=e.scale,this.popUps=e.popUps,this.min=e.min,this.max=e.max,this.step=e.step}setSliderSize(){return this.TEST_OK}setThumbSize(){return this.TEST_OK}setThumbPosOnClickPos(){return this.TEST_OK}getOrientation(){return this.orientation}getType(){return this.type}getPopUpsState(){return this.popUps}getThumbsPos(){return this.TEST_OK}getPopUpsParams(){return this.TEST_OK}getProgressBarParams(){return this.TEST_OK}updateThumbsState(){return this.TEST_OK}getScaleState(){return this.scale}getMin(){return this.min}getMax(){return this.max}getStep(){return this.step}getScalePoints(){return this.TEST_OK}}},function(e,t,s){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(3)),l=i(s(6)),n=i(s(4));(e=>{const t={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},s={init(s){const i=e.extend(t,s);return this.each((function(){const t=new o.default(i),s=new n.default(this),a=new l.default({model:t,view:s});e(this).data("settings",i),e(this).data("controller",a),e(this).data("model",t)}))},getModelSubject(){return e(this).data().model.subject},getThumbsValues(){return e(this).data().model.getThumbsValues()},getMin(){return e(this).data().model.getMin()},getMax(){return e(this).data().model.getMax()},getStep(){return e(this).data().model.getStep()},getScaleState(){return e(this).data().model.getScaleState()},getPopUpsState(){return e(this).data().model.getPopUpsState()},getType(){return e(this).data().model.getType()},getOrientation(){return e(this).data().model.getOrientation()},refreshSliderState(t){e(this).data().model.refreshSliderState(t)}};e.fn.simpleSlider=function(t,i){let o;return"string"==typeof t&&s[t]?o=s[t].call(this,i):"object"!=typeof t&&t?(e.error(`Метод с именем ${t} не существует для jQuery.simpleSlider`),o=this):o=s.init.call(this,t),o}})(e)}).call(this,s(5))},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0},this.wrapper=e}getSliderSize(){return this.TEST_OK}getThumbSize(){return this.TEST_OK}getThumbsPos(){return this.TEST_OK}getTrackClickPosition(){return this.TEST_OK}getScaleClickPosition(){return this.TEST_OK}switchToHorizontal(){return this.TEST_OK}switchToVertical(){return this.TEST_OK}switchToSingle(){return this.TEST_OK}switchToRange(){return this.TEST_OK}enablePopUps(){return this.TEST_OK}disablePopUps(){return this.TEST_OK}enableScale(){return this.TEST_OK}disableScale(){return this.TEST_OK}getScalePointSize(){return this.TEST_OK}addScalePoints(){return this.TEST_OK}updateThumbs(){return this.TEST_OK}updatePopUps(){return this.TEST_OK}updateProgressBar(){return this.TEST_OK}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../element/element");class l extends o.default{constructor(){super("slider"),this.TEST_OK=!0}append(e){this.element.append(e)}resetMargins(){return this.TEST_OK}setMargins(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0};const t=document.createElement("div");this.element=t,this.mainClass=e,this.element.classList.add(""+e)}getPosition(){return this.TEST_OK}getElement(){return this.element}getSize(){return this.TEST_OK}switchToHorizontal(){this.element.classList.remove(this.mainClass+"_vertical"),this.element.classList.add(this.mainClass+"_horizontal")}switchToVertical(){this.element.classList.remove(this.mainClass+"_horizontal"),this.element.classList.add(this.mainClass+"_vertical")}remove(){this.element.remove()}getOrientation(){return this.TEST_OK}getRect(){return this.TEST_OK}getStyle(){return this.TEST_OK}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../element/element");class l extends o.default{constructor(){super("slider__pop-up"),this.TEST_OK=!0}update(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../element/element");class l extends o.default{constructor(){super("slider__progress-bar"),this.TEST_OK=!0}update(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../element/element");class l extends o.default{constructor(){super("slider__scale"),this.TEST_OK=!0}getPointSize(){return this.TEST_OK}addPoints(e){for(let t=0;t<e.length;t+=1){const e=document.createElement("div");e.classList.add("scale-point"),this.element.append(e)}}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../element/element");class l extends o.default{constructor(){super("slider__thumb"),this.TEST_OK=!0}resetZIndex(){return this.TEST_OK}moveTo(){return this.TEST_OK}register(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../element/element");class l extends o.default{constructor(){super("slider__track")}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(7));let l;beforeEach(()=>{l=new o.default}),describe("Append",()=>{test("Container should contain element with class new-elem",()=>{const e=document.createElement("div");e.classList.add("new-elem"),l.append(e),expect(l.getElement().querySelector(".new-elem")).not.toBeNull()}),test("Container should contain element with class second-elem",()=>{const e=document.createElement("div");e.classList.add("second-elem"),l.append(e),expect(l.getElement().querySelector(".second-elem")).not.toBeNull()})}),describe("Set margins",()=>{test("Container margins should be {left: 25, top: 77, right: 13, bottom: 2}",()=>{l.setMargins({left:25,top:77,right:13,bottom:2}),expect(l.element.style.marginLeft).toBe("25px"),expect(l.element.style.marginTop).toBe("77px"),expect(l.element.style.marginRight).toBe("13px"),expect(l.element.style.marginBottom).toBe("2px")}),test("Container margins should be {left: 84, top: 97, right: 67, bottom: 73}",()=>{l.setMargins({left:84,top:97,right:67,bottom:73}),expect(l.element.style.marginLeft).toBe("84px"),expect(l.element.style.marginTop).toBe("97px"),expect(l.element.style.marginRight).toBe("67px"),expect(l.element.style.marginBottom).toBe("73px")})}),describe("Reset margins",()=>{test("Container margins should be {left: 0, top: 0, right: 0, bottom: 0}",()=>{l.setMargins({left:25,top:77,right:13,bottom:2}),l.resetMargins(),expect(l.element.style.marginLeft).toBe("0px"),expect(l.element.style.marginTop).toBe("0px"),expect(l.element.style.marginRight).toBe("0px"),expect(l.element.style.marginBottom).toBe("0px")}),test("Container margins should be {left: 0px, top: 0, right: 0, bottom: 0}",()=>{l.setMargins({left:84,top:97,right:67,bottom:73}),l.resetMargins(),expect(l.element.style.marginLeft).toBe("0px"),expect(l.element.style.marginTop).toBe("0px"),expect(l.element.style.marginRight).toBe("0px"),expect(l.element.style.marginBottom).toBe("0px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));let l;Object.defineProperties(window.HTMLElement.prototype,{offsetLeft:{get:function(){return parseFloat(window.getComputedStyle(this).marginLeft)||0}},offsetTop:{get:function(){return parseFloat(window.getComputedStyle(this).marginTop)||0}},offsetHeight:{get:function(){return parseFloat(window.getComputedStyle(this).height)||0}},offsetWidth:{get:function(){return parseFloat(window.getComputedStyle(this).width)||0}}}),beforeEach(()=>{l=new o.default("some-element")}),describe("Constructor",()=>{test("Element should have a class some-element",()=>{expect(l.element.classList.contains("some-element")).toBe(!0)}),test("Element should have a class some-element_horizontal",()=>{expect(l.element.classList.contains("some-element_horizontal")).toBe(!0)}),test("Element should have a class some-element_vertical",()=>{l=new o.default("some-element","vertical"),expect(l.element.classList.contains("some-element_vertical")).toBe(!0)})}),describe("Set position and get position",()=>{test("Element position should be {left: 80, top: 20}",()=>{const e=document.createElement("div");e.style.left="100px",e.style.top="40px",e.append(l.getElement()),l.setPosition({left:80,top:20}),expect(l.getPosition().left).toBe(80),expect(l.getPosition().top).toBe(20)}),test("Element position should be {left: 20, top: 10}",()=>{l.setPosition({left:20,top:10}),expect(l.getPosition().left).toBe(20),expect(l.getPosition().top).toBe(10)})}),describe("Get element",()=>{test("Element should be exist",()=>{expect(l.getElement()).not.toBeNull()}),test("Element should be exist",()=>{l=new o.default("some-element","vertical"),expect(l.getElement()).not.toBeNull()})}),describe("Get size",()=>{test("Element size should be {width: 400, height: 50}",()=>{l.element.style.width="400px",l.element.style.height="50px",expect(l.getSize().width).toBe(400),expect(l.getSize().height).toBe(50)}),test("Element size should be {width: 250, height: 40}",()=>{l.element.style.width="250px",l.element.style.height="40px",expect(l.getSize().width).toBe(250),expect(l.getSize().height).toBe(40)})}),describe("Switch to horizontal",()=>{test("Element should be not contain class some-element_vertical",()=>{l=new o.default("some-element","vertical"),l.switchToHorizontal(),expect(l.element.classList.contains("some-element_vertical")).toBe(!1)}),test("Element should be contain class some-element_horizontal",()=>{l=new o.default("some-element","vertical"),l.switchToHorizontal(),expect(l.element.classList.contains("some-element_horizontal")).toBe(!0)})}),describe("Switch to vertical",()=>{test("Element should be not contain class some-element_horizontal",()=>{l.switchToVertical(),expect(l.element.classList.contains("some-element_horizontal")).toBe(!1)}),test("Element should be contain class some-element_vertical",()=>{l.switchToVertical(),expect(l.element.classList.contains("some-element_vertical")).toBe(!0)})}),describe("Remove",()=>{test("Element should be not exist in the DOM",()=>{const e=document.querySelector("body");null==e||e.append(l.getElement()),l.remove(),expect(document.querySelector(".some-element")).toBe(null)})}),describe("Get orientation",()=>{test("Element orientation should be horizontal",()=>{expect(l.getOrientation()).toBe("horizontal")}),test("Element orientation should be vertical",()=>{l=new o.default("some-element","vertical"),expect(l.getOrientation()).toBe("vertical")})}),describe("Get rect",()=>{test("Element rect should be {top: 40, left: 45, bottom: 50, right: 55}",()=>{l.element.getBoundingClientRect=jest.fn(()=>({width:120,height:120,top:40,left:45,bottom:50,right:55,x:35,y:48,toJSON:()=>null})),expect(l.getRect().top).toBe(40),expect(l.getRect().left).toBe(45),expect(l.getRect().bottom).toBe(50),expect(l.getRect().right).toBe(55)}),test("Element rect should be {top: 11, left: 49, bottom: 60, right: 5}",()=>{l.element.getBoundingClientRect=jest.fn(()=>({width:120,height:120,top:11,left:49,bottom:60,right:5,x:35,y:48,toJSON:()=>null})),expect(l.getRect().top).toBe(11),expect(l.getRect().left).toBe(49),expect(l.getRect().bottom).toBe(60),expect(l.getRect().right).toBe(5)})}),describe("Get style",()=>{test("Element width style should be 138px",()=>{l.element.style.width="138px",expect(l.getStyle("width")).toBe("138px")}),test('Element width style should be ""',()=>{expect(l.getStyle("someStyle")).toBe("")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(10));let l;beforeEach(()=>{l=new o.default}),describe("Update",()=>{test("Popup value should be 50",()=>{l.update({value:50,position:{left:30,top:50}}),expect(l.getElement().innerHTML).toBe("50")}),test("Popup value should be 120",()=>{l.update({value:120,position:{left:30,top:50}}),expect(l.getElement().innerHTML).toBe("120")}),test("Popup position should be { left: 30, top: 50 }",()=>{l.update({value:50,position:{left:30,top:50}}),expect(l.getElement().style.left).toBe("30px"),expect(l.getElement().style.top).toBe("50px")}),test("Popup position should be { left: 90, top: 14 }",()=>{l.update({value:50,position:{left:90,top:14}}),expect(l.getElement().style.left).toBe("90px"),expect(l.getElement().style.top).toBe("14px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(11));let l;beforeEach(()=>{l=new o.default}),describe("Update",()=>{test("progressBar left should be 10px",()=>{null==l||l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(null==l?void 0:l.getElement().style.left).toBe("10px")}),test("progressBar top should be 5px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getElement().style.top).toBe("5px")}),test("progressBar width should be 50px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getElement().style.width).toBe("50px")}),test("progressBar height should be 30px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getElement().style.height).toBe("30px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(12));let l;const n=e=>{e.initMouseEvent("click",!0,!0,window,0,50,80,50,80,!1,!1,!1,!1,0,null)};beforeEach(()=>{l=new o.default}),describe("Click on scale",()=>{test("SetPosition method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l,"setPosition");n(e),l.element.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l.subject,"notify");n(e),l.element.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Scale position should be {left: 50, top: 80}",()=>{const e=document.createEvent("MouseEvent");n(e),l.element.dispatchEvent(e),expect(l.getPosition().left).toBe(50),expect(l.getPosition().top).toBe(80)})}),describe("Add points",()=>{test("The number of added points should be 3",()=>{l.addPoints([{position:{left:50,top:100},size:{width:400,height:20},value:10},{position:{left:50,top:100},size:{width:400,height:20},value:10},{position:{left:50,top:100},size:{width:400,height:20},value:10}]),expect(l.element.querySelectorAll(".slider__scale-point").length).toBe(3)}),test("Scale point size should be {left: 50px, top: 100px}",()=>{l.addPoints([{position:{left:50,top:100},size:{width:400,height:20},value:10}]);const e=l.element.querySelector(".slider__scale-point");expect(null==e?void 0:e.style.left).toBe("50px"),expect(null==e?void 0:e.style.top).toBe("100px")}),test("Scale width should be 30px",()=>{l=new o.default("vertical");l.addPoints([{position:{left:50,top:100},size:{width:30,height:20},value:10}]),expect(l.element.style.width).toBe("30px")}),test("Scale should contain an element with the slider__scale-point-label class",()=>{l.addPoints([{position:{left:50,top:100},size:{width:0,height:0},value:10}]),expect(l.element.querySelector(".slider__scale-point-label")).not.toBe(null)}),test("Scale should contain an element with the slider__scale-point-marker class",()=>{l.addPoints([{position:{left:50,top:100},size:{width:0,height:0},value:10}]),expect(l.element.querySelector(".slider__scale-point-marker")).not.toBe(null)})}),describe("Get point size",()=>{test("Scale point size should be {width: 0, height: 0}",()=>{expect(l.getPointSize(10).width).toBe(0),expect(l.getPointSize(10).height).toBe(0)}),test("Scale point size should be {width: 0, height: 0}",()=>{l.remove(),expect(l.getPointSize(10).width).toBe(0),expect(l.getPointSize(10).height).toBe(0)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(6)),l=i(s(3)),n=i(s(4));let a,r,h,c,u;jest.mock("../plugins/simple-slider/model/simple-slider-model"),jest.mock("../plugins/simple-slider/view/simple-slider-view"),beforeEach(()=>{u={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},c=document.createElement("div"),h=new n.default(c),r=new l.default(u),a=new o.default({model:r,view:h})}),describe("Init method",()=>{test("The setSliderSize method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setSliderSize");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The setThumbSize method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbSize");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToHorizontal method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToHorizontal");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToVertical method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToVertical");u.orientation="vertical",r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToSingle method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToSingle");u.type="single",r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToRange method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToRange");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The enablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enablePopUps");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The disablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"disablePopUps");u.popUps=!1,r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)})}),describe("Update method",()=>{test("The updateThumbsState method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("thumbIsDragged"),expect(e).toBeCalledTimes(1)}),test("The setThumbPosOnClickPos method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbPosOnClickPos");a.update("clickToTrack"),expect(e).toBeCalledTimes(1)}),test("The setThumbPosOnClickPos method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbPosOnClickPos");a.update("clickToScale"),expect(e).toBeCalledTimes(1)}),test("The init method from the SimpleSliderController class should be called once",()=>{const e=spyOn(a,"init");a.update("windowResized"),expect(e).toBeCalledTimes(1)}),test("Other methods should not be called",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("emptyEvent"),expect(e).toBeCalledTimes(0);const t=jest.spyOn(r,"setThumbPosOnClickPos");a.update("emptyEvent"),expect(t).toBeCalledTimes(0);const s=spyOn(a,"updateThumbsPos");a.update("emptyEvent"),expect(s).toBeCalledTimes(0);const i=spyOn(a,"updateView");a.update("emptyEvent"),expect(i).toBeCalledTimes(0);const o=spyOn(a,"updateSliderOrientation");a.update("emptyEvent"),expect(o).toBeCalledTimes(0);const l=spyOn(a,"updateSliderType");a.update("emptyEvent"),expect(l).toBeCalledTimes(0);const n=spyOn(a,"updateScaleState");a.update("emptyEvent"),expect(n).toBeCalledTimes(0);const h=spyOn(a,"updatePopUpsSate");a.update("emptyEvent"),expect(h).toBeCalledTimes(0)})}),describe("Update view method",()=>{test("The updateThumbsState method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("minIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The enableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enableScale");a.update("maxIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The addScalePoints method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"addScalePoints");a.update("stepIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The disableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"disableScale");u.scale=!1,r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)})}),describe("Update thumbs pos",()=>{test("The updateThumbs method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updateThumbs");a.update("thumbsPosIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The updatePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updatePopUps");a.update("thumbsPosIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The updateProgressBar method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updateProgressBar");a.update("thumbsPosIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update slider orientation",()=>{test("The switchToHorizontal method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToHorizontal");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The switchToVertical method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"switchToVertical");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToHorizontal method from the SimpleSliderView class should not be called",()=>{r.orientation="vertical";const e=jest.spyOn(h,"switchToHorizontal");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToVertical method from the SimpleSliderView class should be called once",()=>{r.orientation="vertical";const e=jest.spyOn(h,"switchToVertical");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update slider type",()=>{test("The switchToRange method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToRange");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The switchToSingle method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"switchToSingle");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToRange method from the SimpleSliderView class should not be called",()=>{r.type="single";const e=jest.spyOn(h,"switchToRange");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToSingle method from the SimpleSliderView class should be called once",()=>{r.type="single";const e=jest.spyOn(h,"switchToSingle");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update scale state",()=>{test("The enableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(2)}),test("The disableScale method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"disableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The enableScale method from the SimpleSliderView class should not be called",()=>{r.scale=!1;const e=jest.spyOn(h,"enableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The disableScale method from the SimpleSliderView class should be called once",()=>{r.scale=!1;const e=jest.spyOn(h,"disableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update pop ups sate",()=>{test("The enablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The disablePopUps method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"disablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The enablePopUps method from the SimpleSliderView class should not be called",()=>{r.popUps=!1;const e=jest.spyOn(h,"enablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The disablePopUps method from the SimpleSliderView class should be called once",()=>{r.popUps=!1;const e=jest.spyOn(h,"disablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(1)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(3));let l,n;beforeEach(()=>{l={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},n=new o.default(l),n.refreshSliderState(l)}),describe("Refresh slider state",()=>{test("SliderSize should be {width: 500, height: 10}",()=>{delete l.sliderSize,n.refreshSliderState(l),expect(n.sliderSize.width).toBe(500),expect(n.sliderSize.height).toBe(10)}),test("ThumbSize should be {width: 20, height: 20}",()=>{delete l.thumbSize,n.refreshSliderState(l),expect(n.thumbSize.width).toBe(20),expect(n.thumbSize.height).toBe(20)}),test("Orientation should be vertical",()=>{l.orientation="vertical",n.refreshSliderState(l),expect(n.orientation).toBe("vertical")}),test("Type should be single",()=>{l.type="single",n.refreshSliderState(l),expect(n.type).toBe("single")}),test("ThumbTwoValue should be equal thumbValueOne",()=>{l.type="single",l.thumbOneValue=9,n.refreshSliderState(l),l.type="range",l.thumbOneValue=10,n.refreshSliderState(l),expect(n.thumbOneValue===n.thumbTwoValue).toBe(!0)}),test("Scale should be false",()=>{l.scale=!1,n.refreshSliderState(l),expect(n.scale).toBe(!1)}),test("PopUps should be false",()=>{l.popUps=!1,n.refreshSliderState(l),expect(n.popUps).toBe(!1)}),test("Min should be 7",()=>{l.min=7,n.refreshSliderState(l),expect(n.min).toBe(7)}),test("Min should be 10",()=>{l.min=50,n.refreshSliderState(l),expect(n.min).toBe(9)}),test("Max should be 40",()=>{l.max=40,n.refreshSliderState(l),expect(n.max).toBe(40)}),test("Max should be 0",()=>{l.max=-50,n.refreshSliderState(l),expect(n.max).toBe(1)}),test("Step should be 8",()=>{l.step=8,n.refreshSliderState(l),expect(n.step).toBe(8)}),test("Step should be 1",()=>{l.step=0,n.refreshSliderState(l),expect(n.step).toBe(1)}),test("ThumbOneValue should be 6",()=>{l.thumbOneValue=6,n.refreshSliderState(l),expect(n.thumbOneValue).toBe(6)}),test("ThumbTwoValue should be 10",()=>{l.thumbTwoValue=10,n.refreshSliderState(l),expect(n.thumbTwoValue).toBe(10)}),test("SliderSize widh should be 300 and height 50",()=>{l.sliderSize={width:300,height:50},n.refreshSliderState(l),expect(n.sliderSize.width).toBe(300),expect(n.sliderSize.height).toBe(50)}),test("ThumbSize widh should be 750 and height 35",()=>{l.thumbSize={width:750,height:35},n.refreshSliderState(l),expect(n.thumbSize.width).toBe(750),expect(n.thumbSize.height).toBe(35)})}),describe("Update thumbs state",()=>{test("Should be thumbOne: 5 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:250,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(5),expect(n.thumbTwoValue).toBe(9)}),test("Should be thumbOne: 3 and thumbTwo: 7",()=>{n.updateThumbsState({thumbOne:{left:450,top:0},thumbTwo:{left:250,top:0}}),expect(n.thumbOneValue).toBe(3),expect(n.thumbTwoValue).toBe(7)}),test("Should be thumbOne: 0 and thumbTwo: 0",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);n.updateThumbsState({thumbOne:{left:250,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(0)}),test("Should be thumbOne: 0 and thumbTwo: 0",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);n.updateThumbsState({thumbOne:{left:0,top:100},thumbTwo:{left:0,top:400}}),expect(n.thumbOneValue).toBe(2),expect(n.thumbTwoValue).toBe(8)}),test("Should be thumbOne: 0 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:-45,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(9)})}),describe("Set slider size",()=>{test("Should be {width: 80, height: 15}",()=>{n.setSliderSize({width:80,height:15}),expect(n.sliderSize.width).toBe(80),expect(n.sliderSize.height).toBe(15)}),test("Should be {width: 0, height: 15}",()=>{n.setSliderSize({width:-80,height:15}),expect(n.sliderSize.width).toBe(0),expect(n.sliderSize.height).toBe(15)}),test("Should be {width: 80, height: 0}",()=>{n.setSliderSize({width:80,height:0}),expect(n.sliderSize.width).toBe(80),expect(n.sliderSize.height).toBe(0)}),test("Should be {width: 500, height: 0}",()=>{n.setSliderSize({width:500,height:-20}),expect(n.sliderSize.width).toBe(500),expect(n.sliderSize.height).toBe(0)})}),describe("Set thumb size",()=>{test("Should be {width: 80, height: 15}",()=>{n.setThumbSize({width:80,height:15}),expect(n.thumbSize.width).toBe(80),expect(n.thumbSize.height).toBe(15)}),test("Should be {width: 0, height: 15}",()=>{n.setThumbSize({width:-80,height:15}),expect(n.thumbSize.width).toBe(0),expect(n.thumbSize.height).toBe(15)}),test("Should be {width: 80, height: 0}",()=>{n.setThumbSize({width:80,height:0}),expect(n.thumbSize.width).toBe(80),expect(n.thumbSize.height).toBe(0)})}),describe("Set thumb values",()=>{test("Should be {thumbOne: 1, thumbTwo: 8}",()=>{n.setThumbsValues({thumbOne:1,thumbTwo:8}),expect(n.thumbOneValue).toBe(1),expect(n.thumbTwoValue).toBe(8)}),test("Should be {thumbOne: 0, thumbTwo: 10}",()=>{n.setThumbsValues({thumbOne:-5,thumbTwo:15}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(10)}),test("Should be {thumbOne: 3, thumbTwo: 7}",()=>{n.setThumbsValues({thumbOne:9,thumbTwo:7}),expect(n.thumbOneValue).toBe(3),expect(n.thumbTwoValue).toBe(7)}),test("Should be {thumbOne: 3, thumbTwo: 7}",()=>{n.setThumbsValues({thumbOne:3,thumbTwo:1}),expect(n.thumbOneValue).toBe(3),expect(n.thumbTwoValue).toBe(7)})}),describe("Get min",()=>{test("Should be 0",()=>{expect(n.getMin()).toBe(0)}),test("Should be 2",()=>{l.min=2,n=new o.default(l),expect(n.getMin()).toBe(2)})}),describe("Get max",()=>{test("Should be 10",()=>{expect(n.getMax()).toBe(10)}),test("Should be 5",()=>{l.max=5,n=new o.default(l),expect(n.getMax()).toBe(5)})}),describe("Get step",()=>{test("Should be 1",()=>{expect(n.getStep()).toBe(1)}),test("Should be 2",()=>{l.step=2,n=new o.default(l),expect(n.getStep()).toBe(2)})}),describe("Get scale state",()=>{test("Should be true",()=>{expect(n.getScaleState()).toBe(!0)}),test("Should be false",()=>{l.scale=!1,n=new o.default(l),expect(n.getScaleState()).toBe(!1)})}),describe("Get pop-ups state",()=>{test("Should be true",()=>{expect(n.getPopUpsState()).toBe(!0)}),test("Should be false",()=>{l.popUps=!1,n=new o.default(l),expect(n.getPopUpsState()).toBe(!1)})}),describe("Get type",()=>{test("Should be range",()=>{expect(n.getType()).toBe("range")}),test("Should be single",()=>{l.type="single",n=new o.default(l),expect(n.getType()).toBe("single")})}),describe("Get orientation",()=>{test("Should be horizontal",()=>{expect(n.getOrientation()).toBe("horizontal")}),test("Should be vertical",()=>{l.orientation="vertical",n=new o.default(l),expect(n.getOrientation()).toBe("vertical")})}),describe("Get progress bar params",()=>{test("Should be position: {{left: 100, top: 0} and size: {width: 212, height: 10}}",()=>{const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(144,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(212,0),expect(e.size.height).toBeCloseTo(10,0)}),test("Should be position: {{left: 0, top: 100} and size: {width: 10, height: 212}}",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(144,0),expect(e.size.width).toBeCloseTo(10,0),expect(e.size.height).toBeCloseTo(212,0)}),test("Should be position: {{left: 0, top: 0} and size: {width: 164, height: 10}}",()=>{l.type="single",n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(164,0),expect(e.size.height).toBeCloseTo(10,0)}),test("Should be position: {{left: 0, top: 0} and size: {width: 10, height: 239}}",()=>{l.orientation="vertical",l.type="single",l.sliderSize={width:10,height:750},n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(10,0),expect(e.size.height).toBeCloseTo(239,0)})}),describe("Get thumbs positions",()=>{test("Should be thumbOne: {left: 126, top: 0} and thumbTwo: {left: 294, top: 0}",()=>{n.sliderSize={width:440,height:10},n.thumbSize={width:20,height:20};const e=n.getThumbsPos();expect(e.thumbOne.left).toBeCloseTo(126),expect(e.thumbOne.top).toBe(0),expect(e.thumbTwo).not.toBe(null),null!==e.thumbTwo&&(expect(e.thumbTwo.left).toBeCloseTo(294),expect(e.thumbTwo.top).toBe(0))}),test("Should be thumbOne: {left: 0, top: 0} and thumbTwo: {left: 0, top: 420}",()=>{n.orientation="vertical",n.sliderSize={width:440,height:440},n.thumbSize={width:20,height:20},n.thumbOneValue=-5,n.thumbTwoValue=77;const e=n.getThumbsPos();expect(e.thumbOne.left).toBe(0),expect(e.thumbOne.top).toBe(0),expect(e.thumbTwo).not.toBe(null),null!==e.thumbTwo&&(expect(e.thumbTwo.left).toBeCloseTo(0),expect(e.thumbTwo.top).toBe(420))})}),describe("Get pop ups params",()=>{test("Should be posOne: {left: 154, top: 0} and posTwo: {left: 346, top: 0}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.position.left).toBeCloseTo(154,0),expect(e.popUpOne.position.top).toBeCloseTo(0,0),expect(e.popUpTwo.position.left).toBeCloseTo(346,0),expect(e.popUpTwo.position.top).toBeCloseTo(0,0)}),test("Should be popUpOne: 3 and popUpTwo: 7}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.value).toBe(3),expect(e.popUpTwo.value).toBe(7)}),test("Should be posOne: {left: 0, top: 154} and posTwo: {left: 0, top: 346}",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);const e=n.getPopUpsParams();expect(e.popUpOne.position.left).toBeCloseTo(0,0),expect(e.popUpOne.position.top).toBeCloseTo(154,0),expect(e.popUpTwo.position.left).toBeCloseTo(0,0),expect(e.popUpTwo.position.top).toBeCloseTo(346,0)}),test("Should be popUpOne: 3 and popUpTwo: 7}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.value).toBe(3),expect(e.popUpTwo.value).toBe(7)})}),describe("Get thumb values",()=>{test("Should be {thumbOne: 3, thumbTwo: 7}",()=>{expect(n.getThumbsValues().thumbOne).toBe(3),expect(n.getThumbsValues().thumbTwo).toBe(7)}),test("Should be {thumbOne: 5, thumbTwo: 9}",()=>{n.setThumbsValues({thumbOne:5,thumbTwo:9}),expect(n.getThumbsValues().thumbOne).toBe(5),expect(n.getThumbsValues().thumbTwo).toBe(9)})}),describe("Get scale points",()=>{test("Length of the scale points array should be 11",()=>{const e=n.getScalePoints({width:10,height:10});expect(e.length).toBe(11)}),test("The value of the 5th element of the array of scale points should be 5",()=>{const e=n.getScalePoints({width:10,height:10});expect(e[5].value).toBe(5)}),test("The size of the 5th element of the array of scale points should be {width: 10, height: 10}",()=>{const e=n.getScalePoints({width:10,height:10});expect(e[5].size.width).toBe(10),expect(e[5].size.height).toBe(10)}),test("The position of the 5th element of the array of scale points should be {left: 0, top: 20}",()=>{const e=n.getScalePoints({width:10,height:10});expect(e[5].position.left).toBe(245),expect(e[5].position.top).toBe(0)}),test("Length of the scale points array should be 14",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},l.max=13,n.refreshSliderState(l);const e=n.getScalePoints({width:10,height:10});expect(e.length).toBe(14)}),test("Length of the scale points array should be 45",()=>{l.max=354,n.refreshSliderState(l);const e=n.getScalePoints({width:10,height:10});expect(e.length).toBe(45)}),test("Length of the scale points array should be 25",()=>{l.max=354,l.step=15,n.refreshSliderState(l);const e=n.getScalePoints({width:10,height:10});expect(e.length).toBe(25)})}),describe("Set thumb position on click position",()=>{test("ThumbOne position value should be 3",()=>{n.setThumbPosOnClickPos({left:100,top:0}),expect(n.getThumbsValues().thumbOne).toBe(2)}),test("ThumbTwo should be not change position",()=>{n.setThumbPosOnClickPos({left:100,top:0}),expect(n.getThumbsValues().thumbTwo).toBe(7)}),test("ThumbOne should be not change position",()=>{n.setThumbPosOnClickPos({left:100,top:0}),expect(n.getThumbsValues().thumbOne).toBe(2)}),test("ThumbTwo position value should be 8",()=>{n.setThumbPosOnClickPos({left:400,top:0}),expect(n.getThumbsValues().thumbTwo).toBe(8)}),test("ThumbTwo position value should be 8",()=>{l.type="single",n.refreshSliderState(l),n.setThumbPosOnClickPos({left:400,top:0}),expect(n.getThumbsValues().thumbOne).toBe(8)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(4));let l,n;jest.mock("../plugins/simple-slider/view/container/container"),jest.mock("../plugins/simple-slider/view/track/track"),jest.mock("../plugins/simple-slider/view/thumb/thumb"),jest.mock("../plugins/simple-slider/view/pop-up/pop-up"),jest.mock("../plugins/simple-slider/view/progress-bar/progress-bar"),jest.mock("../plugins/simple-slider/view/scale/scale"),beforeEach(()=>{l=document.createElement("div"),n=new o.default(l)}),describe("Window resize",()=>{test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify"),t=new window.Event("resize");window.dispatchEvent(t),expect(e).toBeCalledTimes(1)})}),describe("Assemble slider",()=>{test("Wrapper should be contain a slider element",()=>{expect(l.querySelector(".slider")).not.toBeNull()}),test("Wrapper should be contain a track element",()=>{expect(l.querySelector(".slider__track")).not.toBeNull()}),test("Wrapper should be contain a thumb element",()=>{expect(l.querySelector(".slider__thumb")).not.toBeNull()}),test("Wrapper should be contain a pop-up element",()=>{expect(l.querySelector(".slider__pop-up")).not.toBeNull()}),test("Wrapper should be contain a progress-bar element",()=>{expect(l.querySelector(".slider__progress-bar")).not.toBeNull()}),test("Wrapper should be contain a scale element",()=>{expect(l.querySelector(".slider__scale")).not.toBeNull()}),test("Wrapper should be contain a slider element",()=>{n.container.remove(),n.thumbTwo=null,n.popUpOne=null,n.popUpTwo=null,n.scale=null,n.assembleSlider(),expect(l.querySelector(".slider")).not.toBeNull()})}),describe("Update method",()=>{test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("thumbIsDragged"),expect(e).toBeCalledTimes(1)}),test("The resetZIndex method of the thumbOne object should be called once",()=>{const e=spyOn(n.thumbOne,"resetZIndex");n.update("thumbIsCatched"),expect(e).toBeCalledTimes(1)}),test("The resetZIndex method of thumbTwo must be called twice",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"resetZIndex");n.update("thumbIsCatched"),n.update("thumbIsCatched"),expect(e).toBeCalledTimes(2)}}),test("Notify method of the SimpleSliderView class not should be called",()=>{const e=spyOn(n.subject,"notify");n.update("emptyEvent"),expect(e).toBeCalledTimes(0)}),test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("clickToTrack"),expect(e).toBeCalledTimes(1)}),test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("clickToScale"),expect(e).toBeCalledTimes(1)})}),describe("Switch to horizontal",()=>{test("The container must contain a class slider_horizontal",()=>{n.switchToHorizontal(),expect(n.container.getElement().classList.contains("slider_horizontal")).toBe(!0)}),test("The track must contain a class slider__track_horizontal",()=>{n.switchToHorizontal(),expect(n.track.getElement().classList.contains("slider__track_horizontal")).toBe(!0)}),test("The thumbOne must contain a class slider__thumb_horizontal",()=>{n.switchToHorizontal(),expect(n.thumbOne.getElement().classList.contains("slider__thumb_horizontal")).toBe(!0)}),test("The thumbTwo must contain a class slider__thumb_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.thumbTwo)||void 0===e?void 0:e.getElement().classList.contains("slider__thumb_horizontal")).toBe(!0)}),test("The popUpOne must contain a class slider__pop-up_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.popUpOne)||void 0===e?void 0:e.getElement().classList.contains("slider__pop-up_horizontal")).toBe(!0)}),test("The popUpTwo must contain a class slider__pop-up_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.popUpTwo)||void 0===e?void 0:e.getElement().classList.contains("slider__pop-up_horizontal")).toBe(!0)}),test("The progressBar must contain a class slider__progress-bar_horizontal",()=>{n.switchToHorizontal(),expect(n.progressBar.getElement().classList.contains("slider__progress-bar_horizontal")).toBe(!0)}),test("The scale must contain a class slider__scale_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.scale)||void 0===e?void 0:e.getElement().classList.contains("slider__scale_horizontal")).toBe(!0)})}),describe("Switch to vertical",()=>{test("The container must contain a class slider_vertical",()=>{n.switchToVertical(),expect(n.container.getElement().classList.contains("slider_vertical")).toBe(!0)}),test("The track must contain a class slider__track_horizontal",()=>{n.switchToVertical(),expect(n.track.getElement().classList.contains("slider__track_vertical")).toBe(!0)}),test("The thumbOne must contain a class slider__thumb_vertical",()=>{n.switchToVertical(),expect(n.thumbOne.getElement().classList.contains("slider__thumb_vertical")).toBe(!0)}),test("The thumbTwo must contain a class slider__thumb_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.thumbTwo)||void 0===e?void 0:e.getElement().classList.contains("slider__thumb_vertical")).toBe(!0)}),test("The popUpOne must contain a class slider__pop-up_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.popUpOne)||void 0===e?void 0:e.getElement().classList.contains("slider__pop-up_vertical")).toBe(!0)}),test("The popUpTwo must contain a class slider__pop-up_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.popUpTwo)||void 0===e?void 0:e.getElement().classList.contains("slider__pop-up_vertical")).toBe(!0)}),test("The progressBar must contain a class slider__progress-bar_vertical",()=>{n.switchToVertical(),expect(n.progressBar.getElement().classList.contains("slider__progress-bar_vertical")).toBe(!0)}),test("The scale must contain a class slider__scale_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.scale)||void 0===e?void 0:e.getElement().classList.contains("slider__scale_vertical")).toBe(!0)})}),describe("Switch to single",()=>{test("ThumbTwo should be null",()=>{n.switchToSingle(),expect(n.thumbTwo).toBeNull()})}),describe("Switch to range",()=>{test("ThumbTwo should be defined",()=>{n.switchToRange(),expect(n.thumbTwo).not.toBeNull()}),test("ThumbTwo should be defined",()=>{n.switchToSingle(),n.switchToRange(),expect(n.thumbTwo).not.toBeNull()}),test("ThumbTwo should be defined ana popUpTwo should be null",()=>{n.switchToSingle(),n.popUpOne=null,n.switchToRange(),expect(n.thumbTwo).not.toBeNull(),expect(n.popUpTwo).toBeNull()})}),describe("Disable pop ups",()=>{test("PopUpOne should be null",()=>{n.disablePopUps(),expect(n.popUpOne).toBeNull()}),test("PopUpTwo should be null",()=>{n.switchToRange(),n.disablePopUps(),expect(n.popUpTwo).toBeNull()})}),describe("Enable pop ups",()=>{test("PopUpOne should be defined",()=>{n.disablePopUps(),n.enablePopUps(),expect(n.popUpOne).toBeDefined()}),test("PopUpTwo should be null",()=>{n.switchToSingle(),n.enablePopUps(),expect(n.popUpTwo).toBeNull()}),test("PopUpTwo should be defined",()=>{n.switchToSingle(),n.switchToRange(),n.disablePopUps(),n.enablePopUps(),expect(n.popUpTwo).toBeDefined()})}),describe("Disable scale",()=>{test("Scale should be null",()=>{n.disableScale(),expect(n.scale).toBeNull()}),test("Scale should be null",()=>{n.enableScale(),n.disableScale(),expect(n.scale).toBeNull()})}),describe("Enable scale",()=>{test("Scale should be defined",()=>{n.enableScale(),n.enableScale(),expect(n.scale).toBeDefined()}),test("Scale should be defined",()=>{n.disableScale(),n.enableScale(),expect(n.scale).toBeDefined()})}),describe("Get thumb size",()=>{test("Should be true",()=>{expect(n.getThumbSize()).toBe(!0)})}),describe("Get slider size",()=>{test("Should be true",()=>{expect(n.getSliderSize()).toBe(!0)})}),describe("Get thumbs positions",()=>{test("ThumbOne should be true",()=>{expect(n.getThumbsPos().thumbOne).toBe(!0)}),test("ThumbTwo should be true",()=>{expect(n.getThumbsPos().thumbTwo).toBe(!0)}),test("ThumbTwo should be true",()=>{n.switchToSingle(),expect(n.getThumbsPos().thumbOne).toBe(!0)}),test("ThumbTwo should be true",()=>{n.switchToSingle(),expect(n.getThumbsPos().thumbTwo).toBe(null)})}),describe("Update thumbs",()=>{test("The moveTo method of the thumbOne object should be called once",()=>{const e=spyOn(n.thumbOne,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),expect(e).toBeCalledTimes(1)}),test("The moveTo method of the thumbTwo object must be called zero times",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:null}),expect(e).toBeCalledTimes(0)}}),test("The moveTo method of thumbTwo should be called twice",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),expect(e).toBeCalledTimes(2)}})}),describe("Update progress bar",()=>{test("The update method of the progressBar object should be called once",()=>{const e=spyOn(n.progressBar,"update");n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),expect(e).toBeCalledTimes(1)}),test("The update method of the progressBar object should be called twice",()=>{const e=spyOn(n.progressBar,"update");n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),expect(e).toBeCalledTimes(2)})}),describe("Update pop ups",()=>{test("The update method of the popUpOne object should be called once",()=>{let e;null!==n.popUpOne&&(e=spyOn(n.popUpOne,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeCalledTimes(1)}),test("The update method of the popUpTwo object should be called twice",()=>{let e;null!==n.popUpTwo&&(e=spyOn(n.popUpTwo,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeCalledTimes(2)}),test("The update method of the popUpOne object should be called zero times",()=>{let e,t;n.disablePopUps(),null!==n.popUpOne&&(e=spyOn(n.popUpOne,"update")),null!==n.popUpTwo&&(t=spyOn(n.popUpTwo,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeUndefined(),expect(t).toBeUndefined()})}),describe("Get scale point size",()=>{test("ScalePointSize should be {width: 0, height: 0}",()=>{n.disableScale(),expect(n.getScalePointSize(10).width).toBe(0),expect(n.getScalePointSize(10).height).toBe(0)}),test("ScalePointSize should be true",()=>{expect(n.getScalePointSize(10)).toBe(!0)})}),describe("Add scale point",()=>{test("The length of the scale points array must be 3",()=>{var e;n.addScalePoints([{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0}]),expect(null===(e=n.scale)||void 0===e?void 0:e.getElement().querySelectorAll(".scale-point").length).toBe(2)}),test("The length of the scale points array must be 3",()=>{var e;n.addScalePoints([{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0}]),expect(null===(e=n.scale)||void 0===e?void 0:e.getElement().querySelectorAll(".scale-point").length).toBe(3)})}),describe("Get track click position",()=>{test("Function should be return true",()=>{expect(n.getTrackClickPosition()).toBe(!0)})}),describe("Get scale click position",()=>{test("Function should be return true",()=>{expect(n.getScaleClickPosition()).toBe(!0)}),test("Function should be return {left: 0, top: 0}",()=>{n.disableScale(),expect(n.getScaleClickPosition().left).toBe(0),expect(n.getScaleClickPosition().top).toBe(0)})}),describe("Get margins",()=>{beforeEach(()=>{n.container.getRect=jest.fn(()=>({width:120,height:120,top:25,left:49,bottom:60,right:5,x:35,y:48,toJSON:()=>null})),null!==n.scale&&(n.scale.getRect=jest.fn(()=>({width:120,height:120,top:11,left:49,bottom:87,right:45,x:35,y:48,toJSON:()=>null}))),null!==n.popUpOne&&(n.popUpOne.getRect=jest.fn(()=>({width:120,height:120,top:13,left:21,bottom:87,right:5,x:35,y:48,toJSON:()=>null})))}),test("Slider margin-bottom should be 27",()=>{n.container.getOrientation=jest.fn(()=>"horizontal"),expect(n.getMargins().bottom).toBe(27)}),test("Slider margin-bottom should be 0",()=>{n.container.getOrientation=jest.fn(()=>"horizontal"),n.disableScale(),expect(n.getMargins().bottom).toBe(0)}),test("Slider margin-top should be 12",()=>{n.container.getOrientation=jest.fn(()=>"horizontal"),expect(n.getMargins().top).toBe(12)}),test("Slider margin-top should be 0",()=>{n.container.getOrientation=jest.fn(()=>"horizontal"),n.disablePopUps(),expect(n.getMargins().top).toBe(0)}),test("Slider margin-left should be 28",()=>{n.container.getOrientation=jest.fn(()=>"vertical"),expect(n.getMargins().left).toBe(28)}),test("Slider margin-left should be 0",()=>{n.container.getOrientation=jest.fn(()=>"vertical"),n.disablePopUps(),expect(n.getMargins().left).toBe(0)}),test("Slider margin-right should be 40",()=>{n.container.getOrientation=jest.fn(()=>"vertical"),expect(n.getMargins().right).toBe(40)}),test("Slider margin-right should be 0",()=>{n.container.getOrientation=jest.fn(()=>"vertical"),n.disableScale(),expect(n.getMargins().right).toBe(0)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));let l=new o.default;beforeEach(()=>{l=new o.default}),describe("Register",()=>{test("Observers must be added",()=>{const e={update(){}},t={update(){}},s={update(){}};l.register("thumbMove",e),expect(l.observers.thumbMove.length).toBe(1),l.register("thumbMove",t),expect(l.observers.thumbMove.length).toBe(2),l.register("thumbMove",s),expect(l.observers.thumbMove.length).toBe(3)})}),describe("Remove",()=>{test("Observers must be removed",()=>{const e={update(){}},t={update(){}},s={update(){}};l.register("thumbMove",e),l.register("thumbMove",t),l.register("thumbMove",s),expect(l.observers.thumbMove.length).toBe(3),l.unsubscribe("thumbMove",e),expect(l.observers.thumbMove.length).toBe(2),l.unsubscribe("thumbMove",t),expect(l.observers.thumbMove.length).toBe(1),l.unsubscribe("thumbMove",s),expect(l.observers.thumbMove.length).toBe(0)})}),describe("Notify",()=>{test("Observers must be notified",()=>{let e=0;const t={update(){e+=1}},s={update(){e+=1}},i={update(){e+=1}};l.register("thumbMove",t),l.notify("thumbMove"),expect(e).toBe(1),e=0,l.register("thumbMove",s),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.register("thumbMove",i),l.notify("thumbMove"),expect(e).toBe(3),e=0,l.unsubscribe("thumbMove",i),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.register("clickToScale",t),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.notify("clickToScale")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(9));let l;beforeEach(()=>{l=new o.default}),describe("Set z-index",()=>{test("Thumb z-inex should be 5",()=>{l.setZIndex(5),expect(l.getElement().style.zIndex).toBe("5")}),test("Thumb z-inex should be 8",()=>{l.setZIndex(8),expect(l.getElement().style.zIndex).toBe("8")})}),describe("Reset z-index",()=>{test('Thumb z-inex should be ""',()=>{l.setZIndex(4),l.resetZIndex(),expect(l.getElement().style.zIndex).toBe("")})}),describe("Move to",()=>{test("Thumb last position should be {left: 40, top: 11}",()=>{l.moveTo({left:40,top:11}),expect(l.getPosition().left).toBe(40),expect(l.getPosition().top).toBe(11)}),test("Thumb element left should be 80px",()=>{l.moveTo({left:80,top:11}),expect(l.getElement().style.left).toBe("80px")}),test("Thumb element top should be 54px",()=>{l.moveTo({left:80,top:54}),expect(l.getElement().style.top).toBe("54px")})}),describe("Thumb dragstart event",()=>{test("Event should return false",()=>{const e=new window.Event("dragstart");expect(l.getElement().dispatchEvent(e)).toBe(!1)})}),describe("Set thumb shift",()=>{test("Thumb shift should be {shiftX: 2, shiftY: 5}",()=>{l.setThumbShift({left:85,top:47},{left:83,top:42}),expect(l.shift.shiftX).toBe(2),expect(l.shift.shiftY).toBe(5)}),test("Thumb shift should be {shiftX: 5, shiftY: 3}",()=>{l.setThumbShift({left:100,top:80},{left:95,top:77}),expect(l.shift.shiftX).toBe(5),expect(l.shift.shiftY).toBe(3)})}),describe("Increase z-index",()=>{test("z-index should be 3",()=>{l.getElement().style.zIndex="2";const e=new window.Event("pointerdown");l.getElement().dispatchEvent(e),expect(l.getElement().style.zIndex).toBe("3")}),test("z-index should be 10",()=>{l.getElement().style.zIndex="9";const e=new window.Event("pointerdown");l.getElement().dispatchEvent(e),expect(l.getElement().style.zIndex).toBe("10")}),test("z-index should be 1",()=>{l.getElement().style.zIndex="";const e=new window.Event("pointerdown");l.getElement().dispatchEvent(e),expect(l.getElement().style.zIndex).toBe("1")})}),describe("Drag",()=>{test("SetPosition method should be called once",()=>{const e=spyOn(l,"setPosition"),t=new window.MouseEvent("pointermove");l.drag(t),expect(e).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=spyOn(l.subject,"notify"),t=new window.MouseEvent("pointermove");l.drag(t),expect(e).toBeCalledTimes(1)})}),describe("Set position",()=>{test("Thumb position should be {left: 40, top: 17}",()=>{l.shift={shiftX:5,shiftY:3},l.setPosition({left:45,top:20}),expect(l.getPosition().left).toBe(40),expect(l.getPosition().top).toBe(17)}),test("Thumb position should be {left: 45, top: 20}",()=>{l.shift={shiftX:8,shiftY:9},l.setPosition({left:146,top:146}),expect(l.getPosition().left).toBe(138),expect(l.getPosition().top).toBe(137)})}),describe("Enable selection",()=>{test("Document onselectstart event should be null",()=>{l.endDrag(),expect(document.onselectstart).toBe(null)}),test("Document pointerdown event should be null",()=>{l.endDrag(),expect(document.onpointerdown).toBe(null)})}),describe("Disable selection",()=>{test("Document pointerdown event not should be null",()=>{const e=new window.Event("pointerdown");l.getElement().dispatchEvent(e),expect(document.onselectstart).not.toBe(null)}),test("Document selectstart event should return false",()=>{const e=new window.Event("pointerdown");if(l.getElement().dispatchEvent(e),null!==document.onselectstart){const e=new window.Event("selectstart");expect(document.onselectstart(e)).toBe(!1)}}),test("Document pointerdown event should return false",()=>{const e=new window.Event("pointerdown");if(l.getElement().dispatchEvent(e),null!==document.onpointerdown){const e=new window.Event("pointerdown");expect(document.onpointerdown(e)).toBe(!1)}})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(8));let l;const n=e=>{e.initMouseEvent("click",!0,!0,window,0,50,80,50,80,!1,!1,!1,!1,0,null)};beforeEach(()=>{l=new o.default}),describe("Click on track",()=>{test("SetPosition method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l,"setPosition");n(e),l.element.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l.subject,"notify");n(e),l.element.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Position should be {left: 50, top: 80}",()=>{const e=document.createEvent("MouseEvent");n(e),l.element.dispatchEvent(e),expect(l.getPosition().left).toBe(50),expect(l.getPosition().top).toBe(80)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,