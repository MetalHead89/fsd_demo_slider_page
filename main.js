!function(e){function t(t){for(var i,n,a=t[0],r=t[1],h=t[2],u=0,d=[];u<a.length;u++)n=a[u],Object.prototype.hasOwnProperty.call(o,n)&&o[n]&&d.push(o[n][0]),o[n]=0;for(i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i]);for(c&&c(t);d.length;)d.shift()();return l.push.apply(l,h||[]),s()}function s(){for(var e,t=0;t<l.length;t++){for(var s=l[t],i=!0,a=1;a<s.length;a++){var r=s[a];0!==o[r]&&(i=!1)}i&&(l.splice(t--,1),e=n(n.s=s[0]))}return e}var i={},o={0:0},l=[];function n(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=i,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="";var a=window.webpackJsonp=window.webpackJsonp||[],r=a.push.bind(a);a.push=t,a=a.slice();for(var h=0;h<a.length;h++)t(a[h]);var c=r;l.push([13,1]),s()}([function(e,t,s){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},l=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),n=[];function a(e){for(var t=-1,s=0;s<n.length;s++)if(n[s].identifier===e){t=s;break}return t}function r(e,t){for(var s={},i=[],o=0;o<e.length;o++){var l=e[o],r=t.base?l[0]+t.base:l[0],h=s[r]||0,c="".concat(r," ").concat(h);s[r]=h+1;var u=a(c),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==u?(n[u].references++,n[u].updater(d)):n.push({identifier:c,updater:g(d,t),references:1}),i.push(c)}return i}function h(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=s.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var n=l(e.insert||"head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,s,i){var o=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var l=document.createTextNode(o),n=e.childNodes;n[t]&&e.removeChild(n[t]),n.length?e.insertBefore(l,n[t]):e.appendChild(l)}}function p(e,t,s){var i=s.css,o=s.media,l=s.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),l&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var m=null,b=0;function g(e,t){var s,i,o;if(t.singleton){var l=b++;s=m||(m=h(t)),i=d.bind(null,s,l,!1),o=d.bind(null,s,l,!0)}else s=h(t),i=p.bind(null,s,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var s=r(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<s.length;i++){var o=a(s[i]);n[o].references--}for(var l=r(e,t),h=0;h<s.length;h++){var c=a(s[h]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}s=l}}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));t.default=class{constructor(e,t){const s=document.createElement("div");this.control=s,this.subject=new o.default,this.lastPosition={left:0,top:0};let i=e+"_horizontal";t&&(i=`${e}_${t}`),this.control.classList.add(""+e,i)}getPosition(){return this.lastPosition}getControl(){return this.control}getSize(){return{width:this.control.offsetWidth,height:this.control.offsetHeight}}switchToHorizontal(){const e=this.control.classList[0];this.control.classList.remove(e+"_vertical"),this.control.classList.add(e+"_horizontal")}switchToVertical(){const e=this.control.classList[0];this.control.classList.remove(e+"_horizontal"),this.control.classList.add(e+"_vertical")}remove(){this.control.remove()}getOrientation(){const e=this.control.classList[0];return this.control.classList[1].replace(e+"_","")}getRect(){return this.control.getBoundingClientRect()}getStyle(e){var t;return null===(t=document.defaultView)||void 0===t?void 0:t.getComputedStyle(this.control,null).getPropertyValue(e)}setPosition({left:e,top:t}){const s={left:e,top:t},i=this.control.parentElement;if(i){const e=i.getBoundingClientRect();s.left-=e.left,s.top-=e.top}this.lastPosition=s}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.observers={}}register(e,t){Object.prototype.hasOwnProperty.call(this.observers,e)||(this.observers[e]=[]),this.observers[e].push(t)}unsubscribe(e,t){this.observers[e]=this.observers[e].filter(e=>e!==t)}notify(e){Object.prototype.hasOwnProperty.call(this.observers,e)&&this.observers[e].forEach(t=>t.update(e))}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l{constructor(e){this.orientation="horizontal",this.type="range",this.scale=!0,this.popUps=!0,this.min=0,this.max=10,this.step=1,this.thumbOneValue=3,this.thumbTwoValue=7,this.sliderSize={width:500,height:10},this.thumbSize={width:20,height:10},this.scalePointSize={width:0,height:0},this.subject=new o.default,this.refreshSliderState(e)}refreshSliderState({orientation:e,type:t,scale:s,popUps:i,min:o,max:l,step:n,thumbOneValue:a,thumbTwoValue:r,sliderSize:h,thumbSize:c}){void 0!==h&&(this.sliderSize=h),void 0!==c&&(this.thumbSize=c),this.orientation!==e&&(this.orientation=e,this.subject.notify("orientationIsUpdated")),this.type!==t&&(this.type=t,this.rangeValuesIsCorrect()&&(this.thumbTwoValue=this.thumbOneValue),this.subject.notify("typeIsUpdated")),this.min!==o&&this.updateMinValue(o),this.max!==l&&this.updateMaxValue(l),this.step!==n&&this.updateStep(n),this.scale!==s&&(this.scale=s,this.subject.notify("scaleStateIsUpdated")),this.popUps!==i&&(this.popUps=i,this.subject.notify("popUpsStateIsUpdated")),this.thumbOneValue===a&&this.thumbTwoValue===r||this.setThumbsValues({thumbOne:a,thumbTwo:r})}updateThumbsState({thumbOne:e,thumbTwo:t}){let s=this.valueWithStep(this.positionByOrientation(e)),i=null;t&&(i=this.valueWithStep(this.positionByOrientation(t))),i&&s>i&&(this.subject.notify("thumbsSwapped"),[s,i]=[i,s]),this.thumbOneValue=s,i&&(this.thumbTwoValue=i),this.subject.notify("thumbsPositionsIsUpdated")}setSliderSize(e){this.sliderSize=l.getCorrectSize(e,0)}setThumbSize(e){this.thumbSize=l.getCorrectSize(e,0)}setThumbsValues({thumbOne:e,thumbTwo:t}){const s=this.thumbValueToPosition(e);let i=null;"range"===this.type&&(i=this.thumbValueToPosition(t)),this.updateThumbsState({thumbOne:s,thumbTwo:i})}getMin(){return this.min}getMax(){return this.max}getStep(){return this.step}getScaleState(){return this.scale}getPopUpsState(){return this.popUps}getType(){return this.type}getOrientation(){return this.orientation}getProgressBarParams(){const e=this.thumbValueToPosition(this.thumbOneValue),t=this.thumbValueToPosition(this.thumbTwoValue),s=Object.assign({},this.sliderSize),i={left:0,top:0};let o=0,l=0;return"single"===this.type?l=this.positionByOrientation(e)+this.sizeByOrientation(this.thumbSize):(o=this.positionByOrientation(e),l=this.positionByOrientation(t)-this.positionByOrientation(e)+this.sizeByOrientation(this.thumbSize)),"horizontal"===this.orientation?(i.left=o,s.width=l):(i.top=o,s.height=l),{position:i,size:s}}getThumbsPositions(){return{thumbOne:this.thumbValueToPosition(this.thumbOneValue),thumbTwo:this.thumbValueToPosition(this.thumbTwoValue)}}getPopUpsParams(){return{popUpOne:{value:this.thumbOneValue,position:this.getPopUpPosition(this.thumbValueToPosition(this.thumbOneValue))},popUpTwo:{value:this.thumbTwoValue,position:this.getPopUpPosition(this.thumbValueToPosition(this.thumbTwoValue))}}}getThumbsValues(){return{thumbOne:this.thumbOneValue,thumbTwo:this.thumbTwoValue}}getScalePoints(){const e=[],t=this.getStepsCount(),s=this.getStepSize(),i=t+1;let o=0,l=this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(this.scalePointSize)/2;for(let t=0;t<=Math.round(i-1);t+=1){const i=this.thumbPositionToValue(l-this.sizeByOrientation(this.thumbSize)/2+this.sizeByOrientation(this.scalePointSize)/2);if(l=this.getCorrectPointPosition(l),0===t||this.pointsDoNotIntersect(l,o)){const t={left:0,top:0};"horizontal"===this.orientation?t.left=l:t.top=l,e.push({position:t,size:this.scalePointSize,value:i}),o=l}l+=s}return e}setScalePointSize(e){this.scalePointSize=e}recalculateStep(){const e=this.max-this.min;this.step=this.step>e?e:this.step}setThumbPositionOnClickPosition({left:e,top:t}){const s={left:e-this.thumbSize.width/2,top:t-this.thumbSize.height/2};let i=this.thumbOneValue,o=this.thumbTwoValue;this.thumbTwoIsNearToClick(s)?o=this.thumbPositionToValue(this.positionByOrientation(s)):i=this.thumbPositionToValue(this.positionByOrientation(s)),this.setThumbsValues({thumbOne:i,thumbTwo:o})}pointsDoNotIntersect(e,t){return e-t>this.sizeByOrientation(this.scalePointSize)}rangeValuesIsCorrect(){return"range"===this.type&&this.thumbTwoValue<this.thumbOneValue}thumbTwoIsNearToClick(e){return"range"===this.type&&Math.abs(this.positionByOrientation(e)-this.positionByOrientation(this.thumbValueToPosition(this.thumbTwoValue)))<Math.abs(this.positionByOrientation(e)-this.positionByOrientation(this.thumbValueToPosition(this.thumbOneValue)))}static getCorrectSize({width:e,height:t},s){return{width:e=e>=s?e:s,height:t=t>=s?t:s}}getPopUpPosition({left:e,top:t}){return"horizontal"===this.orientation?(e+=this.thumbSize.width/2,t=0):(e=0,t+=this.thumbSize.height/2),{left:e,top:t}}updateMinValue(e){this.min=e<this.max?e:this.min,this.subject.notify("minIsUpdated")}updateMaxValue(e){this.max=e>this.min?e:this.max,this.subject.notify("maxIsUpdated")}updateStep(e){const t=this.max-this.min;this.step=e>0&&e<=t?e:this.step,this.subject.notify("stepIsUpdated")}valueWithStep(e){if(this.thumbPositionToValue(e)>=this.max)return this.thumbPositionToValue(e);const t=this.getStepSize(),s=Math.round(e/t)*t;return this.thumbPositionToValue(s)}getStepsCount(){return(this.max-this.min)/this.step}getStepSize(){const e=this.getStepsCount();return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/e}thumbPositionToValue(e){const t=this.getPxPerValue();let s=Math.round(this.min+(this.max-this.min)/this.max*(e/t));return s=s<this.min?this.min:s,s=s>this.max?this.max:s,s}thumbValueToPosition(e){const t={left:0,top:0},s=this.getPxPerValue();let i=e;i<this.min?i=this.min:i>this.max&&(i=this.max);const o=(i-this.min)/(this.max-this.min)*s*this.max;return"horizontal"===this.orientation?t.left=o:t.top=o,t}getPxPerValue(){return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/this.max}sizeByOrientation(e){return"horizontal"===this.orientation?e.width:e.height}positionByOrientation({left:e,top:t}){return"horizontal"===this.orientation?e:t}getCorrectPointPosition(e){const t=this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(this.scalePointSize)/2;return e>t&&(e=t),e}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(7)),l=i(s(8)),n=i(s(9)),a=i(s(10)),r=i(s(11)),h=i(s(12)),c=i(s(2));t.default=class{constructor(e){this.events={thumbIsDragged:()=>this.subject.notify("thumbIsDragged"),thumbIsCatched:()=>{var e;this.thumbOne.resetZIndex(),null===(e=this.thumbTwo)||void 0===e||e.resetZIndex()},clickToTrack:()=>this.subject.notify("clickToTrack"),clickToScale:()=>this.subject.notify("clickToScale")},this.subject=new c.default,this.sliderWrapper=e,this.slider=new o.default,this.track=new l.default,this.thumbOne=new n.default,this.thumbTwo=new n.default,this.popUpOne=new a.default,this.popUpTwo=new a.default,this.progressBar=new r.default,this.scale=new h.default,this.init()}update(e){e in this.events&&this.events[e]()}swapThumbs(){this.thumbTwo&&([this.thumbOne,this.thumbTwo]=[this.thumbTwo,this.thumbOne])}switchToHorizontal(){var e,t,s,i;this.slider.resetMargins(),this.slider.switchToHorizontal(),this.track.switchToHorizontal(),this.thumbOne.switchToHorizontal(),null===(e=this.thumbTwo)||void 0===e||e.switchToHorizontal(),null===(t=this.popUpOne)||void 0===t||t.switchToHorizontal(),null===(s=this.popUpTwo)||void 0===s||s.switchToHorizontal(),this.progressBar.switchToHorizontal(),null===(i=this.scale)||void 0===i||i.switchToHorizontal()}switchToVertical(){var e,t,s,i;this.slider.resetMargins(),this.slider.switchToVertical(),this.track.switchToVertical(),this.thumbOne.switchToVertical(),null===(e=this.thumbTwo)||void 0===e||e.switchToVertical(),null===(t=this.popUpOne)||void 0===t||t.switchToVertical(),null===(s=this.popUpTwo)||void 0===s||s.switchToVertical(),this.progressBar.switchToVertical(),null===(i=this.scale)||void 0===i||i.switchToVertical()}switchToSingle(){var e,t,s,i;null===(e=this.thumbTwo)||void 0===e||e.subject.unsubscribe("thumbIsCatched",this),null===(t=this.thumbTwo)||void 0===t||t.subject.unsubscribe("thumbIsCatched",this),null===(s=this.thumbTwo)||void 0===s||s.remove(),this.thumbTwo=null,null===(i=this.popUpTwo)||void 0===i||i.remove(),this.popUpTwo=null}switchToRange(){null===this.thumbTwo&&(this.thumbTwo=new n.default(this.slider.getOrientation()),this.slider.append(this.thumbTwo.getControl()),this.popUpOne&&(this.popUpTwo=new a.default(this.slider.getOrientation()),this.slider.append(this.popUpTwo.getControl())),this.thumbTwo.subject.register("thumbIsDragged",this),this.thumbTwo.subject.register("thumbIsCatched",this))}disablePopUps(){var e,t;null===(e=this.popUpOne)||void 0===e||e.remove(),this.popUpOne=null,null===(t=this.popUpTwo)||void 0===t||t.remove(),this.popUpTwo=null,this.slider.setMargins(this.getMargins())}enablePopUps(){null===this.popUpOne&&(this.popUpOne=new a.default(this.slider.getOrientation()),this.slider.append(this.popUpOne.getControl())),this.thumbTwoIsWithoutPopup()&&(this.popUpTwo=new a.default(this.slider.getOrientation()),this.slider.append(this.popUpTwo.getControl())),this.slider.setMargins(this.getMargins())}disableScale(){var e,t;null===(e=this.scale)||void 0===e||e.subject.unsubscribe("clickToScale",this),null===(t=this.scale)||void 0===t||t.remove(),this.scale=null,this.slider.setMargins(this.getMargins())}enableScale(){var e;this.scale&&(null===(e=this.scale)||void 0===e||e.remove()),this.scale=new h.default(this.slider.getOrientation()),this.slider.append(this.scale.getControl()),this.scale.subject.register("clickToScale",this),this.slider.setMargins(this.getMargins())}getThumbSize(){return this.thumbOne.getSize()}getSliderSize(){return this.slider.getSize()}getThumbsPositions(){const e=this.thumbOne.getPosition();let t=null;return this.thumbTwo&&(t=this.thumbTwo.getPosition()),{thumbOne:e,thumbTwo:t}}updateThumbs(e){var t;this.thumbOne.moveTo(e.thumbOne),e.thumbTwo&&(null===(t=this.thumbTwo)||void 0===t||t.moveTo(e.thumbTwo))}updateProgressBar(e){this.progressBar.update(e)}updatePopUps(e){this.popUpOne&&this.popUpOne.update(e.popUpOne),this.popUpTwo&&this.popUpTwo.update(e.popUpTwo)}getScalePointSize(e){return this.scale?this.scale.getPointSize(e):{width:0,height:0}}addScalePoints(e){var t;null===(t=this.scale)||void 0===t||t.addPoints(e),this.slider.setMargins(this.getMargins())}getTrackClickPosition(){return this.track.getPosition()}getScaleClickPosition(){return null===this.scale?{left:0,top:0}:this.scale.getPosition()}init(){this.subscribeToEvents(),this.assembleSlider(),this.handleWindowResize=this.handleWindowResize.bind(this),window.addEventListener("resize",this.handleWindowResize)}thumbTwoIsWithoutPopup(){return null===this.popUpTwo&&null!==this.thumbTwo}subscribeToEvents(){var e,t,s;this.thumbOne.subject.register("thumbIsDragged",this),null===(e=this.thumbTwo)||void 0===e||e.subject.register("thumbIsDragged",this),this.thumbOne.subject.register("thumbIsCatched",this),null===(t=this.thumbTwo)||void 0===t||t.subject.register("thumbIsCatched",this),this.track.subject.register("clickToTrack",this),null===(s=this.scale)||void 0===s||s.subject.register("clickToScale",this)}handleWindowResize(){this.subject.notify("windowResized")}assembleSlider(){this.slider.append(this.track.getControl()),this.slider.append(this.thumbOne.getControl()),this.thumbTwo&&this.slider.append(this.thumbTwo.getControl()),this.popUpOne&&this.slider.append(this.popUpOne.getControl()),this.popUpTwo&&this.slider.append(this.popUpTwo.getControl()),this.slider.append(this.progressBar.getControl()),this.scale&&this.slider.append(this.scale.getControl()),this.sliderWrapper.append(this.slider.getControl())}getMargins(){const e={left:0,top:0,right:0,bottom:0},t=this.slider.getRect(),s=this.popUpOne?this.popUpOne.getRect():null,i=this.scale?this.scale.getRect():null;return"horizontal"===this.slider.getOrientation()?(s&&(e.top+=t.top-s.top),i&&(e.bottom+=i.bottom-t.bottom)):(s&&(e.left+=t.left-s.left),i&&(e.right+=i.right-t.right)),e}}},,function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.events={thumbIsDragged:()=>{this.model.updateThumbsState(this.view.getThumbsPositions())},thumbsPositionsIsUpdated:()=>this.updateThumbsPositions(),minIsUpdated:()=>{this.updateView(),this.model.recalculateStep()},maxIsUpdated:()=>{this.updateView(),this.model.recalculateStep()},stepIsUpdated:()=>this.updateView(),orientationIsUpdated:()=>this.updateSliderOrientation(),typeIsUpdated:()=>this.updateSliderType(),scaleStateIsUpdated:()=>this.updateScaleState(),popUpsStateIsUpdated:()=>this.updatePopUpsState(),clickToTrack:()=>{this.model.setThumbPositionOnClickPosition(this.view.getTrackClickPosition())},clickToScale:()=>{this.model.setThumbPositionOnClickPosition(this.view.getScaleClickPosition())},thumbsSwapped:()=>this.view.swapThumbs(),windowResized:()=>this.init()},this.model=e.model,this.view=e.view,this.modelSubject=this.model.subject,this.viewSubject=this.view.subject,this.subscribeToEvents(),this.init()}update(e){e in this.events&&this.events[e]()}init(){this.updateSliderOrientation(),this.model.setSliderSize(this.view.getSliderSize()),this.model.setThumbSize(this.view.getThumbSize()),this.updateSliderType(),this.updatePopUpsState(),this.updateView()}subscribeToEvents(){this.viewSubject.register("thumbIsDragged",this),this.modelSubject.register("thumbsPositionsIsUpdated",this),this.modelSubject.register("minIsUpdated",this),this.modelSubject.register("maxIsUpdated",this),this.modelSubject.register("stepIsUpdated",this),this.modelSubject.register("typeIsUpdated",this),this.modelSubject.register("orientationIsUpdated",this),this.modelSubject.register("scaleStateIsUpdated",this),this.modelSubject.register("popUpsStateIsUpdated",this),this.modelSubject.register("thumbsSwapped",this),this.view.subject.register("clickToTrack",this),this.view.subject.register("clickToScale",this),this.view.subject.register("windowResized",this)}updateView(){if(this.model.updateThumbsState(this.model.getThumbsPositions()),this.model.getScaleState()){this.view.enableScale();const e=this.model.getMax();this.model.setScalePointSize(this.view.getScalePointSize(e));const t=this.model.getScalePoints();this.view.addScalePoints(t)}else this.view.disableScale()}updateThumbsPositions(){this.view.updateThumbs(this.model.getThumbsPositions()),this.view.updatePopUps(this.model.getPopUpsParams()),this.view.updateProgressBar(this.model.getProgressBarParams())}updateSliderOrientation(){"horizontal"===this.model.getOrientation()?this.view.switchToHorizontal():this.view.switchToVertical(),this.model.setSliderSize(this.view.getSliderSize()),this.updateView()}updateSliderType(){"single"===this.model.getType()?this.view.switchToSingle():this.view.switchToRange(),this.model.updateThumbsState(this.model.getThumbsPositions())}updateScaleState(){this.model.getScaleState()?(this.view.enableScale(),this.updateView()):this.view.disableScale()}updatePopUpsState(){this.model.getPopUpsState()?(this.view.enablePopUps(),this.model.updateThumbsState(this.model.getThumbsPositions())):this.view.disablePopUps()}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("slider")}append(e){this.control.append(e)}setMargins({left:e,top:t,right:s,bottom:i}){this.control.style.marginLeft=e+"px",this.control.style.marginTop=t+"px",this.control.style.marginRight=s+"px",this.control.style.marginBottom=i+"px"}resetMargins(){this.control.style.margin="0"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("track"),this.init()}init(){this.handleTrackClick=this.handleTrackClick.bind(this),this.control.addEventListener("click",this.handleTrackClick)}handleTrackClick(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("clickToTrack")}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("thumb",e),this.shift={shiftX:0,shiftY:0},this.handleDocumentPointermove=this.drag.bind(this),this.handleDocumentPointerup=this.endDrag.bind(this),this.init()}setZIndex(e){this.control.style.zIndex=e.toString()}resetZIndex(){this.control.style.zIndex=""}moveTo({left:e,top:t}){this.lastPosition={left:e,top:t},this.control.style.left=e+"px",this.control.style.top=t+"px"}setPosition(e){super.setPosition(e),this.lastPosition.left-=this.shift.shiftX,this.lastPosition.top-=this.shift.shiftY}static disableSelection(){document.onselectstart=()=>!1,document.onpointerdown=()=>!1}static enableSelection(){document.onselectstart=null,document.onpointerdown=null}init(){this.handleThumbPointerdown=this.handleThumbPointerdown.bind(this),this.control.addEventListener("pointerdown",this.handleThumbPointerdown),this.disableDragAndDrop()}disableDragAndDrop(){this.control.ondragstart=()=>!1}handleThumbPointerdown(e){l.disableSelection();const t=this.control.getBoundingClientRect();this.setThumbShift({left:e.clientX,top:e.clientY},{left:t.left,top:t.top}),document.addEventListener("pointermove",this.handleDocumentPointermove),document.addEventListener("pointerup",this.handleDocumentPointerup),this.subject.notify("thumbIsCatched"),this.increaseZIndex()}setThumbShift(e,t){this.shift.shiftX=e.left-t.left,this.shift.shiftY=e.top-t.top}increaseZIndex(){const e=this.getStyle("z-index");this.control.style.zIndex=(parseInt(e||"0",10)+1).toString()}drag(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("thumbIsDragged")}endDrag(){l.enableSelection(),document.removeEventListener("pointermove",this.handleDocumentPointermove),document.removeEventListener("pointerup",this.handleDocumentPointerup)}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("pop-up",e)}update({value:e,position:t}){this.updateValue(e),this.updatePosition(t)}updateValue(e){this.control.innerHTML=""+e}updatePosition({left:e,top:t}){this.control.style.left=e+"px",this.control.style.top=t+"px"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(){super("progress-bar")}update({position:e,size:t}){this.control.style.left=e.left+"px",this.control.style.top=e.top+"px",this.control.style.width=t.width+"px",this.control.style.height=t.height+"px"}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));class l extends o.default{constructor(e){super("scale",e),this.init()}getPointSize(e){this.addPoint({position:{left:0,top:0},size:{width:0,height:0},value:e});const t={width:0,height:0},s=this.control.querySelector(".scale__point");return t.width=(null==s?void 0:s.offsetWidth)||0,t.height=(null==s?void 0:s.offsetHeight)||0,null==s||s.remove(),t}addPoints(e){e.forEach(e=>this.addPoint(e))}init(){this.handleScaleClick=this.handleScaleClick.bind(this),this.control.addEventListener("click",this.handleScaleClick)}handleScaleClick(e){this.setPosition({left:e.clientX,top:e.clientY}),this.subject.notify("clickToScale")}addPoint({position:e,size:t,value:s}){const i=this.getOrientation(),o=document.createElement("div");o.classList.add("scale__point","scale__point_"+i),t.width>0&&(o.style.width=t.width+"px"),"horizontal"===i?this.control.style.height=t.height+"px":this.control.style.width=t.width+"px";const l=document.createElement("div");l.classList.add("scale__point-marker");const n=document.createElement("div");n.classList.add("scale__point-label","scale__point-label_"+i),n.innerText=s.toString(),o.style.left=e.left+"px",o.style.top=e.top+"px",o.append(l),o.append(n),this.control.append(o)}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(14));s(22);const l=s(53);l.keys().forEach(e=>{const t=e.split("/");t.includes("__mocks__")||t.includes("tests")||l(e)});new o.default},function(e,t,s){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.addNewSliderButton=null,this.helpImage=null,this.buttonWrapper=null,this.init(),this.addEventListeners()}init(){this.addNewSliderButton=document.querySelector(".add-new-slider-button"),this.helpImage=document.querySelector(".help-image"),this.buttonWrapper=document.querySelector(".button-wrapper")}addEventListeners(){var e;this.handleAddNewSliderButtonClick=this.handleAddNewSliderButtonClick.bind(this),null===(e=this.addNewSliderButton)||void 0===e||e.addEventListener("click",this.handleAddNewSliderButtonClick)}handleRemoveSliderButtonClick(e){var t;e.remove(),0===document.querySelectorAll(".slider-wrapper").length&&(null===(t=this.addNewSliderButton)||void 0===t||t.classList.add("add-new-slider-button_margin-top"))}handleAddNewSliderButtonClick(){var t,s;if(null===this.buttonWrapper)return;null===(t=this.helpImage)||void 0===t||t.remove(),this.helpImage=null,null===(s=this.addNewSliderButton)||void 0===s||s.classList.remove("add-new-slider-button_margin-top");const i=document.createElement("div");i.classList.add("slider-wrapper");const o=document.createElement("span");o.classList.add("material-icons","remove-slider-button__icon"),o.innerText="clear";const l=document.createElement("button");l.classList.add("remove-slider-button"),l.append(o),l.addEventListener("click",this.handleRemoveSliderButtonClick.bind(l,i)),i.append(l),this.buttonWrapper.before(i),e(i).simpleSlider().controlPanel()}}}).call(this,s(5))},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(16)),l=i(s(55)),n=i(s(17)),a=i(s(18)),r=i(s(19)),h=i(s(2));class c extends h.default{constructor(e){super(),this.controlPanel=new o.default,this.sliderWrapper=e,this.thumbOneValue=new l.default("First thumb value"),this.thumbTwoValue=new l.default("Second thumb value"),this.min=new l.default("min value"),this.max=new l.default("max value"),this.step=new l.default("step"),this.typeRadio=new a.default("type",{labelText:"single",value:"single"},{labelText:"range",value:"range"}),this.orientationRadio=new a.default("orientation",{labelText:"horizontal",value:"horizontal"},{labelText:"vertical",value:"vertical"}),this.scaleCheckbox=new r.default({label:"scale",name:"scale",value:"scale"}),this.popUpsCheckbox=new r.default({label:"pop ups",name:"popUps",value:"popUps"}),this.subscribeToEvents(),this.createPanel()}update(e){"controlPanelDataUpdated"===e&&(this.notify("controlPanelDataUpdated"),this.switchOrientation())}setThumbsValues({thumbOne:e,thumbTwo:t}){this.thumbOneValue.setValue(e),this.thumbTwoValue.setValue(t)}setMinValue(e){this.min.setValue(e)}setMaxValue(e){this.max.setValue(e)}setStep(e){this.step.setValue(e)}setScaleState(e){this.scaleCheckbox.setState(e)}setPopUpsState(e){this.popUpsCheckbox.setState(e)}setTypeRadio(e){this.typeRadio.switchTo(e)}setOrientationRadio(e){this.orientationRadio.switchTo(e)}getOrientation(){return this.orientationRadio.getValue()}getType(){return this.typeRadio.getValue()}getScaleState(){return this.scaleCheckbox.getState()}getPopUpsState(){return this.popUpsCheckbox.getState()}getMin(){return this.min.getValue()}getMax(){return this.max.getValue()}getStep(){return this.step.getValue()}getThumbOneValue(){return this.thumbOneValue.getValue()}getThumbTwoValue(){return this.thumbTwoValue.getValue()}getThumbsValues(){return{thumbOne:this.thumbOneValue.getValue(),thumbTwo:this.thumbTwoValue.getValue()}}createPanel(){this.controlPanel.append(n.default({wrapperClass:"control-panel__text-fields-group",elements:[this.thumbOneValue.getControl(),this.thumbTwoValue.getControl()]})),this.controlPanel.append(n.default({wrapperClass:"control-panel__text-fields-group",elements:[this.min.getControl(),this.max.getControl(),this.step.getControl()]}));const e=n.default({header:"type",wrapperClass:"control-panel__radio-group",elements:[this.typeRadio.getControl()]}),t=n.default({header:"orientation",wrapperClass:"control-panel__radio-group",elements:[this.orientationRadio.getControl()]}),s=n.default({wrapperClass:"control-panel__wrapper",elements:[e,t]}),i=n.default({header:"on/off elements",wrapperClass:"control-panel__wrapper",elements:[this.scaleCheckbox.getControl(),this.popUpsCheckbox.getControl()]});this.controlPanel.append(n.default({wrapperClass:"control-panel__checkboxes-and-radios-wrapper",elements:[s,i]})),this.sliderWrapper.append(this.controlPanel.getElement())}subscribeToEvents(){this.thumbOneValue.register("controlPanelDataUpdated",this),this.thumbTwoValue.register("controlPanelDataUpdated",this),this.min.register("controlPanelDataUpdated",this),this.max.register("controlPanelDataUpdated",this),this.step.register("controlPanelDataUpdated",this),this.typeRadio.register("controlPanelDataUpdated",this),this.orientationRadio.register("controlPanelDataUpdated",this),this.scaleCheckbox.register("controlPanelDataUpdated",this),this.popUpsCheckbox.register("controlPanelDataUpdated",this)}switchOrientation(){"horizontal"===this.getOrientation()?(this.controlPanel.switchToHorizontal(),this.sliderWrapper.classList.remove("slider-wrapper_vertical"),this.sliderWrapper.classList.add("slider-wrapper_horizontal")):(this.controlPanel.switchToVertical(),this.sliderWrapper.classList.remove("slider-wrapper_horizontal"),this.sliderWrapper.classList.add("slider-wrapper_vertical"))}}t.default=c},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.element=document.createElement("div"),this.element.classList.add("control-panel")}getElement(){return this.element}append(e){this.element.append(e)}switchToHorizontal(){this.element.classList.remove("control-panel_vertical"),this.element.classList.add("control-panel_horizontal")}switchToVertical(){this.element.classList.remove("control-panel_horizontal"),this.element.classList.add("control-panel_vertical")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function({header:e,wrapperClass:t,elements:s}){const i=document.createElement("div");if(i.className=t,void 0!==e){const t=document.createElement("label");t.classList.add("control-panel__group-title"),t.innerText=e,i.append(t)}return s.forEach(e=>{i.append(e)}),i}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e,...t){super();const s=l.generateName(e);this.control=document.createElement("div"),this.control.classList.add("radio-button"),this.radios=[],this.init(s,t)}getControl(){return this.control}getValue(){let e="";return this.radios.forEach(t=>{t.checked&&(e=t.value)}),e}switchTo(e){this.radios.forEach(t=>{t.value===e&&(t.checked=!0,this.handleRadioButtonChange())})}init(e,t){t.forEach(({labelText:t,value:s,checked:i},o)=>{const l=document.createElement("div");l.classList.add("radio-button__radio-wrapper");const n=document.createElement("label");n.classList.add("radio-button__label"),n.innerText=t;const a=document.createElement("input");a.type="radio",a.name=e,a.value=s,(0===o||i)&&(a.checked=!0),a.classList.add("radio-button__radio-button"),this.handleRadioButtonChange=this.handleRadioButtonChange.bind(this),a.addEventListener("change",this.handleRadioButtonChange),this.radios.push(a),n.append(a),l.append(n),this.control.append(l)})}handleRadioButtonChange(){this.radios.forEach(e=>{const t=e.parentElement;e.checked?null==t||t.classList.add("radio-button__label_checked"):null==t||t.classList.remove("radio-button__label_checked")}),this.notify("controlPanelDataUpdated")}static generateName(e){let t=1,s="";for(;""===s;){const i=`${e}${t}`;null===document.querySelector(`[name="${i}"]`)&&(s=i),t+=1}return s}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.control=document.createElement("div"),this.label=document.createElement("label"),this.checkbox=document.createElement("input"),this.init(e)}getControl(){return this.control}setState(e){this.checkbox.checked=e,this.handleCheckboxChange()}getState(){return this.checkbox.checked}init({label:e,name:t,value:s}){this.control.classList.add("checkbox"),this.label.classList.add("checkbox__label"),this.label.innerText=e,this.checkbox.type="checkbox",this.checkbox.name=t,this.checkbox.value=s,this.checkbox.classList.add("checkbox__check"),this.handleCheckboxChange=this.handleCheckboxChange.bind(this),this.checkbox.addEventListener("change",this.handleCheckboxChange),this.label.append(this.checkbox),this.control.append(this.label)}handleCheckboxChange(){this.label.classList.toggle("checkbox__label_checked"),this.notify("controlPanelDataUpdated")}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.events={thumbsPositionsIsUpdated:()=>this.notify("thumbsPositionsIsUpdated"),minIsUpdated:()=>this.notify("minIsUpdated"),maxIsUpdated:()=>this.notify("maxIsUpdated"),stepIsUpdated:()=>this.notify("stepIsUpdated")},this.slider=e,this.subject=e.simpleSlider("getModelSubject"),this.subject.register("thumbsPositionsIsUpdated",this),this.subject.register("minIsUpdated",this),this.subject.register("maxIsUpdated",this),this.subject.register("stepIsUpdated",this)}update(e){e in this.events&&this.events[e]()}getThumbsValues(){return this.slider.simpleSlider("getThumbsValues")}getMin(){return this.slider.simpleSlider("getMin")}getMax(){return this.slider.simpleSlider("getMax")}getStep(){return this.slider.simpleSlider("getStep")}getScaleState(){return this.slider.simpleSlider("getScaleState")}getPopUpsState(){return this.slider.simpleSlider("getPopUpsState")}getType(){return this.slider.simpleSlider("getType")}getOrientation(){return this.slider.simpleSlider("getOrientation")}refreshSliderState(e){this.slider.simpleSlider("refreshSliderState",e)}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.events={thumbsPositionsIsUpdated:()=>{this.view.setThumbsValues(this.model.getThumbsValues())},minIsUpdated:()=>this.view.setMinValue(this.model.getMin()),maxIsUpdated:()=>this.view.setMaxValue(this.model.getMax()),stepIsUpdated:()=>this.view.setStep(this.model.getStep()),controlPanelDataUpdated:()=>{this.model.refreshSliderState(this.getSliderSettings())}},this.view=e,this.model=t,this.init(),this.subscribeToEvents()}init(){this.view.setThumbsValues(this.model.getThumbsValues()),this.view.setMinValue(this.model.getMin()),this.view.setMaxValue(this.model.getMax()),this.view.setStep(this.model.getStep()),this.view.setScaleState(this.model.getScaleState()),this.view.setPopUpsState(this.model.getPopUpsState()),this.view.setTypeRadio(this.model.getType()),this.view.setOrientationRadio(this.model.getOrientation())}update(e){e in this.events&&this.events[e]()}getSliderSettings(){return{orientation:this.view.getOrientation(),type:this.view.getType(),scale:this.view.getScaleState(),popUps:this.view.getPopUpsState(),min:this.view.getMin(),max:this.view.getMax(),step:this.view.getStep(),thumbOneValue:this.view.getThumbOneValue(),thumbTwoValue:this.view.getThumbTwoValue()}}subscribeToEvents(){this.model.register("thumbsPositionsIsUpdated",this),this.model.register("minIsUpdated",this),this.model.register("maxIsUpdated",this),this.model.register("stepIsUpdated",this),this.view.register("controlPanelDataUpdated",this)}}},function(e,t,s){var i={"./demo/scss/normalize.scss":23,"./demo/scss/style.scss":25,"./fonts/fonts.scss":27,"./plugins/control-panel/view/checkbox/_animations.scss":29,"./plugins/control-panel/view/checkbox/checkbox.scss":31,"./plugins/control-panel/view/control-panel/control-panel.scss":33,"./plugins/control-panel/view/radio-button/_animations.scss":35,"./plugins/control-panel/view/radio-button/radio-button.scss":37,"./plugins/control-panel/view/text-field/text-field.scss":39,"./plugins/simple-slider/view/pop-up/pop-up.scss":41,"./plugins/simple-slider/view/progress-bar/progress-bar.scss":43,"./plugins/simple-slider/view/scale/scale.scss":45,"./plugins/simple-slider/view/slider/slider.scss":47,"./plugins/simple-slider/view/thumb/thumb.scss":49,"./plugins/simple-slider/view/track/track.scss":51};function o(e){var t=l(e);return s(t)}function l(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=l,e.exports=o,o.id=22},function(e,t,s){var i=s(0),o=s(24);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(26);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(28);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(30);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(32);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(34);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(36);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(38);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(40);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(42);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(44);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(46);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(48);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(50);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i=s(0),o=s(52);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var l={insert:"head",singleton:!1};i(o,l);e.exports=o.locals||{}},function(e,t,s){},function(e,t,s){var i={"./demo/demo.ts":14,"./index.ts":13,"./plugins/control-panel/control-panel.ts":54,"./plugins/control-panel/controller/control-panel-controller.ts":21,"./plugins/control-panel/interfaces.ts":56,"./plugins/control-panel/model/control-panel-model.ts":20,"./plugins/control-panel/view/checkbox/checkbox.ts":19,"./plugins/control-panel/view/control-panel-view.ts":15,"./plugins/control-panel/view/control-panel/control-panel.ts":16,"./plugins/control-panel/view/group-elements.ts":17,"./plugins/control-panel/view/radio-button/radio-button.ts":18,"./plugins/simple-slider/controller/simple-slider-controller.ts":6,"./plugins/simple-slider/interfaces.ts":57,"./plugins/simple-slider/model/__mocks__/simple-slider-model.ts":58,"./plugins/simple-slider/model/simple-slider-model.ts":3,"./plugins/simple-slider/simple-slider.ts":59,"./plugins/simple-slider/subject/subject.ts":2,"./plugins/simple-slider/view/__mocks__/simple-slider-view.ts":60,"./plugins/simple-slider/view/pop-up/__mocks__/pop-up.ts":61,"./plugins/simple-slider/view/pop-up/pop-up.ts":10,"./plugins/simple-slider/view/progress-bar/__mocks__/progress-bar.ts":62,"./plugins/simple-slider/view/progress-bar/progress-bar.ts":11,"./plugins/simple-slider/view/scale/__mocks__/scale.ts":63,"./plugins/simple-slider/view/scale/scale.ts":12,"./plugins/simple-slider/view/simple-slider-view.ts":4,"./plugins/simple-slider/view/slider/__mocks__/slider.ts":64,"./plugins/simple-slider/view/slider/slider.ts":7,"./plugins/simple-slider/view/thumb/__mocks__/thumb.ts":65,"./plugins/simple-slider/view/thumb/thumb.ts":9,"./plugins/simple-slider/view/track/__mocks__/track.ts":66,"./plugins/simple-slider/view/track/track.ts":8,"./plugins/simple-slider/view/ui-control/__mocks__/ui-control.ts":67,"./plugins/simple-slider/view/ui-control/ui-control.ts":1,"./tests/pop-up.test.ts":68,"./tests/progress-bar.test.ts":69,"./tests/scale.test.ts":70,"./tests/simple-slider-controller.test.ts":71,"./tests/simple-slider-model.test.ts":72,"./tests/simple-slider-view.test.ts":73,"./tests/slider.test.ts":74,"./tests/subject.test.ts":75,"./tests/thumb.test.ts":76,"./tests/track.test.ts":77,"./tests/ui-control.test.ts":78};function o(e){var t=l(e);return s(t)}function l(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=l,e.exports=o,o.id=53},function(e,t,s){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(15)),l=i(s(20)),n=i(s(21));(e=>{const t={init(){return this.each((function(){const t=new o.default(this),s=new l.default(e(this));new n.default(t,s)}))}};e.fn.controlPanel=function(s,i){let o;return"string"==typeof s&&t[s]?o=t[s].call(this,i):"object"!=typeof s&&s?(e.error(`Метод с именем ${s} не существует для jQuery.controlPanel`),o=this):o=t.init.call(this,i),o}})(e)}).call(this,s(5))},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));class l extends o.default{constructor(e){super(),this.control=document.createElement("div"),this.field=document.createElement("input"),this.label=document.createElement("label"),this.init(e)}getControl(){return this.control}getValue(){return parseInt(this.field.value,10)}setValue(e){this.field.value=""+e}init(e){this.control.classList.add("text-field"),this.field.type="number",this.field.classList.add("text-field__input"),this.handleTextFieldBlur=this.handleTextFieldBlur.bind(this),this.field.addEventListener("blur",this.handleTextFieldBlur),this.field.onkeypress=l.removeNonDigitChar,this.label.classList.add("text-field__label"),this.label.innerText=e,this.label.append(this.field),this.control.append(this.label)}handleTextFieldBlur(){this.notify("controlPanelDataUpdated")}static removeNonDigitChar(e){return/[-\d]/.test(e.key)}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.scalePointSize={width:0,height:0},this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0},this.orientation=e.orientation,this.type=e.type,this.scale=e.scale,this.popUps=e.popUps,this.min=e.min,this.max=e.max,this.step=e.step}setSliderSize(){return this.TEST_OK}setThumbSize(){return this.TEST_OK}setThumbPositionOnClickPosition(){return this.TEST_OK}getOrientation(){return this.orientation}getType(){return this.type}getPopUpsState(){return this.popUps}getThumbsPositions(){return this.TEST_OK}getPopUpsParams(){return this.TEST_OK}getProgressBarParams(){return this.TEST_OK}updateThumbsState(){return this.TEST_OK}getScaleState(){return this.scale}getMin(){return this.min}getMax(){return this.max}getStep(){return this.step}getScalePoints(){return this.TEST_OK}setScalePointSize(e){this.scalePointSize=e}recalculateStep(){return this.TEST_OK}}},function(e,t,s){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(3)),l=i(s(6)),n=i(s(4));(e=>{const t={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},s={init(s){const i=e.extend(t,s);return this.each((function(){const t=new o.default(i),s=new n.default(this),a=new l.default({model:t,view:s});e(this).data("settings",i),e(this).data("controller",a),e(this).data("model",t)}))},getModelSubject(){return e(this).data().model.subject},getThumbsValues(){return e(this).data().model.getThumbsValues()},getMin(){return e(this).data().model.getMin()},getMax(){return e(this).data().model.getMax()},getStep(){return e(this).data().model.getStep()},getScaleState(){return e(this).data().model.getScaleState()},getPopUpsState(){return e(this).data().model.getPopUpsState()},getType(){return e(this).data().model.getType()},getOrientation(){return e(this).data().model.getOrientation()},refreshSliderState(t){e(this).data().model.refreshSliderState(t)}};e.fn.simpleSlider=function(t,i){let o;return"string"==typeof t&&s[t]?o=s[t].call(this,i):"object"!=typeof t&&t?(e.error(`Метод с именем ${t} не существует для jQuery.simpleSlider`),o=this):o=s.init.call(this,t),o}})(e)}).call(this,s(5))},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.scalePointSize={width:10,height:10},this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0},this.wrapper=e}getSliderSize(){return this.TEST_OK}getThumbSize(){return this.TEST_OK}getThumbsPositions(){return this.TEST_OK}getTrackClickPosition(){return this.TEST_OK}getScaleClickPosition(){return this.TEST_OK}switchToHorizontal(){return this.TEST_OK}switchToVertical(){return this.TEST_OK}switchToSingle(){return this.TEST_OK}switchToRange(){return this.TEST_OK}enablePopUps(){return this.TEST_OK}disablePopUps(){return this.TEST_OK}enableScale(){return this.TEST_OK}disableScale(){return this.TEST_OK}getScalePointSize(){return this.scalePointSize}addScalePoints(){return this.TEST_OK}updateThumbs(){return this.TEST_OK}updatePopUps(){return this.TEST_OK}updateProgressBar(){return this.TEST_OK}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__pop-up"),this.TEST_OK=!0}update(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__progress-bar"),this.TEST_OK=!0}update(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__scale"),this.TEST_OK=!0}getPointSize(){return this.TEST_OK}addPoints(e){for(let t=0;t<e.length;t+=1){const e=document.createElement("div");e.classList.add("scale-point"),this.control.append(e)}}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider"),this.TEST_OK=!0}append(e){this.control.append(e)}resetMargins(){return this.TEST_OK}setMargins(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__thumb"),this.TEST_OK=!0}resetZIndex(){return this.TEST_OK}moveTo(){return this.TEST_OK}register(){return this.TEST_OK}}t.default=l},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));jest.mock("../../ui-control/ui-control");class l extends o.default{constructor(){super("slider__track")}}t.default=l},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TEST_OK=!0,this.subject={register:()=>!0,unsubscribe:()=>!0,notify:()=>!0};const t=document.createElement("div");this.control=t,this.mainClass=e,this.control.classList.add(""+e)}getPosition(){return this.TEST_OK}getControl(){return this.control}getSize(){return this.TEST_OK}switchToHorizontal(){this.control.classList.remove(this.mainClass+"_vertical"),this.control.classList.add(this.mainClass+"_horizontal")}switchToVertical(){this.control.classList.remove(this.mainClass+"_horizontal"),this.control.classList.add(this.mainClass+"_vertical")}remove(){this.control.remove()}getOrientation(){return this.TEST_OK}getRect(){return this.TEST_OK}getStyle(){return this.TEST_OK}}},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(10));let l;beforeEach(()=>{l=new o.default}),describe("Update",()=>{test("Popup value should be 50",()=>{l.update({value:50,position:{left:30,top:50}}),expect(l.getControl().innerHTML).toBe("50")}),test("Popup value should be 120",()=>{l.update({value:120,position:{left:30,top:50}}),expect(l.getControl().innerHTML).toBe("120")}),test("Popup position should be { left: 30, top: 50 }",()=>{l.update({value:50,position:{left:30,top:50}}),expect(l.getControl().style.left).toBe("30px"),expect(l.getControl().style.top).toBe("50px")}),test("Popup position should be { left: 90, top: 14 }",()=>{l.update({value:50,position:{left:90,top:14}}),expect(l.getControl().style.left).toBe("90px"),expect(l.getControl().style.top).toBe("14px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(11));let l;beforeEach(()=>{l=new o.default}),describe("Update",()=>{test("progressBar left should be 10px",()=>{null==l||l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(null==l?void 0:l.getControl().style.left).toBe("10px")}),test("progressBar top should be 5px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getControl().style.top).toBe("5px")}),test("progressBar width should be 50px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getControl().style.width).toBe("50px")}),test("progressBar height should be 30px",()=>{l.update({position:{left:10,top:5},size:{width:50,height:30}}),expect(l.getControl().style.height).toBe("30px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(12));let l;const n=e=>{e.initMouseEvent("click",!0,!0,window,0,50,80,50,80,!1,!1,!1,!1,0,null)};beforeEach(()=>{l=new o.default}),describe("Click on scale",()=>{test("SetPosition method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l,"setPosition");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l.subject,"notify");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Scale position should be {left: 50, top: 80}",()=>{const e=document.createEvent("MouseEvent");n(e),l.control.dispatchEvent(e),expect(l.getPosition().left).toBe(50),expect(l.getPosition().top).toBe(80)})}),describe("Add points",()=>{test("The number of added points should be 3",()=>{l.addPoints([{position:{left:50,top:100},size:{width:400,height:20},value:10},{position:{left:50,top:100},size:{width:400,height:20},value:10},{position:{left:50,top:100},size:{width:400,height:20},value:10}]),expect(l.control.querySelectorAll(".scale__point").length).toBe(3)}),test("Scale point size should be {left: 50px, top: 100px}",()=>{l.addPoints([{position:{left:50,top:100},size:{width:400,height:20},value:10}]);const e=l.control.querySelector(".scale__point");expect(null==e?void 0:e.style.left).toBe("50px"),expect(null==e?void 0:e.style.top).toBe("100px")}),test("Scale width should be 30px",()=>{l=new o.default("vertical");l.addPoints([{position:{left:50,top:100},size:{width:30,height:20},value:10}]),expect(l.control.style.width).toBe("30px")}),test("Scale should contain an element with the scale__point-label class",()=>{l.addPoints([{position:{left:50,top:100},size:{width:0,height:0},value:10}]),expect(l.control.querySelector(".scale__point-label")).not.toBe(null)}),test("Scale should contain an element with the scale__point-marker class",()=>{l.addPoints([{position:{left:50,top:100},size:{width:0,height:0},value:10}]),expect(l.control.querySelector(".scale__point-marker")).not.toBe(null)})}),describe("Get point size",()=>{test("Scale point size should be {width: 0, height: 0}",()=>{expect(l.getPointSize(10).width).toBe(0),expect(l.getPointSize(10).height).toBe(0)}),test("Scale point size should be {width: 0, height: 0}",()=>{l.remove(),expect(l.getPointSize(10).width).toBe(0),expect(l.getPointSize(10).height).toBe(0)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(6)),l=i(s(3)),n=i(s(4));let a,r,h,c,u;jest.mock("../plugins/simple-slider/model/simple-slider-model"),jest.mock("../plugins/simple-slider/view/simple-slider-view"),beforeEach(()=>{u={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},c=document.createElement("div"),h=new n.default(c),r=new l.default(u),a=new o.default({model:r,view:h})}),describe("Init method",()=>{test("The setSliderSize method from the SimpleSliderModel class should be called twice",()=>{const e=jest.spyOn(r,"setSliderSize");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(2)}),test("The setThumbSize method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbSize");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToHorizontal method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToHorizontal");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToVertical method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToVertical");u.orientation="vertical",r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToSingle method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToSingle");u.type="single",r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The switchToRange method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToRange");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The enablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enablePopUps");a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)}),test("The disablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"disablePopUps");u.popUps=!1,r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(1)})}),describe("Update method",()=>{test("The updateThumbsState method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("thumbIsDragged"),expect(e).toBeCalledTimes(1)}),test("The setThumbPositionOnClickPosition method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbPositionOnClickPosition");a.update("clickToTrack"),expect(e).toBeCalledTimes(1)}),test("The setThumbPositionOnClickPosition method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"setThumbPositionOnClickPosition");a.update("clickToScale"),expect(e).toBeCalledTimes(1)}),test("The init method from the SimpleSliderController class should be called once",()=>{const e=spyOn(a,"init");a.update("windowResized"),expect(e).toBeCalledTimes(1)}),test("Other methods should not be called",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("emptyEvent"),expect(e).toBeCalledTimes(0);const t=jest.spyOn(r,"setThumbPositionOnClickPosition");a.update("emptyEvent"),expect(t).toBeCalledTimes(0);const s=spyOn(a,"updateThumbsPositions");a.update("emptyEvent"),expect(s).toBeCalledTimes(0);const i=spyOn(a,"updateView");a.update("emptyEvent"),expect(i).toBeCalledTimes(0);const o=spyOn(a,"updateSliderOrientation");a.update("emptyEvent"),expect(o).toBeCalledTimes(0);const l=spyOn(a,"updateSliderType");a.update("emptyEvent"),expect(l).toBeCalledTimes(0);const n=spyOn(a,"updateScaleState");a.update("emptyEvent"),expect(n).toBeCalledTimes(0);const h=spyOn(a,"updatePopUpsState");a.update("emptyEvent"),expect(h).toBeCalledTimes(0)})}),describe("Update view method",()=>{test("The updateThumbsState method from the SimpleSliderModel class should be called once",()=>{const e=jest.spyOn(r,"updateThumbsState");a.update("minIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The enableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enableScale");a.update("maxIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The addScalePoints method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"addScalePoints");a.update("stepIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The disableScale method from the SimpleSliderView class should be called twice",()=>{const e=jest.spyOn(h,"disableScale");u.scale=!1,r=new l.default(u),a=new o.default({model:r,view:h}),expect(e).toBeCalledTimes(2)})}),describe("Update thumbs pos",()=>{test("The updateThumbs method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updateThumbs");a.update("thumbsPositionsIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The updatePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updatePopUps");a.update("thumbsPositionsIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The updateProgressBar method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"updateProgressBar");a.update("thumbsPositionsIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update slider orientation",()=>{test("The switchToHorizontal method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToHorizontal");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The switchToVertical method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"switchToVertical");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToHorizontal method from the SimpleSliderView class should not be called",()=>{r.orientation="vertical";const e=jest.spyOn(h,"switchToHorizontal");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToVertical method from the SimpleSliderView class should be called once",()=>{r.orientation="vertical";const e=jest.spyOn(h,"switchToVertical");a.update("orientationIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update slider type",()=>{test("The switchToRange method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"switchToRange");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The switchToSingle method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"switchToSingle");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToRange method from the SimpleSliderView class should not be called",()=>{r.type="single";const e=jest.spyOn(h,"switchToRange");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The switchToSingle method from the SimpleSliderView class should be called once",()=>{r.type="single";const e=jest.spyOn(h,"switchToSingle");a.update("typeIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update scale state",()=>{test("The enableScale method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(2)}),test("The disableScale method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"disableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The enableScale method from the SimpleSliderView class should not be called",()=>{r.scale=!1;const e=jest.spyOn(h,"enableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The disableScale method from the SimpleSliderView class should be called once",()=>{r.scale=!1;const e=jest.spyOn(h,"disableScale");a.update("scaleStateIsUpdated"),expect(e).toBeCalledTimes(1)})}),describe("Update pop ups sate",()=>{test("The enablePopUps method from the SimpleSliderView class should be called once",()=>{const e=jest.spyOn(h,"enablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(1)}),test("The disablePopUps method from the SimpleSliderView class should not be called",()=>{const e=jest.spyOn(h,"disablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The enablePopUps method from the SimpleSliderView class should not be called",()=>{r.popUps=!1;const e=jest.spyOn(h,"enablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(0)}),test("The disablePopUps method from the SimpleSliderView class should be called once",()=>{r.popUps=!1;const e=jest.spyOn(h,"disablePopUps");a.update("popUpsStateIsUpdated"),expect(e).toBeCalledTimes(1)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(3));let l,n;beforeEach(()=>{l={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},n=new o.default(l),n.refreshSliderState(l)}),describe("Refresh slider state",()=>{test("SliderSize should be {width: 500, height: 10}",()=>{delete l.sliderSize,n.refreshSliderState(l),expect(n.sliderSize.width).toBe(500),expect(n.sliderSize.height).toBe(10)}),test("ThumbSize should be {width: 20, height: 20}",()=>{delete l.thumbSize,n.refreshSliderState(l),expect(n.thumbSize.width).toBe(20),expect(n.thumbSize.height).toBe(20)}),test("Orientation should be vertical",()=>{l.orientation="vertical",n.refreshSliderState(l),expect(n.orientation).toBe("vertical")}),test("Type should be single",()=>{l.type="single",n.refreshSliderState(l),expect(n.type).toBe("single")}),test("ThumbTwoValue should be not equal thumbValueOne",()=>{l.type="single",l.thumbOneValue=9,n.refreshSliderState(l),l.type="range",l.thumbOneValue=10,n.refreshSliderState(l),expect(n.thumbOneValue!==n.thumbTwoValue).toBe(!0)}),test("Scale should be false",()=>{l.scale=!1,n.refreshSliderState(l),expect(n.scale).toBe(!1)}),test("PopUps should be false",()=>{l.popUps=!1,n.refreshSliderState(l),expect(n.popUps).toBe(!1)}),test("Min should be 7",()=>{l.min=7,n.refreshSliderState(l),expect(n.min).toBe(7)}),test("Min should be 10",()=>{l.min=50,n.refreshSliderState(l),expect(n.min).toBe(0)}),test("Max should be 40",()=>{l.max=40,n.refreshSliderState(l),expect(n.max).toBe(40)}),test("Max should be 10",()=>{l.max=-50,n.refreshSliderState(l),expect(n.max).toBe(10)}),test("Step should be 8",()=>{l.step=8,n.refreshSliderState(l),expect(n.step).toBe(8)}),test("Step should be 1",()=>{l.step=0,n.refreshSliderState(l),expect(n.step).toBe(1)}),test("ThumbOneValue should be 6",()=>{l.thumbOneValue=6,n.refreshSliderState(l),expect(n.thumbOneValue).toBe(6)}),test("ThumbTwoValue should be 10",()=>{l.thumbTwoValue=10,n.refreshSliderState(l),expect(n.thumbTwoValue).toBe(10)}),test("SliderSize widh should be 300 and height 50",()=>{l.sliderSize={width:300,height:50},n.refreshSliderState(l),expect(n.sliderSize.width).toBe(300),expect(n.sliderSize.height).toBe(50)}),test("ThumbSize widh should be 750 and height 35",()=>{l.thumbSize={width:750,height:35},n.refreshSliderState(l),expect(n.thumbSize.width).toBe(750),expect(n.thumbSize.height).toBe(35)})}),describe("Update thumbs state",()=>{test("Should be thumbOne: 5 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:250,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(5),expect(n.thumbTwoValue).toBe(9)}),test("Should be thumbOne: 5 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:450,top:0},thumbTwo:{left:250,top:0}}),expect(n.thumbOneValue).toBe(5),expect(n.thumbTwoValue).toBe(9)}),test("Should be thumbOne: 0 and thumbTwo: 7",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);n.updateThumbsState({thumbOne:{left:250,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(7)}),test("Should be thumbOne: 0 and thumbTwo: 0",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);n.updateThumbsState({thumbOne:{left:0,top:100},thumbTwo:{left:0,top:400}}),expect(n.thumbOneValue).toBe(2),expect(n.thumbTwoValue).toBe(8)}),test("Should be thumbOne: 0 and thumbTwo: 9",()=>{n.updateThumbsState({thumbOne:{left:-45,top:0},thumbTwo:{left:450,top:0}}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(9)})}),describe("Set slider size",()=>{test("Should be {width: 80, height: 15}",()=>{n.setSliderSize({width:80,height:15}),expect(n.sliderSize.width).toBe(80),expect(n.sliderSize.height).toBe(15)}),test("Should be {width: 0, height: 15}",()=>{n.setSliderSize({width:-80,height:15}),expect(n.sliderSize.width).toBe(0),expect(n.sliderSize.height).toBe(15)}),test("Should be {width: 80, height: 0}",()=>{n.setSliderSize({width:80,height:0}),expect(n.sliderSize.width).toBe(80),expect(n.sliderSize.height).toBe(0)}),test("Should be {width: 500, height: 0}",()=>{n.setSliderSize({width:500,height:-20}),expect(n.sliderSize.width).toBe(500),expect(n.sliderSize.height).toBe(0)})}),describe("Set thumb size",()=>{test("Should be {width: 80, height: 15}",()=>{n.setThumbSize({width:80,height:15}),expect(n.thumbSize.width).toBe(80),expect(n.thumbSize.height).toBe(15)}),test("Should be {width: 0, height: 15}",()=>{n.setThumbSize({width:-80,height:15}),expect(n.thumbSize.width).toBe(0),expect(n.thumbSize.height).toBe(15)}),test("Should be {width: 80, height: 0}",()=>{n.setThumbSize({width:80,height:0}),expect(n.thumbSize.width).toBe(80),expect(n.thumbSize.height).toBe(0)})}),describe("Set thumb values",()=>{test("Should be {thumbOne: 1, thumbTwo: 8}",()=>{n.setThumbsValues({thumbOne:1,thumbTwo:8}),expect(n.thumbOneValue).toBe(1),expect(n.thumbTwoValue).toBe(8)}),test("Should be {thumbOne: 0, thumbTwo: 10}",()=>{n.setThumbsValues({thumbOne:-5,thumbTwo:15}),expect(n.thumbOneValue).toBe(0),expect(n.thumbTwoValue).toBe(10)}),test("Should be {thumbOne: 7, thumbTwo: 9}",()=>{n.setThumbsValues({thumbOne:9,thumbTwo:7}),expect(n.thumbOneValue).toBe(7),expect(n.thumbTwoValue).toBe(9)}),test("Should be {thumbOne: 1, thumbTwo: 3}",()=>{n.setThumbsValues({thumbOne:3,thumbTwo:1}),expect(n.thumbOneValue).toBe(1),expect(n.thumbTwoValue).toBe(3)})}),describe("Get min",()=>{test("Should be 0",()=>{expect(n.getMin()).toBe(0)}),test("Should be 2",()=>{l.min=2,n=new o.default(l),expect(n.getMin()).toBe(2)})}),describe("Get max",()=>{test("Should be 10",()=>{expect(n.getMax()).toBe(10)}),test("Should be 5",()=>{l.max=5,n=new o.default(l),expect(n.getMax()).toBe(5)})}),describe("Get step",()=>{test("Should be 1",()=>{expect(n.getStep()).toBe(1)}),test("Should be 2",()=>{l.step=2,n=new o.default(l),expect(n.getStep()).toBe(2)})}),describe("Get scale state",()=>{test("Should be true",()=>{expect(n.getScaleState()).toBe(!0)}),test("Should be false",()=>{l.scale=!1,n=new o.default(l),expect(n.getScaleState()).toBe(!1)})}),describe("Get pop-ups state",()=>{test("Should be true",()=>{expect(n.getPopUpsState()).toBe(!0)}),test("Should be false",()=>{l.popUps=!1,n=new o.default(l),expect(n.getPopUpsState()).toBe(!1)})}),describe("Get type",()=>{test("Should be range",()=>{expect(n.getType()).toBe("range")}),test("Should be single",()=>{l.type="single",n=new o.default(l),expect(n.getType()).toBe("single")})}),describe("Get orientation",()=>{test("Should be horizontal",()=>{expect(n.getOrientation()).toBe("horizontal")}),test("Should be vertical",()=>{l.orientation="vertical",n=new o.default(l),expect(n.getOrientation()).toBe("vertical")})}),describe("Get progress bar params",()=>{test("Should be position: {{left: 100, top: 0} and size: {width: 212, height: 10}}",()=>{const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(144,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(212,0),expect(e.size.height).toBeCloseTo(10,0)}),test("Should be position: {{left: 0, top: 100} and size: {width: 10, height: 212}}",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(144,0),expect(e.size.width).toBeCloseTo(10,0),expect(e.size.height).toBeCloseTo(212,0)}),test("Should be position: {{left: 0, top: 0} and size: {width: 164, height: 10}}",()=>{l.type="single",n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(164,0),expect(e.size.height).toBeCloseTo(10,0)}),test("Should be position: {{left: 0, top: 0} and size: {width: 10, height: 239}}",()=>{l.orientation="vertical",l.type="single",l.sliderSize={width:10,height:750},n.refreshSliderState(l);const e=n.getProgressBarParams();expect(e.position.left).toBeCloseTo(0,0),expect(e.position.top).toBeCloseTo(0,0),expect(e.size.width).toBeCloseTo(10,0),expect(e.size.height).toBeCloseTo(239,0)})}),describe("Get thumbs positions",()=>{test("Should be thumbOne: {left: 126, top: 0} and thumbTwo: {left: 294, top: 0}",()=>{n.sliderSize={width:440,height:10},n.thumbSize={width:20,height:20};const e=n.getThumbsPositions();expect(e.thumbOne.left).toBeCloseTo(126),expect(e.thumbOne.top).toBe(0),expect(e.thumbTwo).not.toBe(null),null!==e.thumbTwo&&(expect(e.thumbTwo.left).toBeCloseTo(294),expect(e.thumbTwo.top).toBe(0))}),test("Should be thumbOne: {left: 0, top: 0} and thumbTwo: {left: 0, top: 420}",()=>{n.orientation="vertical",n.sliderSize={width:440,height:440},n.thumbSize={width:20,height:20},n.thumbOneValue=-5,n.thumbTwoValue=77;const e=n.getThumbsPositions();expect(e.thumbOne.left).toBe(0),expect(e.thumbOne.top).toBe(0),expect(e.thumbTwo).not.toBe(null),null!==e.thumbTwo&&(expect(e.thumbTwo.left).toBeCloseTo(0),expect(e.thumbTwo.top).toBe(420))})}),describe("Get pop ups params",()=>{test("Should be posOne: {left: 154, top: 0} and posTwo: {left: 346, top: 0}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.position.left).toBeCloseTo(154,0),expect(e.popUpOne.position.top).toBeCloseTo(0,0),expect(e.popUpTwo.position.left).toBeCloseTo(346,0),expect(e.popUpTwo.position.top).toBeCloseTo(0,0)}),test("Should be popUpOne: 3 and popUpTwo: 7}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.value).toBe(3),expect(e.popUpTwo.value).toBe(7)}),test("Should be posOne: {left: 0, top: 154} and posTwo: {left: 0, top: 346}",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},n.refreshSliderState(l);const e=n.getPopUpsParams();expect(e.popUpOne.position.left).toBeCloseTo(0,0),expect(e.popUpOne.position.top).toBeCloseTo(154,0),expect(e.popUpTwo.position.left).toBeCloseTo(0,0),expect(e.popUpTwo.position.top).toBeCloseTo(346,0)}),test("Should be popUpOne: 3 and popUpTwo: 7}",()=>{const e=n.getPopUpsParams();expect(e.popUpOne.value).toBe(3),expect(e.popUpTwo.value).toBe(7)})}),describe("Get thumb values",()=>{test("Should be {thumbOne: 3, thumbTwo: 7}",()=>{expect(n.getThumbsValues().thumbOne).toBe(3),expect(n.getThumbsValues().thumbTwo).toBe(7)}),test("Should be {thumbOne: 5, thumbTwo: 9}",()=>{n.setThumbsValues({thumbOne:5,thumbTwo:9}),expect(n.getThumbsValues().thumbOne).toBe(5),expect(n.getThumbsValues().thumbTwo).toBe(9)})}),describe("Get scale points",()=>{test("Length of the scale points array should be 11",()=>{const e=n.getScalePoints();expect(e.length).toBe(11)}),test("The value of the 5th element of the array of scale points should be 5",()=>{const e=n.getScalePoints();expect(e[5].value).toBe(5)}),test("The size of the 5th element of the array of scale points should be {width: 10, height: 10}",()=>{n.setScalePointSize({width:10,height:10});const e=n.getScalePoints();expect(e[5].size.width).toBe(10),expect(e[5].size.height).toBe(10)}),test("The position of the 5th element of the array of scale points should be {left: 0, top: 20}",()=>{n.setScalePointSize({width:10,height:10});const e=n.getScalePoints();expect(e[5].position.left).toBe(245),expect(e[5].position.top).toBe(0)}),test("Length of the scale points array should be 14",()=>{l.orientation="vertical",l.sliderSize={width:10,height:500},l.max=13,n.refreshSliderState(l);const e=n.getScalePoints();expect(e.length).toBe(14)}),test("Length of the scale points array should be 45",()=>{n.setScalePointSize({width:10,height:10}),l.max=354,n.refreshSliderState(l);const e=n.getScalePoints();expect(e.length).toBe(45)}),test("Length of the scale points array should be 25",()=>{l.max=354,l.step=15,n.refreshSliderState(l);const e=n.getScalePoints();expect(e.length).toBe(25)})}),describe("Set thumb position on click position",()=>{test("ThumbOne position value should be 3",()=>{n.setThumbPositionOnClickPosition({left:100,top:0}),expect(n.getThumbsValues().thumbOne).toBe(2)}),test("ThumbTwo should be not change position",()=>{n.setThumbPositionOnClickPosition({left:100,top:0}),expect(n.getThumbsValues().thumbTwo).toBe(7)}),test("ThumbOne should be not change position",()=>{n.setThumbPositionOnClickPosition({left:100,top:0}),expect(n.getThumbsValues().thumbOne).toBe(2)}),test("ThumbTwo position value should be 8",()=>{n.setThumbPositionOnClickPosition({left:400,top:0}),expect(n.getThumbsValues().thumbTwo).toBe(8)}),test("ThumbTwo position value should be 8",()=>{l.type="single",n.refreshSliderState(l),n.setThumbPositionOnClickPosition({left:400,top:0}),expect(n.getThumbsValues().thumbOne).toBe(8)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(4));let l,n;jest.mock("../plugins/simple-slider/view/slider/slider"),jest.mock("../plugins/simple-slider/view/track/track"),jest.mock("../plugins/simple-slider/view/thumb/thumb"),jest.mock("../plugins/simple-slider/view/pop-up/pop-up"),jest.mock("../plugins/simple-slider/view/progress-bar/progress-bar"),jest.mock("../plugins/simple-slider/view/scale/scale"),beforeEach(()=>{l=document.createElement("div"),n=new o.default(l)}),describe("Window resize",()=>{test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify"),t=new window.Event("resize");window.dispatchEvent(t),expect(e).toBeCalledTimes(1)})}),describe("Assemble slider",()=>{test("Wrapper should be contain a slider element",()=>{expect(l.querySelector(".slider")).not.toBeNull()}),test("Wrapper should be contain a track element",()=>{expect(l.querySelector(".slider__track")).not.toBeNull()}),test("Wrapper should be contain a thumb element",()=>{expect(l.querySelector(".slider__thumb")).not.toBeNull()}),test("Wrapper should be contain a pop-up element",()=>{expect(l.querySelector(".slider__pop-up")).not.toBeNull()}),test("Wrapper should be contain a progress-bar element",()=>{expect(l.querySelector(".slider__progress-bar")).not.toBeNull()}),test("Wrapper should be contain a scale element",()=>{expect(l.querySelector(".slider__scale")).not.toBeNull()}),test("Wrapper should be contain a slider element",()=>{n.slider.remove(),n.thumbTwo=null,n.popUpOne=null,n.popUpTwo=null,n.scale=null,n.assembleSlider(),expect(l.querySelector(".slider")).not.toBeNull()})}),describe("Update method",()=>{test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("thumbIsDragged"),expect(e).toBeCalledTimes(1)}),test("The resetZIndex method of the thumbOne object should be called once",()=>{const e=spyOn(n.thumbOne,"resetZIndex");n.update("thumbIsCatched"),expect(e).toBeCalledTimes(1)}),test("The resetZIndex method of thumbTwo must be called twice",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"resetZIndex");n.update("thumbIsCatched"),n.update("thumbIsCatched"),expect(e).toBeCalledTimes(2)}}),test("Notify method of the SimpleSliderView class not should be called",()=>{const e=spyOn(n.subject,"notify");n.update("emptyEvent"),expect(e).toBeCalledTimes(0)}),test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("clickToTrack"),expect(e).toBeCalledTimes(1)}),test("Notify method of the SimpleSliderView class should be called once",()=>{const e=spyOn(n.subject,"notify");n.update("clickToScale"),expect(e).toBeCalledTimes(1)})}),describe("Switch to horizontal",()=>{test("The slider must contain a class slider_horizontal",()=>{n.switchToHorizontal(),expect(n.slider.getControl().classList.contains("slider_horizontal")).toBe(!0)}),test("The track must contain a class slider__track_horizontal",()=>{n.switchToHorizontal(),expect(n.track.getControl().classList.contains("slider__track_horizontal")).toBe(!0)}),test("The thumbOne must contain a class slider__thumb_horizontal",()=>{n.switchToHorizontal(),expect(n.thumbOne.getControl().classList.contains("slider__thumb_horizontal")).toBe(!0)}),test("The thumbTwo must contain a class slider__thumb_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.thumbTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__thumb_horizontal")).toBe(!0)}),test("The popUpOne must contain a class slider__pop-up_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.popUpOne)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_horizontal")).toBe(!0)}),test("The popUpTwo must contain a class slider__pop-up_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.popUpTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_horizontal")).toBe(!0)}),test("The progressBar must contain a class slider__progress-bar_horizontal",()=>{n.switchToHorizontal(),expect(n.progressBar.getControl().classList.contains("slider__progress-bar_horizontal")).toBe(!0)}),test("The scale must contain a class slider__scale_horizontal",()=>{var e;n.switchToHorizontal(),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().classList.contains("slider__scale_horizontal")).toBe(!0)})}),describe("Switch to vertical",()=>{test("The slider must contain a class slider_vertical",()=>{n.switchToVertical(),expect(n.slider.getControl().classList.contains("slider_vertical")).toBe(!0)}),test("The track must contain a class slider__track_horizontal",()=>{n.switchToVertical(),expect(n.track.getControl().classList.contains("slider__track_vertical")).toBe(!0)}),test("The thumbOne must contain a class slider__thumb_vertical",()=>{n.switchToVertical(),expect(n.thumbOne.getControl().classList.contains("slider__thumb_vertical")).toBe(!0)}),test("The thumbTwo must contain a class slider__thumb_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.thumbTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__thumb_vertical")).toBe(!0)}),test("The popUpOne must contain a class slider__pop-up_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.popUpOne)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_vertical")).toBe(!0)}),test("The popUpTwo must contain a class slider__pop-up_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.popUpTwo)||void 0===e?void 0:e.getControl().classList.contains("slider__pop-up_vertical")).toBe(!0)}),test("The progressBar must contain a class slider__progress-bar_vertical",()=>{n.switchToVertical(),expect(n.progressBar.getControl().classList.contains("slider__progress-bar_vertical")).toBe(!0)}),test("The scale must contain a class slider__scale_vertical",()=>{var e;n.switchToVertical(),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().classList.contains("slider__scale_vertical")).toBe(!0)})}),describe("Switch to single",()=>{test("ThumbTwo should be null",()=>{n.switchToSingle(),expect(n.thumbTwo).toBeNull()})}),describe("Switch to range",()=>{test("ThumbTwo should be defined",()=>{n.switchToRange(),expect(n.thumbTwo).not.toBeNull()}),test("ThumbTwo should be defined",()=>{n.switchToSingle(),n.switchToRange(),expect(n.thumbTwo).not.toBeNull()}),test("ThumbTwo should be defined ana popUpTwo should be null",()=>{n.switchToSingle(),n.popUpOne=null,n.switchToRange(),expect(n.thumbTwo).not.toBeNull(),expect(n.popUpTwo).toBeNull()})}),describe("Disable pop ups",()=>{test("PopUpOne should be null",()=>{n.disablePopUps(),expect(n.popUpOne).toBeNull()}),test("PopUpTwo should be null",()=>{n.switchToRange(),n.disablePopUps(),expect(n.popUpTwo).toBeNull()})}),describe("Enable pop ups",()=>{test("PopUpOne should be defined",()=>{n.disablePopUps(),n.enablePopUps(),expect(n.popUpOne).toBeDefined()}),test("PopUpTwo should be null",()=>{n.switchToSingle(),n.enablePopUps(),expect(n.popUpTwo).toBeNull()}),test("PopUpTwo should be defined",()=>{n.switchToSingle(),n.switchToRange(),n.disablePopUps(),n.enablePopUps(),expect(n.popUpTwo).toBeDefined()})}),describe("Disable scale",()=>{test("Scale should be null",()=>{n.disableScale(),expect(n.scale).toBeNull()}),test("Scale should be null",()=>{n.enableScale(),n.disableScale(),expect(n.scale).toBeNull()})}),describe("Enable scale",()=>{test("Scale should be defined",()=>{n.enableScale(),n.enableScale(),expect(n.scale).toBeDefined()}),test("Scale should be defined",()=>{n.disableScale(),n.enableScale(),expect(n.scale).toBeDefined()})}),describe("Get thumb size",()=>{test("Should be true",()=>{expect(n.getThumbSize()).toBe(!0)})}),describe("Get slider size",()=>{test("Should be true",()=>{expect(n.getSliderSize()).toBe(!0)})}),describe("Get thumbs positions",()=>{test("ThumbOne should be true",()=>{expect(n.getThumbsPositions().thumbOne).toBe(!0)}),test("ThumbTwo should be true",()=>{expect(n.getThumbsPositions().thumbTwo).toBe(!0)}),test("ThumbTwo should be true",()=>{n.switchToSingle(),expect(n.getThumbsPositions().thumbOne).toBe(!0)}),test("ThumbTwo should be true",()=>{n.switchToSingle(),expect(n.getThumbsPositions().thumbTwo).toBe(null)})}),describe("Update thumbs",()=>{test("The moveTo method of the thumbOne object should be called once",()=>{const e=spyOn(n.thumbOne,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),expect(e).toBeCalledTimes(1)}),test("The moveTo method of the thumbTwo object must be called zero times",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:null}),expect(e).toBeCalledTimes(0)}}),test("The moveTo method of thumbTwo should be called twice",()=>{if(null!==n.thumbTwo){const e=spyOn(n.thumbTwo,"moveTo");n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),n.updateThumbs({thumbOne:{left:0,top:0},thumbTwo:{left:0,top:0}}),expect(e).toBeCalledTimes(2)}})}),describe("Update progress bar",()=>{test("The update method of the progressBar object should be called once",()=>{const e=spyOn(n.progressBar,"update");n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),expect(e).toBeCalledTimes(1)}),test("The update method of the progressBar object should be called twice",()=>{const e=spyOn(n.progressBar,"update");n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),n.updateProgressBar({position:{left:0,top:0},size:{width:0,height:0}}),expect(e).toBeCalledTimes(2)})}),describe("Update pop ups",()=>{test("The update method of the popUpOne object should be called once",()=>{let e;null!==n.popUpOne&&(e=spyOn(n.popUpOne,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeCalledTimes(1)}),test("The update method of the popUpTwo object should be called twice",()=>{let e;null!==n.popUpTwo&&(e=spyOn(n.popUpTwo,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeCalledTimes(2)}),test("The update method of the popUpOne object should be called zero times",()=>{let e,t;n.disablePopUps(),null!==n.popUpOne&&(e=spyOn(n.popUpOne,"update")),null!==n.popUpTwo&&(t=spyOn(n.popUpTwo,"update")),n.updatePopUps({popUpOne:{value:0,position:{left:0,top:0}},popUpTwo:{value:0,position:{left:0,top:0}}}),expect(e).toBeUndefined(),expect(t).toBeUndefined()})}),describe("Get scale point size",()=>{test("ScalePointSize should be {width: 0, height: 0}",()=>{n.disableScale(),expect(n.getScalePointSize(10).width).toBe(0),expect(n.getScalePointSize(10).height).toBe(0)}),test("ScalePointSize should be true",()=>{expect(n.getScalePointSize(10)).toBe(!0)})}),describe("Add scale point",()=>{test("The length of the scale points array must be 3",()=>{var e;n.addScalePoints([{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0}]),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().querySelectorAll(".scale-point").length).toBe(2)}),test("The length of the scale points array must be 3",()=>{var e;n.addScalePoints([{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0},{position:{left:0,top:0},size:{width:0,height:0},value:0}]),expect(null===(e=n.scale)||void 0===e?void 0:e.getControl().querySelectorAll(".scale-point").length).toBe(3)})}),describe("Get track click position",()=>{test("Function should be return true",()=>{expect(n.getTrackClickPosition()).toBe(!0)})}),describe("Get scale click position",()=>{test("Function should be return true",()=>{expect(n.getScaleClickPosition()).toBe(!0)}),test("Function should be return {left: 0, top: 0}",()=>{n.disableScale(),expect(n.getScaleClickPosition().left).toBe(0),expect(n.getScaleClickPosition().top).toBe(0)})}),describe("Get margins",()=>{beforeEach(()=>{n.slider.getRect=jest.fn(()=>({width:120,height:120,top:25,left:49,bottom:60,right:5,x:35,y:48,toJSON:()=>null})),null!==n.scale&&(n.scale.getRect=jest.fn(()=>({width:120,height:120,top:11,left:49,bottom:87,right:45,x:35,y:48,toJSON:()=>null}))),null!==n.popUpOne&&(n.popUpOne.getRect=jest.fn(()=>({width:120,height:120,top:13,left:21,bottom:87,right:5,x:35,y:48,toJSON:()=>null})))}),test("Slider margin-bottom should be 27",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),expect(n.getMargins().bottom).toBe(27)}),test("Slider margin-bottom should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),n.disableScale(),expect(n.getMargins().bottom).toBe(0)}),test("Slider margin-top should be 12",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),expect(n.getMargins().top).toBe(12)}),test("Slider margin-top should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"horizontal"),n.disablePopUps(),expect(n.getMargins().top).toBe(0)}),test("Slider margin-left should be 28",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),expect(n.getMargins().left).toBe(28)}),test("Slider margin-left should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),n.disablePopUps(),expect(n.getMargins().left).toBe(0)}),test("Slider margin-right should be 40",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),expect(n.getMargins().right).toBe(40)}),test("Slider margin-right should be 0",()=>{n.slider.getOrientation=jest.fn(()=>"vertical"),n.disableScale(),expect(n.getMargins().right).toBe(0)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(7));let l;beforeEach(()=>{l=new o.default}),describe("Append",()=>{test("Slider should contain element with class new-elem",()=>{const e=document.createElement("div");e.classList.add("new-elem"),l.append(e),expect(l.getControl().querySelector(".new-elem")).not.toBeNull()}),test("Slider should contain element with class second-elem",()=>{const e=document.createElement("div");e.classList.add("second-elem"),l.append(e),expect(l.getControl().querySelector(".second-elem")).not.toBeNull()})}),describe("Set margins",()=>{test("Slider margins should be {left: 25, top: 77, right: 13, bottom: 2}",()=>{l.setMargins({left:25,top:77,right:13,bottom:2}),expect(l.control.style.marginLeft).toBe("25px"),expect(l.control.style.marginTop).toBe("77px"),expect(l.control.style.marginRight).toBe("13px"),expect(l.control.style.marginBottom).toBe("2px")}),test("Slider margins should be {left: 84, top: 97, right: 67, bottom: 73}",()=>{l.setMargins({left:84,top:97,right:67,bottom:73}),expect(l.control.style.marginLeft).toBe("84px"),expect(l.control.style.marginTop).toBe("97px"),expect(l.control.style.marginRight).toBe("67px"),expect(l.control.style.marginBottom).toBe("73px")})}),describe("Reset margins",()=>{test("Slider margins should be {left: 0, top: 0, right: 0, bottom: 0}",()=>{l.setMargins({left:25,top:77,right:13,bottom:2}),l.resetMargins(),expect(l.control.style.marginLeft).toBe("0px"),expect(l.control.style.marginTop).toBe("0px"),expect(l.control.style.marginRight).toBe("0px"),expect(l.control.style.marginBottom).toBe("0px")}),test("Slider margins should be {left: 0px, top: 0, right: 0, bottom: 0}",()=>{l.setMargins({left:84,top:97,right:67,bottom:73}),l.resetMargins(),expect(l.control.style.marginLeft).toBe("0px"),expect(l.control.style.marginTop).toBe("0px"),expect(l.control.style.marginRight).toBe("0px"),expect(l.control.style.marginBottom).toBe("0px")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(2));let l=new o.default;beforeEach(()=>{l=new o.default}),describe("Register",()=>{test("Observers must be added",()=>{const e={update(){}},t={update(){}},s={update(){}};l.register("thumbMove",e),expect(l.observers.thumbMove.length).toBe(1),l.register("thumbMove",t),expect(l.observers.thumbMove.length).toBe(2),l.register("thumbMove",s),expect(l.observers.thumbMove.length).toBe(3)})}),describe("Remove",()=>{test("Observers must be removed",()=>{const e={update(){}},t={update(){}},s={update(){}};l.register("thumbMove",e),l.register("thumbMove",t),l.register("thumbMove",s),expect(l.observers.thumbMove.length).toBe(3),l.unsubscribe("thumbMove",e),expect(l.observers.thumbMove.length).toBe(2),l.unsubscribe("thumbMove",t),expect(l.observers.thumbMove.length).toBe(1),l.unsubscribe("thumbMove",s),expect(l.observers.thumbMove.length).toBe(0)})}),describe("Notify",()=>{test("Observers must be notified",()=>{let e=0;const t={update(){e+=1}},s={update(){e+=1}},i={update(){e+=1}};l.register("thumbMove",t),l.notify("thumbMove"),expect(e).toBe(1),e=0,l.register("thumbMove",s),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.register("thumbMove",i),l.notify("thumbMove"),expect(e).toBe(3),e=0,l.unsubscribe("thumbMove",i),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.register("clickToScale",t),l.notify("thumbMove"),expect(e).toBe(2),e=0,l.notify("clickToScale")})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(9));let l;beforeEach(()=>{l=new o.default}),describe("Set z-index",()=>{test("Thumb z-inex should be 5",()=>{l.setZIndex(5),expect(l.getControl().style.zIndex).toBe("5")}),test("Thumb z-inex should be 8",()=>{l.setZIndex(8),expect(l.getControl().style.zIndex).toBe("8")})}),describe("Reset z-index",()=>{test('Thumb z-inex should be ""',()=>{l.setZIndex(4),l.resetZIndex(),expect(l.getControl().style.zIndex).toBe("")})}),describe("Move to",()=>{test("Thumb last position should be {left: 40, top: 11}",()=>{l.moveTo({left:40,top:11}),expect(l.getPosition().left).toBe(40),expect(l.getPosition().top).toBe(11)}),test("Thumb element left should be 80px",()=>{l.moveTo({left:80,top:11}),expect(l.getControl().style.left).toBe("80px")}),test("Thumb element top should be 54px",()=>{l.moveTo({left:80,top:54}),expect(l.getControl().style.top).toBe("54px")})}),describe("Thumb dragstart event",()=>{test("Event should return false",()=>{const e=new window.Event("dragstart");expect(l.getControl().dispatchEvent(e)).toBe(!1)})}),describe("Set thumb shift",()=>{test("Thumb shift should be {shiftX: 2, shiftY: 5}",()=>{l.setThumbShift({left:85,top:47},{left:83,top:42}),expect(l.shift.shiftX).toBe(2),expect(l.shift.shiftY).toBe(5)}),test("Thumb shift should be {shiftX: 5, shiftY: 3}",()=>{l.setThumbShift({left:100,top:80},{left:95,top:77}),expect(l.shift.shiftX).toBe(5),expect(l.shift.shiftY).toBe(3)})}),describe("Increase z-index",()=>{test("z-index should be 3",()=>{l.getControl().style.zIndex="2";const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(l.getControl().style.zIndex).toBe("3")}),test("z-index should be 10",()=>{l.getControl().style.zIndex="9";const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(l.getControl().style.zIndex).toBe("10")}),test("z-index should be 1",()=>{l.getControl().style.zIndex="";const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(l.getControl().style.zIndex).toBe("1")})}),describe("Drag",()=>{test("SetPosition method should be called once",()=>{const e=spyOn(l,"setPosition"),t=new window.MouseEvent("pointermove");l.drag(t),expect(e).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=spyOn(l.subject,"notify"),t=new window.MouseEvent("pointermove");l.drag(t),expect(e).toBeCalledTimes(1)})}),describe("Set position",()=>{test("Thumb position should be {left: 40, top: 17}",()=>{l.shift={shiftX:5,shiftY:3},l.setPosition({left:45,top:20}),expect(l.getPosition().left).toBe(40),expect(l.getPosition().top).toBe(17)}),test("Thumb position should be {left: 45, top: 20}",()=>{l.shift={shiftX:8,shiftY:9},l.setPosition({left:146,top:146}),expect(l.getPosition().left).toBe(138),expect(l.getPosition().top).toBe(137)})}),describe("Enable selection",()=>{test("Document onselectstart event should be null",()=>{l.endDrag(),expect(document.onselectstart).toBe(null)}),test("Document pointerdown event should be null",()=>{l.endDrag(),expect(document.onpointerdown).toBe(null)})}),describe("Disable selection",()=>{test("Document pointerdown event not should be null",()=>{const e=new window.Event("pointerdown");l.getControl().dispatchEvent(e),expect(document.onselectstart).not.toBe(null)}),test("Document selectstart event should return false",()=>{const e=new window.Event("pointerdown");if(l.getControl().dispatchEvent(e),null!==document.onselectstart){const e=new window.Event("selectstart");expect(document.onselectstart(e)).toBe(!1)}}),test("Document pointerdown event should return false",()=>{const e=new window.Event("pointerdown");if(l.getControl().dispatchEvent(e),null!==document.onpointerdown){const e=new window.Event("pointerdown");expect(document.onpointerdown(e)).toBe(!1)}})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(8));let l;const n=e=>{e.initMouseEvent("click",!0,!0,window,0,50,80,50,80,!1,!1,!1,!1,0,null)};beforeEach(()=>{l=new o.default}),describe("Click on track",()=>{test("SetPosition method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l,"setPosition");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Notify method should be called once",()=>{const e=document.createEvent("MouseEvent"),t=spyOn(l.subject,"notify");n(e),l.control.dispatchEvent(e),expect(t).toBeCalledTimes(1)}),test("Position should be {left: 50, top: 80}",()=>{const e=document.createEvent("MouseEvent");n(e),l.control.dispatchEvent(e),expect(l.getPosition().left).toBe(50),expect(l.getPosition().top).toBe(80)})})},function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(s(1));let l;Object.defineProperties(window.HTMLElement.prototype,{offsetLeft:{get:function(){return parseFloat(window.getComputedStyle(this).marginLeft)||0}},offsetTop:{get:function(){return parseFloat(window.getComputedStyle(this).marginTop)||0}},offsetHeight:{get:function(){return parseFloat(window.getComputedStyle(this).height)||0}},offsetWidth:{get:function(){return parseFloat(window.getComputedStyle(this).width)||0}}}),beforeEach(()=>{l=new o.default("some-element")}),describe("Constructor",()=>{test("UI-Control should have a class some-element",()=>{expect(l.control.classList.contains("some-element")).toBe(!0)}),test("UI-Control should have a class some-element_horizontal",()=>{expect(l.control.classList.contains("some-element_horizontal")).toBe(!0)}),test("UI-Control should have a class some-element_vertical",()=>{l=new o.default("some-element","vertical"),expect(l.control.classList.contains("some-element_vertical")).toBe(!0)})}),describe("Set position and get position",()=>{test("UI-Control position should be {left: 80, top: 20}",()=>{const e=document.createElement("div");e.style.left="100px",e.style.top="40px",e.append(l.getControl()),l.setPosition({left:80,top:20}),expect(l.getPosition().left).toBe(80),expect(l.getPosition().top).toBe(20)}),test("UI-Control position should be {left: 20, top: 10}",()=>{l.setPosition({left:20,top:10}),expect(l.getPosition().left).toBe(20),expect(l.getPosition().top).toBe(10)})}),describe("Get element",()=>{test("UI-Control should be exist",()=>{expect(l.getControl()).not.toBeNull()}),test("UI-Control should be exist",()=>{l=new o.default("some-element","vertical"),expect(l.getControl()).not.toBeNull()})}),describe("Get size",()=>{test("UIControl size should be {width: 400, height: 50}",()=>{l.control.style.width="400px",l.control.style.height="50px",expect(l.getSize().width).toBe(400),expect(l.getSize().height).toBe(50)}),test("UI-Control size should be {width: 250, height: 40}",()=>{l.control.style.width="250px",l.control.style.height="40px",expect(l.getSize().width).toBe(250),expect(l.getSize().height).toBe(40)})}),describe("Switch to horizontal",()=>{test("UI-Control should be not contain class some-element_vertical",()=>{l=new o.default("some-element","vertical"),l.switchToHorizontal(),expect(l.control.classList.contains("some-element_vertical")).toBe(!1)}),test("UI-Control should be contain class some-element_horizontal",()=>{l=new o.default("some-element","vertical"),l.switchToHorizontal(),expect(l.control.classList.contains("some-element_horizontal")).toBe(!0)})}),describe("Switch to vertical",()=>{test("UI-Control should be not contain class some-element_horizontal",()=>{l.switchToVertical(),expect(l.control.classList.contains("some-element_horizontal")).toBe(!1)}),test("UI-Control should be contain class some-element_vertical",()=>{l.switchToVertical(),expect(l.control.classList.contains("some-element_vertical")).toBe(!0)})}),describe("Remove",()=>{test("UI-Control should be not exist in the DOM",()=>{const e=document.querySelector("body");null==e||e.append(l.getControl()),l.remove(),expect(document.querySelector(".some-element")).toBe(null)})}),describe("Get orientation",()=>{test("UI-Control orientation should be horizontal",()=>{expect(l.getOrientation()).toBe("horizontal")}),test("UI-Control orientation should be vertical",()=>{l=new o.default("some-element","vertical"),expect(l.getOrientation()).toBe("vertical")})}),describe("Get rect",()=>{test("UI-Control rect should be {top: 40, left: 45, bottom: 50, right: 55}",()=>{l.control.getBoundingClientRect=jest.fn(()=>({width:120,height:120,top:40,left:45,bottom:50,right:55,x:35,y:48,toJSON:()=>null})),expect(l.getRect().top).toBe(40),expect(l.getRect().left).toBe(45),expect(l.getRect().bottom).toBe(50),expect(l.getRect().right).toBe(55)}),test("UI-Control rect should be {top: 11, left: 49, bottom: 60, right: 5}",()=>{l.control.getBoundingClientRect=jest.fn(()=>({width:120,height:120,top:11,left:49,bottom:60,right:5,x:35,y:48,toJSON:()=>null})),expect(l.getRect().top).toBe(11),expect(l.getRect().left).toBe(49),expect(l.getRect().bottom).toBe(60),expect(l.getRect().right).toBe(5)})}),describe("Get style",()=>{test("UI-Control width style should be 138px",()=>{l.control.style.width="138px",expect(l.getStyle("width")).toBe("138px")}),test('UI-Control width style should be ""',()=>{expect(l.getStyle("someStyle")).toBe("")})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,