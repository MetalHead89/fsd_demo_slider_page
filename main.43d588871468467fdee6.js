!function(e){function t(t){for(var s,l,r=t[0],a=t[1],h=t[2],u=0,c=[];u<r.length;u++)l=r[u],Object.prototype.hasOwnProperty.call(n,l)&&n[l]&&c.push(n[l][0]),n[l]=0;for(s in a)Object.prototype.hasOwnProperty.call(a,s)&&(e[s]=a[s]);for(d&&d(t);c.length;)c.shift()();return o.push.apply(o,h||[]),i()}function i(){for(var e,t=0;t<o.length;t++){for(var i=o[t],s=!0,r=1;r<i.length;r++){var a=i[r];0!==n[a]&&(s=!1)}s&&(o.splice(t--,1),e=l(l.s=i[0]))}return e}var s={},n={0:0},o=[];function l(t){if(s[t])return s[t].exports;var i=s[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,l),i.l=!0,i.exports}l.m=e,l.c=s,l.d=function(e,t,i){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,t){if(1&t&&(e=l(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(l.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)l.d(i,s,function(t){return e[t]}.bind(null,s));return i},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="";var r=window.webpackJsonp=window.webpackJsonp||[],a=r.push.bind(r);r.push=t,r=r.slice();for(var h=0;h<r.length;h++)t(r[h]);var d=a;o.push([2,1]),i()}([,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{generateID(e){for(;;){const t=e+this.generateRandNumber();if(!document.getElementById(t))return t}}generateName(e){for(;;){const t=e+this.generateRandNumber();if(0==document.getElementsByName(t).length)return t}}generateRandNumber(){return Math.floor(1+1e5*Math.random())}createControl(e){e.inputElement.type=e.inputType,e.inputElement.className=e.inputClass;const t=document.createElement("label");return t.classList.add(e.labelClass),t.textContent=e.labelText,e.id&&(e.inputElement.id=e.id,t.htmlFor=e.id),e.name&&(e.inputElement.name=e.name),e.value&&(e.inputElement.value=e.value),this.wrapElements(e.wrapperClass,e.inputElement,t)}wrapElements(e,...t){const i=document.createElement("div");i.className=e;for(const e of t)i.append(e);return i}}},function(e,t,i){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),i(3),i(17),i(22),i(23),i(24),i(25),i(26);const s=document.querySelector(".add-new-slider-btn");let n=document.querySelector(".help-image");const o=document.querySelector(".button-wrapper");function l(e){e.remove(),0==document.querySelectorAll(".slider-wrapper").length&&null!==s&&s.classList.add("add-new-slider-btn_margin-top")}null!==s&&s.addEventListener("click",(function(){if(null!==o){null!=n&&(n.remove(),n=null),null!=s&&s.classList.remove("add-new-slider-btn_margin-top");const t=document.createElement("div");t.classList.add("slider-wrapper"),o.before(t);const i=document.createElement("span");i.classList.add("material-icons","remove-slider-button__icon"),i.innerText="clear";const r=document.createElement("button");r.classList.add("remove-slider-button"),r.append(i),r.addEventListener("click",l.bind(r,t)),t.append(r),e(t).incredibleSliderPlugin(),e(t).sliderControlPanel()}}))}).call(this,i(0))},function(e,t,i){"use strict";(function(e){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(4));!function(e){const t={orienation:"horizontal",type:"range",scale:!0,tooltips:!0,min:0,max:10,step:1},i={init:function(i){const s=e.extend(t,i);return this.each((function(){const t=new n.default(s,this);e(this).data("settings",s),e(this).data("sliderPresenter",t)}))},setMin:function(t){e(this).data().sliderPresenter.changeMinValue(t)},getMin:function(){return e(this).data().sliderPresenter.getSliderMinValue()},setMax:function(t){e(this).data().sliderPresenter.changeMaxValue(t)},getMax:function(){return e(this).data().sliderPresenter.getSliderMaxValue()},getStep:function(){return e(this).data().sliderPresenter.getSliderStep()},setStep:function(t){e(this).data().sliderPresenter.changeStep(t)},changeScaleVisibility:function(t){e(this).data().sliderPresenter.changeScaleVisibility(t)},changeTooltipsVisibility:function(t){e(this).data().sliderPresenter.changeTooltipsVisibility(t)},getScaleVisiblity:function(){return e(this).data().sliderPresenter.getScaleVisiblity()},getTooltipsVisiblity:function(){return e(this).data().sliderPresenter.getTooltipsVisiblity()},changeSliderType:function(t){return e(this).data().sliderPresenter.changeSliderType(t)},getSliderType:function(){return e(this).data().sliderPresenter.getSliderType()},getSliderOrientation:function(){return e(this).data().sliderPresenter.getSliderOrientation()},changeSliderOrientation:function(t){return e(this).data().sliderPresenter.changeSliderOrientation(t)}};e.fn.incredibleSliderPlugin=function(t,s){return"string"==typeof t&&i[t]?i[t].call(this,s):"object"!=typeof t&&t?(e.error("Метод с именем "+t+" не существует для jQuery.incredibleSliderPlugin"),this):i.init.call(this,s)}}(e)}).call(this,i(0))},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(5)),o=s(i(6)),l=s(i(9));t.default=class{constructor(e,t){this.observer=new n.default,this.model=new o.default(this.observer,e),this.view=new l.default(this.observer,t),this.addObserverListeners(),this.createNewSlider()}addObserverListeners(){this.observer.subscribe("sliderElementIsCreated",e=>{this.model.setSliderSize(e)}),this.observer.subscribe("thumbOneIsCreated",e=>{this.model.setThumbSize(e)}),this.observer.subscribe("thumbOneIsDragged",e=>{this.model.dragthumbOne(e)}),this.observer.subscribe("thumbTwoIsDragged",e=>{this.model.dragThumbTwo(e)}),this.observer.subscribe("thumbOneDragged",e=>{this.view.moveThumbOne(e.thumbPosition),this.view.tooltipOneSetValue(e.tooltipValue),this.view.moveTooltipOne(this.model.getTooltipPosition(e.thumbPosition))}),this.observer.subscribe("thumbTwoDragged",e=>{this.view.moveThumbTwo(e.thumbPosition),this.view.tooltipTwoSetValue(e.tooltipValue),this.view.moveTooltipTwo(this.model.getTooltipPosition(e.thumbPosition))}),this.observer.subscribe("progressBarDraged",e=>{this.view.setProgressBarPosition(e)}),this.observer.subscribe("scaleIsCreated",()=>{this.model.setScalePointSize(this.getScalePointMaxSize()),this.model.generateScale()}),this.observer.subscribe("addScalePoint",e=>{this.view.addScalePoint(e)}),this.observer.subscribe("clickOnTheScale",e=>{this.model.moveThumbToClickPosition(e)}),this.observer.subscribe("clickOnTheTrack",e=>{this.model.moveThumbToClickPosition(e)}),this.observer.subscribe("scaleCreated",e=>{this.view.setScaleSize(e),this.addMarginsToSlider()}),this.observer.subscribe("sliderResized",()=>{this.view.removeSlider(),this.createNewSlider(!1)})}addMarginsToSlider(){this.view.setSliderMargins({left:0,top:0,right:0,bottom:0});const e=this.model.getSliderMargins(this.view.getCoordsForMargins());this.view.setSliderMargins(e)}createNewSlider(e=!0){const t=this.model.getSliderOrientation();this.view.createSlider("slider slider_"+t),this.view.createTrack("slider__track slider__track_"+t),this.view.createProgressBar("slider__progress-bar slider__progress-bar_"+t),this.createThumbs(t,e),this.model.getScaleVisiblity()&&this.view.createScale("slider__scale slider__scale_"+t)}createThumbs(e,t=!0){const i=this.model.getSliderType(),s=this.model.getTooltipsVisiblity();this.view.createThumbOne("slider__thumb slider__thumb-one slider__thumb_"+e),s&&this.view.createTooltipOne("slider__tooltip slider__tooltip_"+e),"range"===i&&(this.view.createThumbTwo("slider__thumb slider__thumb-two slider__thumb_"+e),s&&this.view.createTooltipTwo("slider__tooltip slider__tooltip_"+e),t?this.model.setThumbTwoToStartingPosition():this.model.dragThumbTwo(this.model.getThumbTwoPosition())),t?this.model.setThumbOneToStartingPosition():this.model.dragthumbOne(this.model.getThumbOnePosition())}getScalePointMaxSize(){const e=this.model.getMax();return this.view.getScalePointMaxSize(e)}getScaleVisiblity(){return this.model.getScaleVisiblity()}getTooltipsVisiblity(){return this.model.getTooltipsVisiblity()}getSliderType(){return this.model.getSliderType()}getSliderOrientation(){return this.model.getSliderOrientation()}getSliderMinValue(){return this.model.getMin()}getSliderMaxValue(){return this.model.getMax()}changeSliderOrientation(e){if(e!==this.model.getSliderOrientation()){this.model.setSliderOrientation(e);const t=this.model.getThumbOnePosition(),i=this.model.getThumbTwoPosition();this.model.setThumbOnePosition({left:t.top,top:t.left}),this.model.setThumbTwoPosition({left:i.top,top:i.left}),this.view.removeSlider(),this.createNewSlider()}}changeSliderType(e){this.view.removeThumbOne(),this.view.removeThumbTwo(),this.model.setSliderType(e),this.createThumbs(this.model.getSliderOrientation(),!1)}changeMinValue(e){this.model.setMin(e)&&(this.view.removeSlider(),this.createNewSlider())}changeMaxValue(e){this.model.setMax(e)&&(this.view.removeSlider(),this.createNewSlider())}getSliderStep(){return this.model.getStep()}changeStep(e){this.model.setStep(e)&&(this.view.removeSlider(),this.createNewSlider())}changeScaleVisibility(e){this.model.setScaleVisibility(e),e?this.view.createScale("slider__scale slider__scale_"+this.model.getSliderOrientation()):this.view.removeScale(),this.addMarginsToSlider()}changeTooltipsVisibility(e){this.model.setTooltipsVisible(e),e?(this.view.removeThumbOne(),this.view.removeThumbTwo(),this.createThumbs(this.model.getSliderOrientation(),!1)):(this.view.removeTooltipOne(),this.view.removeTooltipTwo()),this.addMarginsToSlider()}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.observables={}}subscribe(e,t){this.observables[e]=this.observables[e]||[],this.observables[e].push(t)}unsubscribe(e,t){this.observables[e]=this.observables[e].filter(e=>e!==t)}notify(e,t){this.observables[e]&&this.observables[e].forEach((function(e){e(t)}))}}},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(7)),o=s(i(8));t.default=class{constructor(e,t){this.observer=e,this.data=new o.default(t),this.calculator=new n.default(this.observer,this.data)}setSliderSize(e){this.data.setSliderSize(e)}setThumbSize(e){this.data.setThumbSize(e)}getSliderOrientation(){return this.data.getOrientation()}setSliderOrientation(e){this.data.setOrientation(e)}getSliderType(){return this.data.getSliderType()}setSliderType(e){this.data.setSliderType(e)}setTooltipsVisible(e){this.data.setTooltipsVisible(e)}getTooltipsVisiblity(){return this.data.getTooltipsVisible()}setScalePointSize(e){this.data.setScalePointSize(e)}getMax(){return this.data.getMax()}generateScale(){this.calculator.generateScale()}dragthumbOne(e){this.calculator.dragThumbOne(e)}dragThumbTwo(e){this.calculator.dragThumbTwo(e)}setThumbOneToStartingPosition(){this.calculator.setThumbOneToStartingPosition()}setThumbTwoToStartingPosition(){this.calculator.setThumbTwoToStartingPosition()}setMin(e){return this.data.setMin(e)}getMin(){return this.data.getMin()}setMax(e){return this.data.setMax(e)}setStep(e){return this.data.setStep(e)}getStep(){return this.data.getStep()}setScaleVisibility(e){this.data.setScaleVisible(e)}getScaleVisiblity(){return this.data.getScaleVisible()}getThumbOnePosition(){return this.data.getThumbOnePosition()}setThumbOnePosition(e){this.data.setThumbOnePosition(e)}getThumbTwoPosition(){return this.data.getThumbTwoPosition()}setThumbTwoPosition(e){this.data.setThumbTwoPosition(e)}moveThumbToClickPosition(e){this.calculator.moveThumbToClickPosition(e)}getTooltipPosition(e){return this.calculator.getTooltipPosition(e)}getSliderMargins(e){return this.calculator.getSliderMargins(e)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.observer=e,this.data=t}dragThumbOne(e){this.data.setThumbOnePosition(this.changePositionAccordingToStep(e));const t=this.data.getThumbOnePosition(),i=this.positionToValue(this.getElementPosByOrientation(this.data.getThumbOnePosition()));this.thumbDrag(t,"thumbOneDragged",i)}dragThumbTwo(e){this.data.setThumbTwoPosition(this.changePositionAccordingToStep(e));const t=this.data.getThumbTwoPosition(),i=this.positionToValue(this.getElementPosByOrientation(this.data.getThumbTwoPosition()));this.thumbDrag(t,"thumbTwoDragged",i)}moveThumbToClickPosition(e){const t={left:e.x-this.data.getThumbSize().width/2,top:e.y-this.data.getThumbSize().height/2};"range"===this.data.getSliderType()&&Math.abs(this.getElementPosByOrientation(t)-this.getElementPosByOrientation(this.data.getThumbOnePosition()))>Math.abs(this.getElementPosByOrientation(t)-this.getElementPosByOrientation(this.data.getThumbTwoPosition()))?this.dragThumbTwo(t):this.dragThumbOne(t)}setThumbOneToStartingPosition(){"horizontal"===this.data.getOrientation()?"single"===this.data.getSliderType()?this.dragThumbOne({left:this.data.getSliderSize().width/2-this.data.getThumbSize().width/2,top:0}):this.dragThumbOne({left:.3*this.data.getSliderSize().width-this.data.getThumbSize().width/2,top:0}):"single"===this.data.getSliderType()?this.dragThumbOne({left:0,top:this.data.getSliderSize().height/2-this.data.getThumbSize().height/2}):this.dragThumbOne({left:0,top:.3*this.data.getSliderSize().height-this.data.getThumbSize().height/2})}setThumbTwoToStartingPosition(){"horizontal"===this.data.getOrientation()?this.dragThumbTwo({left:.7*this.data.getSliderSize().width-this.data.getThumbSize().width/2,top:0}):this.dragThumbTwo({left:0,top:.7*this.data.getSliderSize().height-this.data.getThumbSize().height/2})}generateScale(){let e=this.getElementSizeByOrientation(this.data.getThumbSize())/2-this.getElementSizeByOrientation(this.data.getScalePointSize())/2;const t=this.calculateStepsCount(),i=this.calculateStepSize();let s=0;const n=t+1;for(let t=0;t<=Math.round(n-1);t++){const o=this.positionToValue(e-this.getElementSizeByOrientation(this.data.getThumbSize())/2+this.getElementSizeByOrientation(this.data.getScalePointSize())/2);(0===t||this.isPointFits(e,s))&&(this.observer.notify("addScalePoint",{position:e,scalePointSize:this.getElementSizeByOrientation(this.data.getScalePointSize()),scalePointValue:o}),s=e),e+=i,t===Math.round(n-2)&&(e=this.getElementSizeByOrientation(this.data.getSliderSize())-this.getElementSizeByOrientation(this.data.getThumbSize())/2-this.getElementSizeByOrientation(this.data.getScalePointSize())/2,"horizontal"===this.data.getOrientation()?this.observer.notify("scaleCreated",{width:this.data.getSliderSize().width,height:this.data.getScalePointSize().height}):this.observer.notify("scaleCreated",{width:this.data.getScalePointSize().width,height:this.data.getSliderSize().height}))}}getSliderMargins(e){let t=0,i=0,s=0,n=0;return"horizontal"===this.data.getOrientation()?null!=e.sliderCoords&&(null!==e.scaleCoords&&(n=e.scaleCoords.bottom-e.sliderCoords.bottom),null!==e.tooltipCoords&&(i=e.sliderCoords.top-e.tooltipCoords.top)):null!==e.sliderCoords&&(null!==e.tooltipCoords&&(t=e.sliderCoords.left-e.tooltipCoords.left),null!==e.scaleCoords&&(s=e.scaleCoords.right-e.sliderCoords.right)),{left:t,top:i,right:s,bottom:n}}getTooltipPosition(e){const t=this.data.getOrientation(),i=this.data.getThumbSize();let s=0,n=0;return"horizontal"===t?s=e.left+i.width/2:n=e.top+i.height/2,{left:s,top:n}}isPointFits(e,t){return e-t-2>this.getElementSizeByOrientation(this.data.getScalePointSize())}thumbDrag(e,t,i){const s=Object.assign({},e);"horizontal"===this.data.getOrientation()?s.top=0:s.left=0,this.observer.notify(t,{thumbPosition:s,tooltipValue:i}),this.observer.notify("progressBarDraged",this.calcProgressBarPosition())}getElementSizeByOrientation(e){return"vertical"===this.data.getOrientation()?e.height:e.width}getElementPosByOrientation(e){return"vertical"===this.data.getOrientation()?e.top:e.left}calculateStepsCount(){return(this.data.getMax()-this.data.getMin())/this.data.getStep()}calculateStepSize(){return(this.getElementSizeByOrientation(this.data.getSliderSize())-this.getElementSizeByOrientation(this.data.getThumbSize()))/this.calculateStepsCount()}changePositionAccordingToStep(e){return e.left=Math.round(e.left/this.calculateStepSize())*this.calculateStepSize(),e.top=Math.round(e.top/this.calculateStepSize())*this.calculateStepSize(),e}positionToValue(e){const t=this.calculatePixelsPerValue();return Math.round(this.data.getMin()+(this.data.getMax()-this.data.getMin())/100*Math.round(e/t))}calculatePixelsPerValue(){return(this.getElementSizeByOrientation(this.data.getSliderSize())-this.getElementSizeByOrientation(this.data.getThumbSize()))/100}calcProgressBarPosition(){const e={orientation:this.data.getOrientation(),start:0,end:0};return"single"===this.data.getSliderType()?(e.start=0,e.end=this.getElementPosByOrientation(this.data.getThumbOnePosition())+this.getElementSizeByOrientation(this.data.getThumbSize())):(e.start=this.getElementPosByOrientation(this.data.getThumbOnePosition()),e.end=this.getElementPosByOrientation(this.data.getThumbTwoPosition())-this.getElementPosByOrientation(this.data.getThumbOnePosition())+this.getElementSizeByOrientation(this.data.getThumbSize())),e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.sliderSize={width:0,height:0},this.thumbSize={width:0,height:0},this.thumbOnePosition={left:0,top:0},this.thumbTwoPosition={left:0,top:0},this.scalePointSize={width:0,height:0},this.orientation=e.orienation,this.type=e.type,this.scaleVisible=e.scale,this.tooltipsVisible=e.tooltips,this.min=e.min,this.max=e.max,this.step=e.step}setOrientation(e){"horizontal"!==e&&"vertical"!==e||(this.orientation=e)}getOrientation(){return this.orientation}setSliderType(e){"single"!==e&&"range"!==e||(this.type=e)}getSliderType(){return this.type}setSliderSize(e){const t=e.width>=0?e.width:0,i=e.height>=0?e.height:0;this.sliderSize={width:t,height:i}}getSliderSize(){return this.sliderSize}setThumbSize(e){const t=e.width>=0?e.width:0,i=e.height>=0?e.height:0;this.thumbSize={width:t,height:i}}getThumbSize(){return this.thumbSize}setTooltipsVisible(e){this.tooltipsVisible=e}getTooltipsVisible(){return this.tooltipsVisible}setScaleVisible(e){this.scaleVisible=e}getScaleVisible(){return this.scaleVisible}setMin(e){return e<=this.max&&(this.min=e,!0)}getMin(){return this.min}setMax(e){return e>=this.min&&(this.max=e,!0)}getMax(){return this.max}setStep(e){return e>0&&(this.step=e,!0)}getStep(){return this.step}setThumbOnePosition(e){let t=this.getThumbOnePosition().left,i=this.getThumbOnePosition().top;t=this.thumbIsOutOfRangeHorizontally(e)?"single"===this.type?this.getSliderSize().width-this.getThumbSize().width:this.getThumbTwoPosition().left:e.left>=0?e.left:0,i=this.thumbIsOutOfRangeVertically(e)?"single"===this.type?this.getSliderSize().height-this.getThumbSize().height:this.getThumbTwoPosition().top:e.top>=0?e.top:0,this.thumbOnePosition={left:t,top:i}}thumbIsOutOfRangeHorizontally(e){return!("single"===this.type&&e.left<=this.getSliderSize().width-this.getThumbSize().width||e.left<=this.getThumbTwoPosition().left)}thumbIsOutOfRangeVertically(e){return!("single"===this.type&&e.top<=this.getSliderSize().height-this.getThumbSize().height||e.top<=this.getThumbTwoPosition().top)}getThumbOnePosition(){return this.thumbOnePosition}setThumbTwoPosition(e){let t=this.getThumbTwoPosition().left,i=this.getThumbTwoPosition().top;t=e.left>=this.getThumbOnePosition().left?e.left<=this.getSliderSize().width-this.getThumbSize().width?e.left:this.getSliderSize().width-this.getThumbSize().width:this.getThumbOnePosition().left,i=e.top>=this.getThumbOnePosition().top?e.top<=this.getSliderSize().height-this.getThumbSize().height?e.top:this.getSliderSize().height-this.getThumbSize().height:this.getThumbOnePosition().top,this.thumbTwoPosition={left:t,top:i}}getThumbTwoPosition(){return this.thumbTwoPosition}setScalePointSize(e){this.scalePointSize=e}getScalePointSize(){return this.scalePointSize}}},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(10));t.default=class{constructor(e,t){this.slider=null,this.track=null,this.thumbOne=null,this.thumbTwo=null,this.tooltipOne=null,this.tooltipTwo=null,this.progressBar=null,this.scale=null,this.observer=e,this.sliderWrapper=t,this.elementFactory=new n.default,this.addWindowResizeEventListener(),this.observer.subscribe("changeZIndexToAnotherThumb",e=>{null!==this.thumbOne&&null!==this.thumbTwo&&(e.isEqualNode(this.thumbOne.getElement())?this.thumbTwo.setZIndex("2"):this.thumbOne.setZIndex("2"))})}addWindowResizeEventListener(){window.addEventListener("resize",this.windowResize.bind(this))}windowResize(){this.observer.notify("sliderResized",null)}createSlider(e){this.slider=this.elementFactory.createSlider(this.sliderWrapper,e),this.observer.notify("sliderElementIsCreated",this.slider.getSize())}createTrack(e){null!=this.slider&&(this.track=this.elementFactory.createTrack(this.slider.getElement(),e,this.observer))}createThumbOne(e){null!=this.slider&&(this.thumbOne=this.elementFactory.createThumb(this.slider.getElement(),e,this.observer),this.observer.notify("thumbOneIsCreated",this.thumbOne.getSize()))}createThumbTwo(e){null!=this.slider&&(this.thumbTwo=this.elementFactory.createThumb(this.slider.getElement(),e,this.observer))}createTooltipOne(e){null!=this.slider&&null!=this.thumbOne&&(this.tooltipOne=this.elementFactory.createTooltip(this.slider.getElement(),e))}createTooltipTwo(e){null!=this.slider&&null!=this.thumbTwo&&(this.tooltipTwo=this.elementFactory.createTooltip(this.slider.getElement(),e))}createProgressBar(e){null!=this.slider&&(this.progressBar=this.elementFactory.createProgressBar(this.slider.getElement(),e))}createScale(e){null!=this.slider&&(this.scale=this.elementFactory.createScale(this.slider.getElement(),e,this.observer),this.observer.notify("scaleIsCreated",null))}moveThumbOne(e){null!==this.thumbOne&&this.thumbOne.moveTo(e)}moveTooltipOne(e){null!==this.tooltipOne&&this.tooltipOne.moveTo(e)}getCoordsForMargins(){let e=null,t=null,i=null;return null!==this.slider&&(e=this.slider.getCoords()),null!==this.tooltipOne&&(t=this.tooltipOne.getCoords()),null!==this.scale&&(i=this.scale.getCoords()),{sliderCoords:e,tooltipCoords:t,scaleCoords:i}}setSliderMargins(e){null!==this.slider&&this.slider.setMargins(e)}tooltipOneSetValue(e){null!==this.tooltipOne&&this.tooltipOne.setValue(e)}moveThumbTwo(e){null!=this.thumbTwo&&this.thumbTwo.moveTo(e)}moveTooltipTwo(e){null!==this.tooltipTwo&&this.tooltipTwo.moveTo(e)}tooltipTwoSetValue(e){null!==this.tooltipTwo&&this.tooltipTwo.setValue(e)}setProgressBarPosition(e){null!==this.progressBar&&this.progressBar.setPosition(e)}getScalePointMaxSize(e){return null!==this.scale?this.scale.getScalePointMaxSize(e):{width:0,height:0}}addScalePoint(e){null!==this.scale&&this.scale.addScalePoint(e.position,e.scalePointSize,e.scalePointValue)}removeSlider(){null!==this.slider&&(this.slider.remove(),this.slider=null)}removeThumbOne(){null!==this.thumbOne&&(this.thumbOne.remove(),null!=this.tooltipOne&&(this.tooltipOne.remove(),this.tooltipOne=null))}removeThumbTwo(){null!==this.thumbTwo&&(this.thumbTwo.remove(),null!=this.tooltipTwo&&(this.tooltipTwo.remove(),this.tooltipTwo=null))}removeScale(){null!==this.scale&&(this.scale.remove(),this.scale=null)}removeTooltipOne(){null!==this.tooltipOne&&(this.tooltipOne.remove(),this.tooltipOne=null)}removeTooltipTwo(){null!==this.tooltipTwo&&(this.tooltipTwo.remove(),this.tooltipTwo=null)}setScaleSize(e){null!==this.scale&&this.scale.setScaleSize(e.width,e.height)}}},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(11)),o=s(i(12)),l=s(i(13)),r=s(i(14)),a=s(i(15)),h=s(i(16));t.default=class{createElement(e,t,i){const s=document.createElement("div");s.className=t;const n=i(s);return e.prepend(s),n}createSlider(e,t){return this.createElement(e,t,e=>new n.default(e))}createTrack(e,t,i){return this.createElement(e,t,e=>new o.default(e,i))}createThumb(e,t,i){return this.createElement(e,t,e=>new l.default(e,i))}createTooltip(e,t){return this.createElement(e,t,e=>new r.default(e))}createProgressBar(e,t){return this.createElement(e,t,e=>new a.default(e))}createScale(e,t,i){return this.createElement(e,t,e=>new h.default(e,i))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.element=e}getElement(){return this.element}setSize(e){this.element.style.width=e.width+"px",this.element.style.height=e.height+"px"}getSize(){return{width:this.element.offsetWidth,height:this.element.offsetHeight}}remove(){this.element.remove()}getCoords(){const e=this.element.getBoundingClientRect();return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}setMargins(e){this.element.style.margin=`${e.top}px ${e.right}px ${e.bottom}px ${e.left}px`}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.element=e,this.observer=t,this.addClickEventListener()}addClickEventListener(){this.element.addEventListener("click",this.clickToTrack.bind(this))}clickToTrack(e){this.observer.notify("clickOnTheTrack",this.getPosition({x:e.clientX,y:e.clientY}))}getPosition(e){const t=Object.assign({},e),i=this.element.parentElement;if(null!==i){const e=i.getBoundingClientRect();t.x=t.x-e.left,t.y=t.y-e.top}return t}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.shift={shiftX:0,shiftY:0},this.onMouseMoveHandler=new Function,this.onMouseUpHandler=new Function,this.element=e,this.observer=t,this.addMousedownEventListener(),this.addTouchstartEventListener(),this.disableDragAndDrop()}disableDragAndDrop(){this.element.ondragstart=function(){return!1}}addMousedownEventListener(){this.element.addEventListener("mousedown",this.moveMouse.bind(this))}moveMouse(e){this.startDrag(e.clientX,e.clientY)}addTouchstartEventListener(){this.element.addEventListener("touchstart",this.moveTouch.bind(this))}moveTouch(e){this.startDrag(e.targetTouches[0].pageX,e.targetTouches[0].pageY)}getElement(){return this.element}getSize(){return{width:this.element.offsetWidth,height:this.element.offsetHeight}}setZIndex(e){this.element.style.zIndex=e}moveTo(e){this.element.style.left=e.left+"px",this.element.style.top=e.top+"px"}remove(){this.element.remove()}startDrag(e,t){this.setZIndex("3"),this.observer.notify("changeZIndexToAnotherThumb",this.element);const i=this.element.getBoundingClientRect();this.shift.shiftX=e-i.left,this.shift.shiftY=t-i.top,this.onMouseMoveHandler=this.drag.bind(this),this.onMouseUpHandler=this.endDrag.bind(this),document.addEventListener("mousemove",this.onMouseMoveHandler),document.addEventListener("mouseup",this.onMouseUpHandler),document.addEventListener("touchmove",this.onMouseMoveHandler),document.addEventListener("touchend",this.onMouseUpHandler)}drag(e){let t="thumbOneIsDragged";this.element.classList.contains("slider__thumb-two")&&(t="thumbTwoIsDragged"),e instanceof MouseEvent?this.observer.notify(t,this.getPosition({x:e.clientX,y:e.clientY})):this.observer.notify(t,this.getPosition({x:e.targetTouches[0].pageX,y:e.targetTouches[0].pageY}))}getPosition(e){const t={left:e.x,top:e.y},i=this.element.parentElement;if(null!==i){const e=i.getBoundingClientRect();t.left=t.left-e.left-this.shift.shiftX,t.top=t.top-e.top-this.shift.shiftY}return t}endDrag(){document.removeEventListener("mousemove",this.onMouseMoveHandler),document.removeEventListener("mouseup",this.onMouseUpHandler),document.removeEventListener("touchmove",this.onMouseMoveHandler),document.removeEventListener("touchend",this.onMouseUpHandler)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.element=e}setValue(e){this.element.innerText=e.toString()}moveTo(e){this.element.style.left=e.left+"px",this.element.style.top=e.top+"px"}remove(){this.element.remove()}getCoords(){const e=this.element.getBoundingClientRect();return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.element=e}getElement(){return this.element}setPosition(e){"horizontal"===e.orientation?(this.setHorizontalOrientation(),this.element.style.left=e.start+"px",this.element.style.width=e.end+"px"):(this.setVerticalOrientation(),this.element.style.top=e.start+"px",this.element.style.height=e.end+"px")}setHorizontalOrientation(){this.element.removeAttribute("style"),this.element.classList.remove("slider__progress-bar_vertical"),this.element.classList.add("slider__progress-bar_horizontal")}setVerticalOrientation(){this.element.removeAttribute("style"),this.element.classList.remove("slider__progress-bar_horizontal"),this.element.classList.add("slider__progress-bar_vertical")}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.element=e,this.observer=t,this.orientation=e.classList.contains("slider__scale_vertical")?"vertical":"horizontal",this.addClickEventListener()}addClickEventListener(){this.element.addEventListener("click",this.clickToScale.bind(this))}clickToScale(e){this.observer.notify("clickOnTheScale",this.getPosition({x:e.clientX,y:e.clientY}))}getScalePointMaxSize(e){const t=this.addScalePoint(0,0,e),i=t.offsetWidth,s=t.offsetHeight;return t.remove(),{width:i,height:s}}addScalePoint(e,t,i){const s=document.createElement("div");"horizontal"===this.orientation?s.className="slider__scale-point slider__scale-point_horizontal":s.className="slider__scale-point slider__scale-point_vertical",t>0&&(s.style.width=t+"px");const n=document.createElement("div");n.className="slider__scale-point-marker";const o=document.createElement("div");return"horizontal"===this.orientation?o.className="slider__scale-point-label slider__scale-point-label_horizontal":o.className="slider__scale-point-label slider__scale-point-label_vertical",o.innerText=i.toString(),"horizontal"===this.orientation?s.style.left=e+"px":s.style.top=e+"px",s.append(n),s.append(o),this.element.append(s),s}remove(){this.element.remove()}setScaleSize(e,t){this.element.style.width=e+"px",this.element.style.height=t+"px"}getPosition(e){const t=Object.assign({},e),i=this.element.parentElement;if(null!==i){const e=i.getBoundingClientRect();t.x=t.x-e.left,t.y=t.y-e.top}return t}getCoords(){const e=this.element.getBoundingClientRect();return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}}},function(e,t,i){"use strict";(function(e){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(18));e.fn.sliderControlPanel=function(){return new n.default(this),this}}).call(this,i(0))},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(19)),o=s(i(20)),l=s(i(21));t.default=class{constructor(e){this.sliderPanel=document.createElement("div"),this.minValue=document.createElement("input"),this.maxValue=document.createElement("input"),this.step=document.createElement("input"),this.scaleChBox=document.createElement("input"),this.tooltipChBox=document.createElement("input"),this.singleRadioButton=document.createElement("input"),this.rangeRadioButton=document.createElement("input"),this.horizontalRadioButton=document.createElement("input"),this.verticalRadioButton=document.createElement("input"),this.sliderElem=e,this.createPanel(),this.addEventListenersToPanel()}createPanel(){const e=this.createInputTextGroup(),t=this.createRadioTextGroup(),i=this.createCheckboxTextGroup(),s=this.wrapElements("slider-panel__checkboxes-and-radio-wrapper",t,i);this.sliderPanel.className="slider-panel",this.sliderPanel.append(e),this.sliderPanel.append(s);const n=String(this.sliderElem.incredibleSliderPlugin("getSliderType"));"single"==n?this.singleRadioButton.checked=!0:"range"==n&&(this.rangeRadioButton.checked=!0);const o=String(this.sliderElem.incredibleSliderPlugin("getSliderOrientation"));"horizontal"==o?(this.setSliderWrapperHorizontalOrientation(),this.horizontalRadioButton.checked=!0):"vertical"==o&&(this.setSliderWrapperVerticalOrientation(),this.verticalRadioButton.checked=!0);const l=document.createElement("div");l.className="panel-wrapper",l.append(this.sliderPanel),this.sliderElem.append(l)}addEventListenersToPanel(){this.minValue.addEventListener("keyup",this.minKeyupEvent.bind(this)),this.maxValue.addEventListener("keyup",this.maxKeyupEvent.bind(this)),this.step.addEventListener("keyup",this.stepKeyupEvent.bind(this)),this.scaleChBox.addEventListener("click",this.scaleChBoxClickEvent.bind(this)),this.tooltipChBox.addEventListener("click",this.tooltipChBoxClickEvent.bind(this)),this.singleRadioButton.addEventListener("click",this.singleRadioButtonClickEvent.bind(this)),this.rangeRadioButton.addEventListener("click",this.rangeRadioButtonClickEvent.bind(this)),this.horizontalRadioButton.addEventListener("click",this.horizontalRadioButtonClickEvent.bind(this)),this.verticalRadioButton.addEventListener("click",this.verticalRadioButtonClickEvent.bind(this))}minKeyupEvent(){const e=this.minValue.value.replace(/[^\d]/g,"");this.setMinValueSlider(e)}maxKeyupEvent(){const e=this.maxValue.value.replace(/[^\d]/g,"");this.setMaxValueSlider(e)}stepKeyupEvent(){const e=this.step.value.replace(/[^\d]/g,"");this.setStepValueSlider(e)}scaleChBoxClickEvent(){this.sliderElem.incredibleSliderPlugin("changeScaleVisibility",this.scaleChBox.checked)}tooltipChBoxClickEvent(){this.sliderElem.incredibleSliderPlugin("changeTooltipsVisibility",this.tooltipChBox.checked)}singleRadioButtonClickEvent(){this.sliderElem.incredibleSliderPlugin("changeSliderType",this.singleRadioButton.value)}rangeRadioButtonClickEvent(){this.sliderElem.incredibleSliderPlugin("changeSliderType",this.rangeRadioButton.value)}horizontalRadioButtonClickEvent(){this.setSliderWrapperHorizontalOrientation(),this.sliderElem.incredibleSliderPlugin("changeSliderOrientation",this.horizontalRadioButton.value)}verticalRadioButtonClickEvent(){this.setSliderWrapperVerticalOrientation(),this.sliderElem.incredibleSliderPlugin("changeSliderOrientation",this.verticalRadioButton.value)}createInputTextGroup(){this.minValue.value=String(this.sliderElem.incredibleSliderPlugin("getMin")),this.maxValue.value=String(this.sliderElem.incredibleSliderPlugin("getMax")),this.step.value=String(this.sliderElem.incredibleSliderPlugin("getStep"));return this.wrapElements("slider-panel__input-text-group",new l.default(this.minValue,"min","min").getControl(),new l.default(this.maxValue,"max","max").getControl(),new l.default(this.step,"step","step").getControl())}createRadioTextGroup(){const e=[{input:this.singleRadioButton,id:"single",label:"single",value:"single"},{input:this.rangeRadioButton,id:"range",label:"range",value:"range"}],t=document.createElement("label");t.innerText="type",t.classList.add("slider-panel__radio-group-label");const i=new o.default(e,"sliderType"),s=[{input:this.horizontalRadioButton,id:"horizontal",label:"horizontal",value:"horizontal"},{input:this.verticalRadioButton,id:"vertical",label:"vertical",value:"vertical"}],n=document.createElement("label");n.innerText="orientation",n.classList.add("slider-panel__radio-group-label");const l=new o.default(s,"sliderOrientation");return this.wrapElements("slider-panel__input-radio-buttons-group",t,i.getControl(),n,l.getControl())}createCheckboxTextGroup(){const e=document.createElement("label");e.innerText="on/off elements",e.classList.add("slider-panel__checkboxes-group-label");const t=new n.default(this.scaleChBox,"scale","scale");this.scaleChBox.checked=Boolean(this.sliderElem.incredibleSliderPlugin("getScaleVisiblity"));const i=new n.default(this.tooltipChBox,"tooltips","tooltips");this.tooltipChBox.checked=Boolean(this.sliderElem.incredibleSliderPlugin("getTooltipsVisiblity"));return this.wrapElements("slider-panel__input-checkboxes-group",e,t.getControl(),i.getControl())}wrapElements(e,...t){const i=document.createElement("div");i.className=e;for(const e of t)i.append(e);return i}setSliderWrapperHorizontalOrientation(){this.sliderElem.removeClass("slider-wrapper_vertical"),this.sliderElem.addClass("slider-wrapper_horizontal"),this.setPanelHorizontalOrientation()}setSliderWrapperVerticalOrientation(){this.sliderElem.removeClass("slider-wrapper_horizontal"),this.sliderElem.addClass("slider-wrapper_vertical"),this.setPanelVerticalOrientation()}setPanelHorizontalOrientation(){this.sliderPanel.classList.remove("slider-panel_vertical"),this.sliderPanel.classList.add("slider-panel_horizontal")}setPanelVerticalOrientation(){this.sliderPanel.classList.remove("slider-panel_horizontal"),this.sliderPanel.classList.add("slider-panel_vertical")}setMinValueSlider(e){if(this.minValue){let t=parseInt(e);isNaN(t)&&(t=0),t>=parseInt(this.maxValue.value)&&(t=Number(this.sliderElem.incredibleSliderPlugin("getMax"))-1),this.sliderElem.incredibleSliderPlugin("setMin",t),this.minValue.value=t.toString()}}setMaxValueSlider(e){if(this.maxValue){let t=parseInt(e);isNaN(t)&&(t=Number(this.sliderElem.incredibleSliderPlugin("getMax"))),t<=parseInt(this.minValue.value)&&(t=Number(this.sliderElem.incredibleSliderPlugin("getMin"))+1),this.sliderElem.incredibleSliderPlugin("setMax",t),this.maxValue.value=t.toString()}}setStepValueSlider(e){if(this.step){const t=parseInt(e);isNaN(t)?this.step.value="1":(this.sliderElem.incredibleSliderPlugin("setStep",t),this.step.value=t.toString())}}}},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(e,t,i){super();const s={inputElement:e,id:this.generateID(i),inputType:"checkbox",inputClass:"slider-panel__checkbox",labelText:t,labelClass:"slider-panel__input-checkbox-label",wrapperClass:"slider-panel__input-checkbox-wrapper"};this.control=this.createControl(s)}getControl(){return this.control}}t.default=o},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(e,t){super();const i=this.generateName(t),s=document.createElement("div");s.className="slider-panel__radio-group";for(const t of e){const e={inputElement:t.input,id:this.generateID(t.id),name:i,value:t.value,inputType:"radio",inputClass:"slider-panel__radio-button",labelText:t.label,labelClass:"slider-panel__input-radio-label",wrapperClass:"slider-panel__input-radio-wrapper"},n=this.createControl(e);s.append(n)}this.control=s}getControl(){return this.control}}t.default=o},function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(e,t,i){super();const s={inputElement:e,id:this.generateID(i),inputType:"text",inputClass:"slider-panel__input",labelText:t,labelClass:"slider-panel__input-text-label",wrapperClass:"slider-panel__input-text-wrapper"};this.control=this.createControl(s)}getControl(){return this.control}}t.default=o},function(e,t,i){},function(e,t,i){},function(e,t,i){},function(e,t,i){},function(e,t,i){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,