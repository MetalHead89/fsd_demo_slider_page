!function(t){function e(e){for(var s,l,a=e[0],h=e[1],r=e[2],c=0,d=[];c<a.length;c++)l=a[c],Object.prototype.hasOwnProperty.call(n,l)&&n[l]&&d.push(n[l][0]),n[l]=0;for(s in h)Object.prototype.hasOwnProperty.call(h,s)&&(t[s]=h[s]);for(u&&u(e);d.length;)d.shift()();return o.push.apply(o,r||[]),i()}function i(){for(var t,e=0;e<o.length;e++){for(var i=o[e],s=!0,a=1;a<i.length;a++){var h=i[a];0!==n[h]&&(s=!1)}s&&(o.splice(e--,1),t=l(l.s=i[0]))}return t}var s={},n={0:0},o=[];function l(e){if(s[e])return s[e].exports;var i=s[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,l),i.l=!0,i.exports}l.m=t,l.c=s,l.d=function(t,e,i){l.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,e){if(1&e&&(t=l(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(l.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)l.d(i,s,function(e){return t[e]}.bind(null,s));return i},l.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(e,"a",e),e},l.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},l.p="";var a=window.webpackJsonp=window.webpackJsonp||[],h=a.push.bind(a);a.push=e,a=a.slice();for(var r=0;r<a.length;r++)e(a[r]);var u=h;o.push([3,1]),i()}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){this.observers={}}register(t,e){Object.prototype.hasOwnProperty.call(this.observers,t)||(this.observers[t]=[]),this.observers[t].push(e)}unsubscribe(t,e){this.observers[t]=this.observers[t].filter(t=>t!==e)}notify(t){Object.prototype.hasOwnProperty.call(this.observers,t)&&this.observers[t].forEach(e=>e.update(t))}}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(0));e.default=class{constructor(t,e){const i=document.createElement("div");this.element=i,this.subject=new n.default,this.lastPosition={left:0,top:0};let s=t+"_horizontal";e&&(s=`${t}_${e}`),this.element.classList.add(""+t,s)}setPosition(t){const e={left:t.left,top:t.top},i=this.element.parentElement;if(null!==i){const t=i.getBoundingClientRect();e.left-=t.left,e.top-=t.top}this.lastPosition=e}getPosition(){return this.lastPosition}getElement(){return this.element}getSize(){return{width:this.element.offsetWidth,height:this.element.offsetHeight}}switchToHorizontal(){const t=this.element.classList[0];this.element.classList.remove(t+"_vertical"),this.element.classList.add(t+"_horizontal")}switchToVertical(){const t=this.element.classList[0];this.element.classList.remove(t+"_horizontal"),this.element.classList.add(t+"_vertical")}remove(){this.element.remove()}getOrientation(){const t=this.element.classList[0];return this.element.classList[1].replace(t+"_","")}getRect(){return this.element.getBoundingClientRect()}getStyle(t){var e;return null===(e=document.defaultView)||void 0===e?void 0:e.getComputedStyle(this.element,null).getPropertyValue(t)}}},,function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(4),i(14),i(23),i(24),i(25),i(26),i(27),i(28)},function(t,e,i){"use strict";(function(t){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(5)),o=s(i(6)),l=s(i(7));(t=>{const e={orientation:"horizontal",type:"range",scale:!0,popUps:!0,min:0,max:10,step:1,thumbOneValue:3,thumbTwoValue:7,sliderSize:{width:500,height:10},thumbSize:{width:20,height:20}},i={init(i){const s=t.extend(e,i);return this.each((function(){const e=new n.default(s),i=new l.default(this),a=new o.default({model:e,view:i});t(this).data("settings",s),t(this).data("controller",a),t(this).data("model",e)}))},getModelSubject(){return t(this).data().model.subject},getThumbsValues(){return t(this).data().model.getThumbsValues()},getMin(){return t(this).data().model.getMin()},getMax(){return t(this).data().model.getMax()},getStep(){return t(this).data().model.getStep()},getScaleState(){return t(this).data().model.getScaleState()},getPopUpsState(){return t(this).data().model.getPopUpsState()},getType(){return t(this).data().model.getType()},getOrientation(){return t(this).data().model.getOrientation()},refreshSliderState(e){t(this).data().model.refreshSliderState(e)}};t.fn.simpleSlider=function(e,s){let n;return"string"==typeof e&&i[e]?n=i[e].call(this,s):"object"!=typeof e&&e?(t.error(`Метод с именем ${e} не существует для jQuery.simpleSlider`),n=this):n=i.init.call(this,e),n}})(t)}).call(this,i(2))},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(0));class o{constructor(t){this.orientation="horizontal",this.type="range",this.scale=!0,this.popUps=!0,this.min=0,this.max=10,this.step=1,this.thumbOneValue=3,this.thumbTwoValue=7,this.sliderSize={width:500,height:10},this.thumbSize={width:20,height:10},this.subject=new n.default,this.refreshSliderState(t)}refreshSliderState(t){void 0!==t.sliderSize&&(this.sliderSize=t.sliderSize),void 0!==t.thumbSize&&(this.thumbSize=t.thumbSize),this.orientation!==t.orientation&&(this.orientation=t.orientation,this.subject.notify("orientationIsUpdated")),this.type!==t.type&&(this.type=t.type,this.typeIsRangeAndSecondThumbValueLessThanFirst()&&(this.thumbTwoValue=this.thumbOneValue),this.subject.notify("typeIsUpdated")),this.min!==t.min&&this.updateMinValue(t.min),this.max!==t.max&&this.updateMaxValue(t.max),this.step!==t.step&&this.updateStep(t.step),this.scale!==t.scale&&(this.scale=t.scale,this.subject.notify("scaleStateIsUpdated")),this.popUps!==t.popUps&&(this.popUps=t.popUps,this.subject.notify("popUpsStateIsUpdated")),this.thumbOneValue===t.thumbOneValue&&this.thumbTwoValue===t.thumbTwoValue||this.setThumbsValues({thumbOne:t.thumbOneValue,thumbTwo:t.thumbTwoValue})}typeIsRangeAndSecondThumbValueLessThanFirst(){return"range"===this.type&&this.thumbTwoValue<this.thumbOneValue}updateThumbsState(t){const e=this.valueWithStep(this.posByOrientation(t.thumbOne));let i=null;null!==t.thumbTwo&&(i=this.valueWithStep(this.posByOrientation(t.thumbTwo))),o.valueTwoIsNullOrMoreOrEqualThenValueOne(e,i)&&(this.thumbOneValue=e,null!==i&&(this.thumbTwoValue=i)),this.subject.notify("thumbsPosIsUpdated")}static valueTwoIsNullOrMoreOrEqualThenValueOne(t,e){return null===e||t<=e}setSliderSize(t){this.sliderSize=o.getCorrectSize(t,0)}setThumbSize(t){this.thumbSize=o.getCorrectSize(t,0)}setThumbsValues(t){const e=this.thumbValueToPos(t.thumbOne);let i=null;"range"===this.type&&(i=this.thumbValueToPos(t.thumbTwo)),this.updateThumbsState({thumbOne:e,thumbTwo:i})}getMin(){return this.min}getMax(){return this.max}getStep(){return this.step}getScaleState(){return this.scale}getPopUpsState(){return this.popUps}getType(){return this.type}getOrientation(){return this.orientation}getProgressBarParams(){const t=this.thumbValueToPos(this.thumbOneValue),e=this.thumbValueToPos(this.thumbTwoValue),i=Object.assign({},this.sliderSize),s={left:0,top:0};let n=0,o=0;return"single"===this.type?o=this.posByOrientation(t)+this.sizeByOrientation(this.thumbSize):(n=this.posByOrientation(t),o=this.posByOrientation(e)-this.posByOrientation(t)+this.sizeByOrientation(this.thumbSize)),"horizontal"===this.orientation?(s.left=n,i.width=o):(s.top=n,i.height=o),{position:s,size:i}}getThumbsPos(){return{thumbOne:this.thumbValueToPos(this.thumbOneValue),thumbTwo:this.thumbValueToPos(this.thumbTwoValue)}}getPopUpsParams(){return{popUpOne:{value:this.thumbOneValue,position:this.getPopUpPosition(this.thumbValueToPos(this.thumbOneValue))},popUpTwo:{value:this.thumbTwoValue,position:this.getPopUpPosition(this.thumbValueToPos(this.thumbTwoValue))}}}getThumbsValues(){return{thumbOne:this.thumbOneValue,thumbTwo:this.thumbTwoValue}}getScalePoints(t){const e=[],i=this.getStepsCount(),s=this.getStepSize();let n=0,o=this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(t)/2;const l=i+1;for(let i=0;i<=Math.round(l-1);i+=1){const l=this.thumbPosToValue(o-this.sizeByOrientation(this.thumbSize)/2+this.sizeByOrientation(t)/2);if(o=this.getNextScalePointPos(o,t),this.isPointFits(i,o,n,t)){const i={left:0,top:0};"horizontal"===this.orientation?i.left=o:i.top=o,e.push({position:i,size:t,value:l}),n=o}o+=s}return e}isPointFits(t,e,i,s){return 0===t||e-i>this.sizeByOrientation(s)}setThumbPosOnClickPos(t){const e={left:t.left-this.thumbSize.width/2,top:t.top-this.thumbSize.height/2};let i=this.thumbOneValue,s=this.thumbTwoValue;this.thumbTwoIsNearToClick(e)?s=this.thumbPosToValue(this.posByOrientation(e)):i=this.thumbPosToValue(this.posByOrientation(e)),this.setThumbsValues({thumbOne:i,thumbTwo:s})}thumbTwoIsNearToClick(t){return"range"===this.type&&Math.abs(this.posByOrientation(t)-this.posByOrientation(this.thumbValueToPos(this.thumbTwoValue)))<Math.abs(this.posByOrientation(t)-this.posByOrientation(this.thumbValueToPos(this.thumbOneValue)))}static getCorrectSize(t,e){return{width:t.width>=e?t.width:e,height:t.height>=e?t.height:e}}getPopUpPosition(t){let e=0,i=0;return"horizontal"===this.orientation?e=t.left+this.thumbSize.width/2:i=t.top+this.thumbSize.height/2,{left:e,top:i}}updateMinValue(t){let e=t;e>=this.max&&(e=this.max-1),this.min=e,this.subject.notify("minIsUpdated")}updateMaxValue(t){let e=t;e<=this.min&&(e=this.min+1),this.max=e,this.subject.notify("maxIsUpdated")}updateStep(t){let e=t;e<=0&&(e=1),this.step=e,this.subject.notify("stepIsUpdated")}valueWithStep(t){if(this.thumbPosToValue(t)>=this.max)return this.thumbPosToValue(t);const e=this.getStepSize(),i=Math.round(t/e)*e;return this.thumbPosToValue(i)}getStepsCount(){return(this.max-this.min)/this.step}getStepSize(){const t=this.getStepsCount();return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/t}thumbPosToValue(t){const e=this.getPxPerValue();let i=Math.round(this.min+(this.max-this.min)/this.max*(t/e));return i=i<this.min?this.min:i,i=i>this.max?this.max:i,i}thumbValueToPos(t){const e={left:0,top:0},i=this.getPxPerValue();let s=t;s<this.min?s=this.min:s>this.max&&(s=this.max);const n=(s-this.min)/(this.max-this.min)*i*this.max;return"horizontal"===this.orientation?e.left=n:e.top=n,e}getPxPerValue(){return(this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize))/this.max}sizeByOrientation(t){return"horizontal"===this.orientation?t.width:t.height}posByOrientation(t){return"horizontal"===this.orientation?t.left:t.top}getNextScalePointPos(t,e){let i=t;const s=this.sizeByOrientation(this.sliderSize)-this.sizeByOrientation(this.thumbSize)/2-this.sizeByOrientation(e)/2;return i>s&&(i=s),i}}e.default=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){this.model=t.model,this.view=t.view,this.modelSubject=this.model.subject,this.viewSubject=this.view.subject,this.subscribeToEvents(),this.init()}init(){"horizontal"===this.model.getOrientation()?this.view.switchToHorizontal():this.view.switchToVertical(),this.model.setSliderSize(this.view.getSliderSize()),this.model.setThumbSize(this.view.getThumbSize()),"single"===this.model.getType()?this.view.switchToSingle():this.view.switchToRange(),this.model.getPopUpsState()?this.view.enablePopUps():this.view.disablePopUps(),this.updateView()}subscribeToEvents(){this.viewSubject.register("thumbIsDragged",this),this.modelSubject.register("thumbsPosIsUpdated",this),this.modelSubject.register("minIsUpdated",this),this.modelSubject.register("maxIsUpdated",this),this.modelSubject.register("stepIsUpdated",this),this.modelSubject.register("typeIsUpdated",this),this.modelSubject.register("orientationIsUpdated",this),this.modelSubject.register("scaleStateIsUpdated",this),this.modelSubject.register("popUpsStateIsUpdated",this),this.view.subject.register("clickToTrack",this),this.view.subject.register("clickToScale",this),this.view.subject.register("windowResized",this)}update(t){switch(t){case"thumbIsDragged":this.model.updateThumbsState(this.view.getThumbsPos());break;case"thumbsPosIsUpdated":this.updateThumbsPos();break;case"minIsUpdated":case"maxIsUpdated":case"stepIsUpdated":this.updateView();break;case"orientationIsUpdated":this.updateSliderOrientation();break;case"typeIsUpdated":this.updateSliderType();break;case"scaleStateIsUpdated":this.updateScaleState();break;case"popUpsStateIsUpdated":this.updatePopUpsSate();break;case"clickToTrack":this.model.setThumbPosOnClickPos(this.view.getTrackClickPosition());break;case"clickToScale":this.model.setThumbPosOnClickPos(this.view.getScaleClickPosition());break;case"windowResized":this.init()}}updateView(){if(this.model.updateThumbsState(this.model.getThumbsPos()),this.model.getScaleState()){this.view.enableScale();const t=this.model.getMax(),e=this.model.getScalePoints(this.view.getScalePointSize(t));this.view.addScalePoints(e)}else this.view.disableScale()}updateThumbsPos(){this.view.updateThumbs(this.model.getThumbsPos()),this.view.updatePopUps(this.model.getPopUpsParams()),this.view.updateProgressBar(this.model.getProgressBarParams())}updateSliderOrientation(){"horizontal"===this.model.getOrientation()?this.view.switchToHorizontal():this.view.switchToVertical(),this.model.setSliderSize(this.view.getSliderSize()),this.updateView()}updateSliderType(){"single"===this.model.getType()?this.view.switchToSingle():this.view.switchToRange(),this.model.updateThumbsState(this.model.getThumbsPos())}updateScaleState(){this.model.getScaleState()?(this.view.enableScale(),this.updateView()):this.view.disableScale()}updatePopUpsSate(){this.model.getPopUpsState()?(this.view.enablePopUps(),this.model.updateThumbsState(this.model.getThumbsPos())):this.view.disablePopUps()}}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(8)),o=s(i(9)),l=s(i(10)),a=s(i(11)),h=s(i(12)),r=s(i(13)),u=s(i(0));e.default=class{constructor(t){this.subject=new u.default,this.sliderWrapper=t,this.container=new n.default,this.track=new o.default,this.thumbOne=new l.default,this.thumbTwo=new l.default,this.popUpOne=new a.default,this.popUpTwo=new a.default,this.progressBar=new h.default,this.scale=new r.default,this.subscribeToEvents(),this.assembleSlider(),this.addWindowResizeEventListener()}addWindowResizeEventListener(){window.addEventListener("resize",this.windowResize.bind(this))}windowResize(){this.subject.notify("windowResized")}subscribeToEvents(){var t,e,i;this.thumbOne.subject.register("thumbIsDragged",this),null===(t=this.thumbTwo)||void 0===t||t.subject.register("thumbIsDragged",this),this.thumbOne.subject.register("thumbIsCatched",this),null===(e=this.thumbTwo)||void 0===e||e.subject.register("thumbIsCatched",this),this.track.subject.register("clickToTrack",this),null===(i=this.scale)||void 0===i||i.subject.register("clickToScale",this)}assembleSlider(){this.container.append(this.track.getElement()),this.container.append(this.thumbOne.getElement()),null!==this.thumbTwo&&this.container.append(this.thumbTwo.getElement()),null!==this.popUpOne&&this.container.append(this.popUpOne.getElement()),null!==this.popUpTwo&&this.container.append(this.popUpTwo.getElement()),this.container.append(this.progressBar.getElement()),null!==this.scale&&this.container.append(this.scale.getElement()),this.sliderWrapper.append(this.container.getElement())}update(t){var e;switch(t){case"thumbIsDragged":this.subject.notify("thumbIsDragged");break;case"thumbIsCatched":this.thumbOne.resetZIndex(),null===(e=this.thumbTwo)||void 0===e||e.resetZIndex();break;case"clickToTrack":this.subject.notify("clickToTrack");break;case"clickToScale":this.subject.notify("clickToScale")}}switchToHorizontal(){var t,e,i,s;this.container.resetMargins(),this.container.switchToHorizontal(),this.track.switchToHorizontal(),this.thumbOne.switchToHorizontal(),null===(t=this.thumbTwo)||void 0===t||t.switchToHorizontal(),null===(e=this.popUpOne)||void 0===e||e.switchToHorizontal(),null===(i=this.popUpTwo)||void 0===i||i.switchToHorizontal(),this.progressBar.switchToHorizontal(),null===(s=this.scale)||void 0===s||s.switchToHorizontal()}switchToVertical(){var t,e,i,s;this.container.resetMargins(),this.container.switchToVertical(),this.track.switchToVertical(),this.thumbOne.switchToVertical(),null===(t=this.thumbTwo)||void 0===t||t.switchToVertical(),null===(e=this.popUpOne)||void 0===e||e.switchToVertical(),null===(i=this.popUpTwo)||void 0===i||i.switchToVertical(),this.progressBar.switchToVertical(),null===(s=this.scale)||void 0===s||s.switchToVertical()}switchToSingle(){var t,e,i,s;null===(t=this.thumbTwo)||void 0===t||t.subject.unsubscribe("thumbIsCatched",this),null===(e=this.thumbTwo)||void 0===e||e.subject.unsubscribe("thumbIsCatched",this),null===(i=this.thumbTwo)||void 0===i||i.remove(),this.thumbTwo=null,null===(s=this.popUpTwo)||void 0===s||s.remove(),this.popUpTwo=null}switchToRange(){null===this.thumbTwo&&(this.thumbTwo=new l.default(this.container.getOrientation()),this.container.append(this.thumbTwo.getElement()),null!==this.popUpOne&&(this.popUpTwo=new a.default(this.container.getOrientation()),this.container.append(this.popUpTwo.getElement())),this.thumbTwo.subject.register("thumbIsDragged",this),this.thumbTwo.subject.register("thumbIsCatched",this))}disablePopUps(){var t,e;null===(t=this.popUpOne)||void 0===t||t.remove(),this.popUpOne=null,null===(e=this.popUpTwo)||void 0===e||e.remove(),this.popUpTwo=null,this.container.setMargins(this.getMargins())}enablePopUps(){null===this.popUpOne&&(this.popUpOne=new a.default(this.container.getOrientation()),this.container.append(this.popUpOne.getElement())),this.popUpTwoIsNullAndThumbTwoIsNotNull()&&(this.popUpTwo=new a.default(this.container.getOrientation()),this.container.append(this.popUpTwo.getElement())),this.container.setMargins(this.getMargins())}popUpTwoIsNullAndThumbTwoIsNotNull(){return null===this.popUpTwo&&null!==this.thumbTwo}disableScale(){var t,e;null===(t=this.scale)||void 0===t||t.subject.unsubscribe("clickToScale",this),null===(e=this.scale)||void 0===e||e.remove(),this.scale=null,this.container.setMargins(this.getMargins())}enableScale(){var t;null!==this.scale&&(null===(t=this.scale)||void 0===t||t.remove()),this.scale=new r.default(this.container.getOrientation()),this.container.append(this.scale.getElement()),this.scale.subject.register("clickToScale",this),this.container.setMargins(this.getMargins())}getThumbSize(){return this.thumbOne.getSize()}getSliderSize(){return this.container.getSize()}getThumbsPos(){const t=this.thumbOne.getPosition();let e=null;return null!==this.thumbTwo&&(e=this.thumbTwo.getPosition()),{thumbOne:t,thumbTwo:e}}updateThumbs(t){var e;this.thumbOne.moveTo(t.thumbOne),null!==t.thumbTwo&&(null===(e=this.thumbTwo)||void 0===e||e.moveTo(t.thumbTwo))}updateProgressBar(t){this.progressBar.update(t)}updatePopUps(t){null!==this.popUpOne&&this.popUpOne.update(t.popUpOne),null!==this.popUpTwo&&this.popUpTwo.update(t.popUpTwo)}getScalePointSize(t){return null!==this.scale?this.scale.getPointSize(t):{width:0,height:0}}addScalePoints(t){var e;null===(e=this.scale)||void 0===e||e.addPoints(t),this.container.setMargins(this.getMargins())}getTrackClickPosition(){return this.track.getPosition()}getScaleClickPosition(){return null===this.scale?{left:0,top:0}:this.scale.getPosition()}getMargins(){const t={left:0,top:0,right:0,bottom:0},e=this.container.getRect(),i=null!==this.popUpOne?this.popUpOne.getRect():null,s=null!==this.scale?this.scale.getRect():null;return"horizontal"===this.container.getOrientation()?(null!==i&&(t.top+=e.top-i.top),null!==s&&(t.bottom+=s.bottom-e.bottom)):(null!==i&&(t.left+=e.left-i.left),null!==s&&(t.right+=s.right-e.right)),t}}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(){super("slider")}append(t){this.element.append(t)}setMargins(t){this.element.style.marginLeft=t.left+"px",this.element.style.marginTop=t.top+"px",this.element.style.marginRight=t.right+"px",this.element.style.marginBottom=t.bottom+"px"}resetMargins(){this.element.style.margin="0"}}e.default=o},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(){super("slider__track"),this.init()}init(){this.element.addEventListener("click",this.clickToTrack.bind(this))}clickToTrack(t){this.setPosition({left:t.clientX,top:t.clientY}),this.subject.notify("clickToTrack")}}e.default=o},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(t){super("slider__thumb",t),this.shift={shiftX:0,shiftY:0},this.onMouseMoveHandler=this.drag.bind(this),this.onMouseUpHandler=this.endDrag.bind(this),this.addMousedownEventListener(),this.disableDragAndDrop()}setZIndex(t){this.element.style.zIndex=t.toString()}disableDragAndDrop(){this.element.ondragstart=()=>!1}addMousedownEventListener(){this.element.addEventListener("pointerdown",this.clickToThumb.bind(this))}clickToThumb(t){o.disableSelection();const e=this.element.getBoundingClientRect();this.setThumbShift({left:t.clientX,top:t.clientY},{left:e.left,top:e.top}),document.addEventListener("pointermove",this.onMouseMoveHandler),document.addEventListener("pointerup",this.onMouseUpHandler),this.subject.notify("thumbIsCatched"),this.increaseZIndex()}setThumbShift(t,e){this.shift.shiftX=t.left-e.left,this.shift.shiftY=t.top-e.top}increaseZIndex(){const t=this.getStyle("z-index");this.element.style.zIndex=(parseInt(t||"0",10)+1).toString()}resetZIndex(){this.element.style.zIndex=""}drag(t){this.setPosition({left:t.clientX,top:t.clientY}),this.subject.notify("thumbIsDragged")}setPosition(t){super.setPosition(t),this.lastPosition.left-=this.shift.shiftX,this.lastPosition.top-=this.shift.shiftY}endDrag(){o.enableSelection(),document.removeEventListener("pointermove",this.onMouseMoveHandler),document.removeEventListener("pointerup",this.onMouseUpHandler)}moveTo(t){this.lastPosition=t,this.element.style.left=t.left+"px",this.element.style.top=t.top+"px"}static disableSelection(){document.onselectstart=()=>!1,document.onpointerdown=()=>!1}static enableSelection(){document.onselectstart=null,document.onpointerdown=null}}e.default=o},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(t){super("slider__pop-up",t)}update(t){this.updateValue(t.value),this.updatePosition(t.position)}updateValue(t){this.element.innerHTML=""+t}updatePosition(t){this.element.style.left=t.left+"px",this.element.style.top=t.top+"px"}}e.default=o},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(){super("slider__progress-bar")}update(t){this.element.style.left=t.position.left+"px",this.element.style.top=t.position.top+"px",this.element.style.width=t.size.width+"px",this.element.style.height=t.size.height+"px"}}e.default=o},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(1));class o extends n.default{constructor(t){super("slider__scale",t),this.init()}init(){this.element.addEventListener("click",this.clickToScale.bind(this))}clickToScale(t){this.setPosition({left:t.clientX,top:t.clientY}),this.subject.notify("clickToScale")}getPointSize(t){this.addPoint({position:{left:0,top:0},size:{width:0,height:0},value:t});const e={width:0,height:0},i=this.element.querySelector(".slider__scale-point");return e.width=(null==i?void 0:i.offsetWidth)||0,e.height=(null==i?void 0:i.offsetHeight)||0,null==i||i.remove(),e}addPoints(t){for(let e=0;e<t.length;e+=1)this.addPoint(t[e])}addPoint(t){const e=this.getOrientation(),i=document.createElement("div");i.classList.add("slider__scale-point","slider__scale-point_"+e),t.size.width>0&&(i.style.width=t.size.width+"px"),"horizontal"===e?this.element.style.height=t.size.height+"px":this.element.style.width=t.size.width+"px";const s=document.createElement("div");s.classList.add("slider__scale-point-marker");const n=document.createElement("div");n.classList.add("slider__scale-point-label","slider__scale-point-label_"+e),n.innerText=t.value.toString(),i.style.left=t.position.left+"px",i.style.top=t.position.top+"px",i.append(s),i.append(n),this.element.append(i)}}e.default=o},function(t,e,i){"use strict";(function(t){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(15)),o=s(i(21)),l=s(i(22));(t=>{const e={init(){return this.each((function(){const e=new n.default(this),i=new o.default(t(this));new l.default(e,i)}))}};t.fn.controlPanel=function(i,s){let n;return"string"==typeof i&&e[i]?n=e[i].call(this,s):"object"!=typeof i&&i?(t.error(`Метод с именем ${i} не существует для jQuery.controlPanel`),n=this):n=e.init.call(this,s),n}})(t)}).call(this,i(2))},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(16)),o=s(i(17)),l=s(i(18)),a=s(i(19)),h=s(i(20)),r=s(i(0));class u extends r.default{constructor(t){super(),this.container=new n.default,this.sliderWrapper=t,this.thumbOneValue=new o.default("First thumb value"),this.thumbTwoValue=new o.default("Second thumb value"),this.min=new o.default("min value"),this.max=new o.default("max value"),this.step=new o.default("step"),this.typeRadio=new a.default("type",{label:"single",value:"single"},{label:"range",value:"range"}),this.orientationRadio=new a.default("orientation",{label:"horizontal",value:"horizontal"},{label:"vertical",value:"vertical"}),this.scaleCheckbox=new h.default({label:"scale",name:"scale",value:"scale"}),this.popUpsCheckbox=new h.default({label:"pop ups",name:"popUps",value:"popUps"}),this.subscribeToEvents(),this.createPanel()}createPanel(){this.container.append(l.default({wrapperClass:"control-panel__text-fields-group",elements:[this.thumbOneValue.getControl(),this.thumbTwoValue.getControl()]})),this.container.append(l.default({wrapperClass:"control-panel__text-fields-group",elements:[this.min.getControl(),this.max.getControl(),this.step.getControl()]}));const t=l.default({header:"type",wrapperClass:"",elements:[this.typeRadio.getControl()]}),e=l.default({header:"orientation",wrapperClass:"",elements:[this.orientationRadio.getControl()]}),i=l.default({wrapperClass:"",elements:[t,e]}),s=l.default({header:"on/off elements",wrapperClass:"",elements:[this.scaleCheckbox.getControl(),this.popUpsCheckbox.getControl()]});this.container.append(l.default({wrapperClass:"control-panel__checkboxes-and-radios-wrapper",elements:[i,s]})),this.sliderWrapper.append(this.container.getElement())}subscribeToEvents(){this.thumbOneValue.register("controlPanelDataUpdated",this),this.thumbTwoValue.register("controlPanelDataUpdated",this),this.min.register("controlPanelDataUpdated",this),this.max.register("controlPanelDataUpdated",this),this.step.register("controlPanelDataUpdated",this),this.typeRadio.register("controlPanelDataUpdated",this),this.orientationRadio.register("controlPanelDataUpdated",this),this.scaleCheckbox.register("controlPanelDataUpdated",this),this.popUpsCheckbox.register("controlPanelDataUpdated",this)}update(t){"controlPanelDataUpdated"===t&&(this.notify("controlPanelDataUpdated"),this.switchOrientation())}switchOrientation(){"horizontal"===this.getOrientation()?(this.container.switchToHorizontal(),this.sliderWrapper.classList.remove("slider-wrapper_vertical"),this.sliderWrapper.classList.add("slider-wrapper_horizontal")):(this.container.switchToVertical(),this.sliderWrapper.classList.remove("slider-wrapper_horizontal"),this.sliderWrapper.classList.add("slider-wrapper_vertical"))}setThumbsValues(t){this.thumbOneValue.setValue(t.thumbOne),this.thumbTwoValue.setValue(t.thumbTwo)}setMinValue(t){this.min.setValue(t)}setMaxValue(t){this.max.setValue(t)}setStep(t){this.step.setValue(t)}setScaleState(t){this.scaleCheckbox.setState(t)}setPopUpsState(t){this.popUpsCheckbox.setState(t)}setTypeRadio(t){this.typeRadio.switchTo(t)}setOrientationRadio(t){this.orientationRadio.switchTo(t)}getOrientation(){return this.orientationRadio.getValue()}getType(){return this.typeRadio.getValue()}getScaleState(){return this.scaleCheckbox.getState()}getPopUpsState(){return this.popUpsCheckbox.getState()}getMin(){return this.min.getValue()}getMax(){return this.max.getValue()}getStep(){return this.step.getValue()}getThumbOneValue(){return this.thumbOneValue.getValue()}getThumbTwoValue(){return this.thumbTwoValue.getValue()}getThumbsValues(){return{thumbOne:this.thumbOneValue.getValue(),thumbTwo:this.thumbTwoValue.getValue()}}}e.default=u},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){this.element=document.createElement("div"),this.element.classList.add("control-panel")}getElement(){return this.element}append(t){this.element.append(t)}switchToHorizontal(){this.element.classList.remove("control-panel_vertical"),this.element.classList.add("control-panel_horizontal")}switchToVertical(){this.element.classList.remove("control-panel_horizontal"),this.element.classList.add("control-panel_vertical")}}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(0));class o extends n.default{constructor(t){super(),this.control=document.createElement("div"),this.field=document.createElement("input"),this.label=document.createElement("label"),this.init(t)}getControl(){return this.control}getValue(){return parseInt(this.field.value,10)}setValue(t){this.field.value=""+t}init(t){this.control.classList.add("slider-panel__text-field-control"),this.field.classList.add("control-panel__text-field"),this.field.addEventListener("blur",this.reportChanges.bind(this)),this.field.onkeypress=o.removeNonDigitChar,this.label.classList.add("slider-panel__text-field-label"),this.label.innerText=t,this.label.append(this.field),this.control.append(this.label)}reportChanges(){this.notify("controlPanelDataUpdated")}static removeNonDigitChar(t){return/[-\d]/.test(t.key)}}e.default=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){const e=document.createElement("div");if(e.className=t.wrapperClass,void 0!==t.header){const i=document.createElement("label");i.classList.add("control-panel__radio-group-header"),i.innerText=t.header,e.append(i)}for(let i=0;i<t.elements.length;i+=1)e.append(t.elements[i]);return e}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(0));class o extends n.default{constructor(t,...e){super();const i=o.generateName(t);this.control=document.createElement("div"),this.control.classList.add("control-panel__radio-group"),this.radios=[],this.init(i,e)}getControl(){return this.control}getValue(){for(let t=0;t<this.radios.length;t+=1)if(this.radios[t].checked)return this.radios[t].value;return""}init(t,e){for(let i=0;i<e.length;i+=1){const s=document.createElement("div");s.classList.add("control-panel__radio-wrapper");const n=document.createElement("label");n.classList.add("control-panel__radio-label"),n.innerText=e[i].label;const l=document.createElement("input");l.type="radio",l.name=t,l.value=e[i].value,o.radioIsFirstOrChecked(i,e[i].checked)&&(l.checked=!0),l.classList.add("control-panel__radio-button"),l.addEventListener("change",this.onChange.bind(this)),this.radios.push(l),n.append(l),s.append(n),this.control.append(s)}}static radioIsFirstOrChecked(t,e){return 0===t||e}onChange(){for(let t=0;t<this.radios.length;t+=1){const e=this.radios[t].parentElement;this.radios[t].checked?null==e||e.classList.add("control-panel__radio-label_checked"):null==e||e.classList.remove("control-panel__radio-label_checked")}this.notify("controlPanelDataUpdated")}switchTo(t){for(let e=0;e<this.radios.length;e+=1)if(this.radios[e].value===t){this.radios[e].checked=!0,this.onChange();break}}static generateName(t){let e=1,i="";for(;""===i;){const s=`${t}${e}`;null===document.querySelector(`[name="${s}"]`)&&(i=s),e+=1}return i}}e.default=o},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(0));class o extends n.default{constructor(t){super(),this.control=document.createElement("div"),this.label=document.createElement("label"),this.checkbox=document.createElement("input"),this.init(t)}init(t){this.control.classList.add("control-panel__checkbox-wrapper"),this.label.classList.add("control-panel__checkbox-label"),this.label.innerText=t.label,this.checkbox.type="checkbox",this.checkbox.name=t.name,this.checkbox.value=t.value,this.checkbox.classList.add("control-panel__checkbox"),this.checkbox.addEventListener("change",this.onChange.bind(this)),this.label.append(this.checkbox),this.control.append(this.label)}getControl(){return this.control}onChange(){this.checkbox.checked?this.label.classList.add("control-panel__checkbox-label_checked"):this.label.classList.remove("control-panel__checkbox-label_checked"),this.notify("controlPanelDataUpdated")}setState(t){this.checkbox.checked=t,this.onChange()}getState(){return this.checkbox.checked}}e.default=o},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(0));class o extends n.default{constructor(t){super(),this.slider=t,this.subject=t.simpleSlider("getModelSubject"),this.subject.register("thumbsPosIsUpdated",this)}update(t){"thumbsPosIsUpdated"===t&&this.notify("thumbsPosIsUpdated")}getThumbsValues(){return this.slider.simpleSlider("getThumbsValues")}getMin(){return this.slider.simpleSlider("getMin")}getMax(){return this.slider.simpleSlider("getMax")}getStep(){return this.slider.simpleSlider("getStep")}getScaleState(){return this.slider.simpleSlider("getScaleState")}getPopUpsState(){return this.slider.simpleSlider("getPopUpsState")}getType(){return this.slider.simpleSlider("getType")}getOrientation(){return this.slider.simpleSlider("getOrientation")}refreshSliderState(t){this.slider.simpleSlider("refreshSliderState",t)}}e.default=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t,e){this.view=t,this.model=e,this.init(),this.subscribeToEvents()}subscribeToEvents(){this.model.register("thumbsPosIsUpdated",this),this.view.register("controlPanelDataUpdated",this)}init(){this.view.setThumbsValues(this.model.getThumbsValues()),this.view.setMinValue(this.model.getMin()),this.view.setMaxValue(this.model.getMax()),this.view.setStep(this.model.getStep()),this.view.setScaleState(this.model.getScaleState()),this.view.setPopUpsState(this.model.getPopUpsState()),this.view.setTypeRadio(this.model.getType()),this.view.setOrientationRadio(this.model.getOrientation())}update(t){if("thumbsPosIsUpdated"===t&&this.view.setThumbsValues(this.model.getThumbsValues()),"controlPanelDataUpdated"===t){const t={orientation:this.view.getOrientation(),type:this.view.getType(),scale:this.view.getScaleState(),popUps:this.view.getPopUpsState(),min:this.view.getMin(),max:this.view.getMax(),step:this.view.getStep(),thumbOneValue:this.view.getThumbOneValue(),thumbTwoValue:this.view.getThumbTwoValue()};this.model.refreshSliderState(t)}}}},function(t,e,i){"use strict";(function(t){const e=document.querySelector(".add-new-slider-btn");let i=document.querySelector(".help-image");const s=document.querySelector(".button-wrapper");function n(t){t.remove(),0===document.querySelectorAll(".slider-wrapper").length&&(null==e||e.classList.add("add-new-slider-btn_margin-top"))}null==e||e.addEventListener("click",(function(){if(null!==s){null==i||i.remove(),i=null,null==e||e.classList.remove("add-new-slider-btn_margin-top");const o=document.createElement("div");o.classList.add("slider-wrapper"),s.before(o);const l=document.createElement("span");l.classList.add("material-icons","remove-slider-button__icon"),l.innerText="clear";const a=document.createElement("button");a.classList.add("remove-slider-button"),a.append(l),a.addEventListener("click",n.bind(a,o)),o.append(a),t(o).simpleSlider().controlPanel()}}))}).call(this,i(2))},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,